<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2020/10/08/da-jian/kuai-su-she-zhi-ma-yun/"/>
      <url>/2020/10/08/da-jian/kuai-su-she-zhi-ma-yun/</url>
      
        <content type="html"><![CDATA[<p>快速设置— 如果你知道该怎么操作，直接使用下面的地址</p><p><a href="https://gitee.com/zhangcheng0126/index.git" target="_blank" rel="noopener">https://gitee.com/zhangcheng0126/index.git</a><br>我们强烈建议所有的git仓库都有一个README, LICENSE, .gitignore文件</p><p>Git入门？查看 帮助 , Visual Studio / TortoiseGit / Eclipse / Xcode 下如何连接本站, 如何导入仓库</p><p>简易的命令行入门教程:</p><p>Git 全局设置:</p><p>git config –global user.name “无风不起浪”<br>git config –global user.email “<a href="mailto:2508723631@qq.com" target="_blank" rel="noopener">2508723631@qq.com</a>“<br>创建 git 仓库:</p><p>mkdir index<br>cd index<br>git init<br>touch README.md<br>git add README.md<br>git commit -m “first commit”<br>git remote add origin <a href="https://gitee.com/zhangcheng0126/index.git" target="_blank" rel="noopener">https://gitee.com/zhangcheng0126/index.git</a><br>git push -u origin master<br>已有仓库?</p><p>cd existing_git_repo<br>git remote add origin <a href="https://gitee.com/zhangcheng0126/index.git" target="_blank" rel="noopener">https://gitee.com/zhangcheng0126/index.git</a><br>git push -u origin master</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php的文件命令.md</title>
      <link href="/2019/06/15/hou-duan/php/php-de-wen-jian-ming-ling/"/>
      <url>/2019/06/15/hou-duan/php/php-de-wen-jian-ming-ling/</url>
      
        <content type="html"><![CDATA[<p><code>`</code> PHP</p><pre><code>&lt;?php  $info = ob_get_contents(); // 这个是这个页面的所有信息  $filectime = filectime(&quot;index.html&quot;); // 这个index.html改成你需要的if ( !(time() - 60 &gt; $filectime) ) { //  这个设置每天进行更换 3600*24是时间  exit();}if ( $handle = @fopen(&#39;index.html&#39;, &#39;w&#39;) ) { // 这个index.html改成你需要的  @fwrite($handle, $info);  @fclose($handle);}?&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站建设</title>
      <link href="/2019/05/17/da-jian/mian-fei-da-jian-wang-zhan-de-xu-ni-kong-jian-zhu-ji/"/>
      <url>/2019/05/17/da-jian/mian-fei-da-jian-wang-zhan-de-xu-ni-kong-jian-zhu-ji/</url>
      
        <content type="html"><![CDATA[<p>2019盘点可以用的免费虚拟空间大全</p><p>收集不易，请多多支持。<br>希望大家可以用得到。</p><p>点蜜空间 <a href="http://my.10g.me/cart.php" target="_blank" rel="noopener">http://my.10g.me/cart.php</a><br>番茄互联 <a href="https://www.fqidc.cn/index.php/buy/index/10/#" target="_blank" rel="noopener">https://www.fqidc.cn/index.php/buy/index/10/#</a><br>异云互联 <a href="http://www.1yit.cn/" target="_blank" rel="noopener">http://www.1yit.cn/</a><br>三丰云 <a href="https://www.sanfengyun.com/free/" target="_blank" rel="noopener">https://www.sanfengyun.com/free/</a><br>星空云空间 <a href="https://console.cloud.haosim.cn/index.php/buy/index/" target="_blank" rel="noopener">https://console.cloud.haosim.cn/index.php/buy/index/</a><br>卓越互联 <a href="http://www.preec.com/hostview.asp?id=11" target="_blank" rel="noopener">http://www.preec.com/hostview.asp?id=11</a><br>凌宇云 <a href="http://raygzs.cn/index.php/buy/index/" target="_blank" rel="noopener">http://raygzs.cn/index.php/buy/index/</a><br>梦想互联 <a href="https://www.12ta.cn/?c=nproduct&amp;a=lists&amp;group_id=2" target="_blank" rel="noopener">https://www.12ta.cn/?c=nproduct&amp;a=lists&amp;group_id=2</a><br>YG-互联 <a href="http://www.idcyg.cn/index.php/buy/index/" target="_blank" rel="noopener">http://www.idcyg.cn/index.php/buy/index/</a><br>蓝天主机 <a href="http://free.qqyangyu.com/cart.php" target="_blank" rel="noopener">http://free.qqyangyu.com/cart.php</a><br>小云互联 <a href="http://www.vvvps.cn/buy/index/3/#" target="_blank" rel="noopener">http://www.vvvps.cn/buy/index/3/#</a><br>梦月云 <a href="http://mengyueyun.cn/index.php/buy/index/" target="_blank" rel="noopener">http://mengyueyun.cn/index.php/buy/index/</a><br>host-sp互联 <a href="http://host.janzhi.cn/index.php/buy/index/" target="_blank" rel="noopener">http://host.janzhi.cn/index.php/buy/index/</a><br>光速互聯（注意用提示的优惠码，可以免费） <a href="https://lshost.cc/cart.php?a=confproduct&amp;i=0" target="_blank" rel="noopener">https://lshost.cc/cart.php?a=confproduct&amp;i=0</a><br>阡陌互联 <a href="http://qmhl.cc/index.php/buy/index/11/#" target="_blank" rel="noopener">http://qmhl.cc/index.php/buy/index/11/#</a><br>智信云 <a href="http://www.zxhost.cn/index.php/buy/index/3/" target="_blank" rel="noopener">http://www.zxhost.cn/index.php/buy/index/3/</a><br>五星互联 <a href="http://www.5sidc.com/free-hosting.php" target="_blank" rel="noopener">http://www.5sidc.com/free-hosting.php</a><br>安安互联 <a href="http://www.an56.org/" target="_blank" rel="noopener">http://www.an56.org/</a><br>无常互联 <a href="http://yal.698dg.cn/index.php/buy/index/3/#" target="_blank" rel="noopener">http://yal.698dg.cn/index.php/buy/index/3/#</a><br>leadhoster <a href="https://www.leadhoster.com/index.html" target="_blank" rel="noopener">https://www.leadhoster.com/index.html</a><br>暮想云 <a href="http://www.58mxy.com/cart.php?gid=9" target="_blank" rel="noopener">http://www.58mxy.com/cart.php?gid=9</a></p><p>熊猫虚拟主机：<a href="http://www.ueidear.net" target="_blank" rel="noopener">www.ueidear.net</a>   介绍：带CC防御的免费虚拟主机</p><p>腾博云主机  网址：<a href="http://tubor.com.cn" target="_blank" rel="noopener">http://tubor.com.cn</a>     介绍：这个老不死主机很经打，除了不怎么稳，免空也都不错。<br>316e云主机  网址：<a href="http://www.316e.net" target="_blank" rel="noopener">www.316e.net</a> 介绍：推荐用里面的美国，香港日常抽风…<br>星空云主机 网址：<a href="http://www.6zhen.cn" target="_blank" rel="noopener">www.6zhen.cn</a>  介绍：这个用来测试好，骚卡…<br>苏联云主机 网址：<a href="http://host.idada.club" target="_blank" rel="noopener">http://host.idada.club</a> 介绍：大致不错，日常备份，就是免空太少，官网稍卡…….<br>烟雨云主机 网址：<a href="http://www.axin.date" target="_blank" rel="noopener">www.axin.date</a> 介绍：主机不错，官网难被打死，免空有点少。<br>松果云主机 网址：<a href="http://idc.zsnb.mobi" target="_blank" rel="noopener">http://idc.zsnb.mobi</a> 介绍：低防，不推荐，测试压力必备.<br>橙子云主机 网址：<a href="http://idc.chengzi.ga/" target="_blank" rel="noopener">http://idc.chengzi.ga/</a> 介绍：官网高防，产品有点卡..<br>华庆云主机 网址：<a href="http://www.shery.cn" target="_blank" rel="noopener">www.shery.cn</a> 介绍：骚麻烦.<br>景安网址：<a href="http://vps.zzidc.com/free.html" target="_blank" rel="noopener">http://vps.zzidc.com/free.html</a> 介绍：我还能说什么？？？<br>小宇云主机  网址：<a href="http://yuidc.top" target="_blank" rel="noopener">http://yuidc.top</a> 介绍：主要对接别人，偷了别人很多优秀免空，做了很久，信誉有点问题，用免费就好。<br>星联IDC 网址：<a href="http://host.dlidc.ml" target="_blank" rel="noopener">http://host.dlidc.ml</a> 介绍：产品骚卡，官网还行<br>小金云主机 网址：<a href="http://2xj.top" target="_blank" rel="noopener">http://2xj.top</a> 介绍：官网骚卡，产品还行</p><p>华为免费服务器（推荐） 网址：<a href="http://www.hwclouds.com" target="_blank" rel="noopener">www.hwclouds.com</a> 介绍：免费6个月已经超神很久了 至少比其他大型的大方多少万倍。<br>京东云免费服务器 网址：jcloud.com 介绍：想去就去 不想就算了 使用期比较短<br>腾讯云免费服务器（推荐） 网址：cloud.tencent.com 介绍：还行还行 以前华为云没出时相对不错的。<br>百度云免费服务器 网址：cloud.baidu.com 介绍：也不错，仅次华为。</p><p>趣零免费域名 网址：<a href="http://www.qu0.cn" target="_blank" rel="noopener">www.qu0.cn</a> 介绍：稳定很久了<br>FREEnom 网址：<a href="http://www.freenom.com" target="_blank" rel="noopener">www.freenom.com</a> 介绍：稳定好久了<br>景安top（需实名） 网址：zzidc.com 介绍：稳定好久了<br>新网CLUB （一元） 网址：<a href="http://www.xinnet.com" target="_blank" rel="noopener">www.xinnet.com</a> 介绍：稳定好久了<br>阿里云1元top，online，ltd，group 网址：<a href="https://wanwang.aliyun.com/domain/1yuan?spm=5176.8006371.1003.1club.6fa6f4608Vdndw" target="_blank" rel="noopener">https://wanwang.aliyun.com/domain/1yuan?spm=5176.8006371.1003.1club.6fa6f4608Vdndw</a> 介绍：超级棒的活动 趁早撸 撸完就没了</p><blockquote><p>我的主站：无风不起浪网 <a href="http://wufengbuqilangwang.top/index/index.html" target="_blank" rel="noopener">http://wufengbuqilangwang.top/index/index.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网站服务器与虚拟主机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟主机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI基础视频课程</title>
      <link href="/2019/04/17/ruan-jian-she-ji/ai/ai-ji-chu-shi-pin/"/>
      <url>/2019/04/17/ruan-jian-she-ji/ai/ai-ji-chu-shi-pin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>腾讯课堂AI基础视频课程</p></blockquote><iframe id src="https://ke.qq.com/course/295650" frameborder="0" scrolling="no" width="100%" vsspace="0" hspace="0" marginwidth="0" marginheight="0" height="500"></iframe>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计类 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css基础及选择器常用属性.md</title>
      <link href="/2019/04/08/qian-duan/html5-css3/css-ji-chu-ji-xuan-ze-qi-chang-yong-shu-xing/"/>
      <url>/2019/04/08/qian-duan/html5-css3/css-ji-chu-ji-xuan-ze-qi-chang-yong-shu-xing/</url>
      
        <content type="html"><![CDATA[<blockquote><!--内嵌方式--><pre><code>/*不推荐大家使用，不利与优化*/@import url(&quot;./1.css&quot;);</code></pre></blockquote><blockquote><p>  属性选择器讲解<br>    img[title=”1dasdadad”]{border:1px solid red;}<br>    div[class=”sulia”]{color:red;}<br>    div[class~=”sulia”]{color:#abcdef;}<br>    div[class|=”job-kimi”]{color:#996;}<br>    div[class=”sulia”][title]{color:black;}</p></blockquote><pre><code>&lt;img src=&quot;&quot; title=&quot;1dasdadad&quot;&gt;&lt;img src=&quot;&quot; title=&quot;1dasdadad&quot;&gt;&lt;img src=&quot;&quot; title=&quot;job&quot;&gt;&lt;div class=&quot;job&quot;&gt;adada&lt;/div&gt;&lt;div class=&quot;sulia&quot; title=&quot;a&quot;&gt;adada&lt;/div&gt;&lt;div class=&quot;job sulia&quot; &gt;asdad&lt;/div&gt;&lt;div class=&quot;job-kimi&quot; &gt;4132132132&lt;/div&gt;&lt;div class=&quot;pp&quot;&gt;aaaaaaa&lt;/div&gt;&lt;div class=&quot;ss&quot;&gt;bbbbbbbbb&lt;/div&gt;&lt;div class=&quot;pop&quot;&gt;cccccccc&lt;/div&gt;&lt;div class=&quot;poop&quot;&gt;ddddddddd&lt;/div&gt;</code></pre><hr><pre><code>    div[class^=&quot;p&quot;]{color:red;}    div[class$=&quot;o&quot;]{color:green;}    div[class*=&quot;op&quot;]{color:blue;}</code></pre><hr><blockquote><p>通用基础选择器<br>        a,address,b,big,blockquote,body,center,cite,code,dd,del,div,dl,dt,em,fieldset,font,form,h1,h2,h3,h4,h5,h6,html,i,iframe,img,ins,label,legend,li,ol,p,pre,small,span,strong,u,ul,var{margin:0;padding:0}</p></blockquote><blockquote><p>伪类选择器<br>        a:first-child{color:green;}</p></blockquote><pre><code>    a:visited{color:green;}    a:hover{color:red;}</code></pre><blockquote><p>  伪元素选择器<br>        p:first-line{color:#452;}<br>        div:before{content:”…………………”; }<br>        div:after{content:”爱上你了”;}</p></blockquote><blockquote><p>  组合选择器<br>        .a,.b{color:#f96;}<br>        div.a{color:red;}<br>        p.d&gt;a{color:#666;}<br>        p.d a{ color:red;}<br>        div + div{ color:green;}</p></blockquote><pre><code>    div~.pp{        color:#abcd12;    }</code></pre><blockquote><p>  用户页面有关的伪类<br>        input[type=”text”]:enabled{background:red;}<br>        input[type=”text”]:disabled{background:green;}<br>        input:checked{width:100px;}</p></blockquote><pre><code>    ::selection{        color:#abcdef;    }*  *  */*-moz-Gecko引擎的浏览器（Firefox）*/-webkit-(chrome、safari)-o--ms- ietransition:-webkit-transition:-moz-transition:-o-transition:</code></pre><blockquote><p>  结构性|反选伪类<br>    :root{ background:#abcdef;};</p></blockquote><pre><code>p:nth-child(3){color:red;}div a:nth-child(2){color:green;}div a:nth-last-child(2){color:blue;}div a:nth-of-type(odd){color:#666;}div a:last-child{color:#abcdef;}div p:nth-child(3n+1){color:#960;}:not(p){color:orange;};:target{    color:red;};</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html5 </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字体与文本相关属性</title>
      <link href="/2019/04/08/qian-duan/html5-css3/zi-ti-yu-wen-ben-xiang-guan-shu-xing/"/>
      <url>/2019/04/08/qian-duan/html5-css3/zi-ti-yu-wen-ben-xiang-guan-shu-xing/</url>
      
        <content type="html"><![CDATA[<hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html5 </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5常用标签属性</title>
      <link href="/2019/04/08/qian-duan/html5-css3/html5-chang-yong-biao-qian-shu-xing/"/>
      <url>/2019/04/08/qian-duan/html5-css3/html5-chang-yong-biao-qian-shu-xing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>事件元素</p></blockquote><p> contentEditable=”true”<br> ondblclick=”document.designMode=’on’”</p><blockquote><p>文档结构元素讲解<br>    <body><br>        <!--定义一篇文章--><br>        <article><br>            <header><br>                <h1>job老师有点帅</h1><br>                <div>作者：job</div><br>            </header><br>            <!--对页面的内容进行分块--><br>            <section><br>                <article><br>                    <header><br>                        <h2>还在帅呢</h2><br>                    </header><br>                </article><br>            </section><br>            <footer><br>                <p>以上都是job老师的观点</p><br>            </footer><br>        </article></body></p></blockquote><pre><code>    &lt;hgroup&gt;        &lt;h1&gt;adad&lt;/h1&gt;        &lt;h2&gt;dad&lt;/h2&gt;    &lt;/hgroup&gt;    &lt;figure&gt;        &lt;figcaption&gt;job老师很帅&lt;/figcaption&gt;        &lt;img src=&quot;&quot;&gt;        &lt;img src=&quot;&quot;&gt;    &lt;/figure&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><blockquote><p>语义相关元素讲解</p></blockquote><pre><code>&lt;mark&gt;job老师很帅&lt;/mark&gt;&lt;time datetime=&quot;2016-9-11&quot;&gt;2016-9-11&lt;/time&gt;</code></pre><blockquote><p>特殊功能的元素<br>    <!--度量衡--><br>    <meter min="0" max="160" value="110" low="110" high="140" optimum="150">120</meter></p></blockquote><pre><code>&lt;meter value=&quot;0.8&quot;&gt;&lt;/meter&gt;    min 定义最小值    max 定义最大值    value 定义度量的值    low 定义度量的值位于那个点，界定为低的值    high 定义度量的值位于那个点，界定为高的值    optimum 定义什么值是最佳的&lt;progress max=&quot;100&quot;  value=&quot;60&quot; style=&quot;width:200px;border:1px solid #f60;color:#666;background:#abcdef;&quot;&gt;11&lt;/progress&gt;</code></pre><blockquote><p> spellcheck、文本域属性讲解<br>    <textarea spellcheck="true"></textarea><br>    <textarea cols="20" rows="3"></textarea><br>    <input type="text" name="name" spellcheck="true"></p></blockquote><blockquote><p>button<br>    <button type="button" name="btn" value="btn">nnnn</button></p></blockquote><pre><code>&lt;button type=&quot;submit&quot; value=&quot;btn&quot;&gt; &lt;img src=&quot;https://ss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/logo_white_fe6da1ec.png&quot; alt=&quot;&quot;&gt;&lt;/button&gt;</code></pre><blockquote><p>表单元素讲解<br>    <form action="./1.html" enctype method="post/get" target="_blank"><br>        <input type="submit" name value="提交"><br>    </form></p></blockquote><blockquote><p>input表单控件讲解<br>    <form method="post" action><br>        <input type="text" name="name" value="job老师有点帅" disabled="disabled"><br><br>        <input type="radio" name="radio" value="1" checked="checked">男<br>        <input type="radio" name="radio" value="2">女<br></form></p></blockquote><pre><code>    &lt;input type=&quot;checkbox&quot; name=&quot;checkbox&quot; value=&quot;1&quot; checked=checked&gt;篮球    &lt;input type=&quot;checkbox&quot; name=&quot;checkbox&quot; value=&quot;1&quot;&gt;足球    &lt;input type=&quot;checkbox&quot; name=&quot;checkbox&quot; value=&quot;1&quot;&gt;游泳&lt;br/&gt;    &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;&lt;br/&gt;    &lt;input type=&quot;hidden&quot; name=&quot;hidden&quot; value=&quot;job&quot;&gt;123&lt;br/&gt;    密码：&lt;input type=&quot;password&quot; name=&quot;password&quot; value=&quot;&quot; size=&quot;100&quot;&gt;&lt;br/&gt;    &lt;input type=&quot;button&quot; name=&quot;button&quot; value=&quot;搜索&quot;&gt;    &lt;input type=&quot;reset&quot; name=&quot;reset&quot; value=&quot;重填&quot;&gt;    &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;</code></pre><blockquote><p>  label属性讲解<br>    <label for="username">用户名：</label><br>    <input type="text" name="username" id="username"><br>    <input id="a" onkeyup="document.getElementById('a').value=this.value.replace(/./g,'…^')"><br>    <label for="password">密码：</label><br>    <input type="password" name="password" id="password"><br>    <label for="nan">男</label><br>    <input type="radio" name="nan" id="nan"><br>    <label for="nv">女</label><br>    <input type="radio" name="nan" id="nv"></p></blockquote><blockquote><p>  select下拉列表讲解<br>    <select size="10" id="sel" name="sel" multiple="multiple"></select></p></blockquote><pre><code>&lt;select size=&quot;3&quot; id=&quot;sel&quot; name=&quot;sel&quot; multiple=multiple required=required&gt;&lt;/select&gt;&lt;select name=&quot;year&quot;&gt;  &lt;optgroup label=&quot;00后&quot;&gt;    &lt;option value=&quot;2000&quot;&gt;2001&lt;/option&gt;    &lt;option value=&quot;2000&quot;&gt;2000&lt;/option&gt;  &lt;/optgroup&gt;    &lt;optgroup label=&quot;90后&quot;&gt;    &lt;option value=&quot;1999&quot;&gt;1999&lt;/option&gt;    &lt;option value=&quot;1998&quot;&gt;1998&lt;/option&gt;    &lt;option value=&quot;1997&quot;&gt;1997&lt;/option&gt;    &lt;option value=&quot;1996&quot;&gt;1996&lt;/option&gt;    &lt;option value=&quot;1995&quot;&gt;1995&lt;/option&gt;    &lt;option value=&quot;1994&quot;&gt;1994&lt;/option&gt;    &lt;option value=&quot;1993&quot;&gt;1993&lt;/option&gt;    &lt;option value=&quot;1992&quot;&gt;1992&lt;/option&gt;   &lt;/optgroup&gt; &lt;/select&gt;年 &lt;select name=&quot;month&quot;&gt;月    &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;    &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;    &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;    &lt;option value=&quot;4&quot;&gt;4&lt;/option&gt;    &lt;option value=&quot;5&quot;&gt;5&lt;/option&gt;    &lt;option value=&quot;6&quot;&gt;6&lt;/option&gt;    &lt;option value=&quot;7&quot;&gt;7&lt;/option&gt;    &lt;option value=&quot;8&quot;&gt;8&lt;/option&gt;    &lt;option value=&quot;9&quot;&gt;9&lt;/option&gt;    &lt;option value=&quot;10&quot;&gt;10&lt;/option&gt;    &lt;option value=&quot;11&quot;&gt;11&lt;/option&gt;    &lt;option value=&quot;12&quot;&gt;12&lt;/option&gt; &lt;/select&gt;月 &lt;select name=&quot;day&quot;&gt;日    &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;    &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;    &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;    &lt;option value=&quot;4&quot;&gt;4&lt;/option&gt;    &lt;option value=&quot;5&quot;&gt;5&lt;/option&gt;    &lt;option value=&quot;6&quot;&gt;6&lt;/option&gt;    &lt;option value=&quot;7&quot;&gt;7&lt;/option&gt;    &lt;option value=&quot;8&quot;&gt;8&lt;/option&gt;    &lt;option value=&quot;9&quot;&gt;9&lt;/option&gt;    &lt;option value=&quot;10&quot;&gt;10&lt;/option&gt;    &lt;option value=&quot;11&quot;&gt;11&lt;/option&gt;    &lt;option value=&quot;12&quot;&gt;12&lt;/option&gt;    &lt;option value=&quot;1&quot;&gt;13&lt;/option&gt;    &lt;option value=&quot;1&quot;&gt;14&lt;/option&gt;    &lt;option value=&quot;1&quot;&gt;15&lt;/option&gt;    &lt;option value=&quot;1&quot;&gt;16&lt;/option&gt;    &lt;option value=&quot;1&quot;&gt;17&lt;/option&gt;    &lt;option value=&quot;1&quot;&gt;18&lt;/option&gt;    &lt;option value=&quot;1&quot;&gt;19&lt;/option&gt;    &lt;option value=&quot;2&quot;&gt;20&lt;/option&gt;    &lt;option value=&quot;2&quot;&gt;21&lt;/option&gt;    &lt;option value=&quot;2&quot;&gt;22&lt;/option&gt;    &lt;option value=&quot;2&quot;&gt;23&lt;/option&gt;    &lt;option value=&quot;2&quot;&gt;24&lt;/option&gt;    &lt;option value=&quot;2&quot;&gt;25&lt;/option&gt;    &lt;option value=&quot;2&quot;&gt;26&lt;/option&gt;    &lt;option value=&quot;2&quot;&gt;27&lt;/option&gt;    &lt;option value=&quot;2&quot;&gt;28&lt;/option&gt;    &lt;option value=&quot;2&quot;&gt;29&lt;/option&gt;    &lt;option value=&quot;3&quot;&gt;30&lt;/option&gt;    &lt;option value=&quot;3&quot;&gt;31&lt;/option&gt; &lt;/select&gt;日</code></pre><blockquote><p>autofocus属性讲解[焦点属性]<br>    <form method="post"><br>        用户名：<input type="text" name="name"><br>        密码：<input type="password" name="password" autofocus></form></p></blockquote><pre><code>&lt;/form&gt;</code></pre><blockquote><p>  html5form属性讲解<br>    <form><br>        <input type="text" name="text"><br>    </form></p></blockquote><pre><code>&lt;form id=&quot;aForm&quot; action=&quot;#&quot; method=&quot;get&quot;&gt;    job:&lt;input type=&quot;text&quot; name=&quot;job&quot;&gt;    &lt;input type=&quot;submit&quot; value=&quot;搜索&quot;&gt;&lt;/form&gt;job描述:&lt;textarea name=&quot;de&quot; form=&quot;aForm&quot;&gt;&lt;/textarea&gt;&lt;form method=&quot;get&quot; action=&quot;&quot;&gt;    用户名:&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;    密码:&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;    &lt;input type=&quot;submit&quot; value=&quot;修改&quot; formaction=&quot;login.html&quot;&gt;    &lt;input type=&quot;submit&quot; value=&quot;注册&quot; formaction=&quot;regist.html&quot;&gt;&lt;/form&gt;&lt;form method=&quot;get&quot; action=&quot;#&quot;&gt;    用户名:&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;    密码:&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;    &lt;input type=&quot;submit&quot; value=&quot;get提交&quot; formmethod=&quot;get&quot; formtarget=&quot;_blank&quot;&gt;    &lt;input type=&quot;submit&quot; value=&quot;post提交&quot; formmethod=&quot;post&quot; formtarget=&quot;_top&quot;&gt;&lt;/form&gt;</code></pre><blockquote><p>  新增html5input属性讲解<br>    <form method="post"><br>        颜色:<input type="color" name="color"><br><br>        日期:<input type="date" name="date"><br><br>        时间:<input type="time" name="time"><br><br>        日期、时间:<input type="datetime" name="datetime"><br><br>        周:<input type="week" name="datetime"><br><br>        月份:<input type="month"><br><br>        e-mail:<input type="email" name="email"><br><br>        电话:<input type="tel" name="tel"><br><br>        url:<input type="url" name="url"><br><br>        range:<input type="range" name="range" min="0" max="100" step="5" value="80" title><br><br>        search:<input type="search" name="search"><br><br>        <input type="submit" name="提交"><br>    </form></p></blockquote><blockquote><p>  output属性讲解<br>    <form method="post" oninput="x.value=parseInt(a.value)"><br>    0<br>    <input type="range" name="range" id="a" value="50"><br>    100<br>    <output name="x" for="a"></output><br></form></p></blockquote><pre><code>&lt;/form&gt;&lt;form oninput=&quot;y.value=co.value&quot;&gt;    &lt;input type=&quot;color&quot; name=&quot;co&quot; id=&quot;co&quot;&gt;    &lt;output name=&quot;y&quot; for=&quot;co&quot;&gt;&lt;/output&gt;    &lt;input type=&quot;submit&quot; value=&quot;tjiao &quot;&gt;&lt;/form&gt;&amp;lt;p&amp;gt;job老师很帅&amp;lt;/p&amp;gt;&lt;br/&gt;&amp;quot;job&amp;quot;&lt;br/&gt;job&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;老师&lt;br/&gt;&amp;copy;2019.4.8</code></pre><blockquote><p>  placeholder属性讲解<br>    <form method="post"><br>        用户名：<input type="text" name="name" placeholder="亲爱的请输入你的用户名" autocomplete="off"><br>        密码：<input type="password" name="password" placeholder="亲 请输入密码"></form></p></blockquote><pre><code>&lt;/form&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html5 </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php入门第一天.md</title>
      <link href="/2019/04/03/hou-duan/php/ru-men-di-yi-tian/"/>
      <url>/2019/04/03/hou-duan/php/ru-men-di-yi-tian/</url>
      
        <content type="html"><![CDATA[<p>集成化PHP环境安装</p><p>PHPnow<br>WampServer    推荐<br>XAMPP  在Windows、Linux、Solaris三种操作系统下安装使用<br>shopEx<br>APMServ 5.2.6</p><p>以上任选一款就可以了</p><p>环境变量</p><p>D:\wamp\bin\mysql\mysql5.0.51b\bin</p><p>数据库的建立</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML  代码块</title>
      <link href="/2019/04/02/qian-duan/html/html-dai-ma-kuai/"/>
      <url>/2019/04/02/qian-duan/html/html-dai-ma-kuai/</url>
      
        <content type="html"><![CDATA[<pre><code>&lt;marquee behavior=&quot;&quot; direction=&quot;&quot; scrollamount=&quot;20&quot;&gt;    内容&lt;/marquee&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PhotoshopCC2018纯净一键安装版</title>
      <link href="/2019/03/29/ruan-jian-she-ji/ps/ps-an-zhuang-chun-jing-ban/"/>
      <url>/2019/03/29/ruan-jian-she-ji/ps/ps-an-zhuang-chun-jing-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="PhotoshopCC2018纯净一键安装版"><a href="#PhotoshopCC2018纯净一键安装版" class="headerlink" title="PhotoshopCC2018纯净一键安装版"></a>PhotoshopCC2018纯净一键安装版</h1><p><img src="http://www.qqzuanshi.com/uploads/allimg/190111/1547176386505202.png" alt><br>链接：<a href="https://pan.baidu.com/s/1rkjKl9lFrUHeK8sz-5Rl7g" target="_blank" rel="noopener">https://pan.baidu.com/s/1rkjKl9lFrUHeK8sz-5Rl7g</a> 提取码：nli9</p>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计类 </tag>
            
            <tag> ps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结HTML5 Meat的标签</title>
      <link href="/2019/03/29/qian-duan/html5-css3/meta-biao-qian/"/>
      <url>/2019/03/29/qian-duan/html5-css3/meta-biao-qian/</url>
      
        <content type="html"><![CDATA[<p><img src="http://p1.pstatp.com/large/pgc-image/ffcc8494e14b41b8bc9aabbbcad96c1b" alt="meat的标签" title="meat的标签"></p><h2 id="一些常用的移动端的meta属性设置"><a href="#一些常用的移动端的meta属性设置" class="headerlink" title="一些常用的移动端的meta属性设置"></a>一些常用的移动端的meta属性设置</h2><pre class=" language-html"><code class="language-html">    <span class="token doctype">&lt;!DOCTYPE html></span> <span class="token comment" spellcheck="true">&lt;!-- 使用 HTML5 doctype，不区分大小写 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-cmn-Hans<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 更加标准的 lang 属性写法 http://zhi.hu/XyIa --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 声明文档使用的字符编码 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 优先使用 IE 最新版本和 Chrome --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge,chrome<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 页面描述 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>不超过150个字符<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 页面关键词 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 网页作者 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name, email@gmail.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 搜索引擎抓取 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>robots<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index,follow<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 为移动设备添加 viewport --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>3, minimum-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --></span>    iOS 设备 begin     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-mobile-web-app-title<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>标题<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 添加到主屏后的标题（iOS 6 新增） --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-mobile-web-app-capable<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-itunes-app<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app-id<span class="token punctuation">=</span>myAppStoreID, affiliate-data<span class="token punctuation">=</span>myAffiliateData, app-argument<span class="token punctuation">=</span>myURL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-mobile-web-app-status-bar-style<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>black<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 设置苹果工具栏颜色 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>format-detection<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>telphone<span class="token punctuation">=</span>no, email<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --></span>     <span class="token comment" spellcheck="true">&lt;!-- 启用360浏览器的极速模式(webkit) --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>webkit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 避免IE使用兼容模式 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 不让百度转码 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Cache-Control<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no-siteapp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HandheldFriendly<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 微软的老式浏览器 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MobileOptimized<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>320<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- uc强制竖屏 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>screen-orientation<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>portrait<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- QQ强制竖屏 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x5-orientation<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>portrait<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- UC强制全屏 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>full-screen<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- QQ强制全屏 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x5-fullscreen<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- UC应用模式 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>browsermode<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- QQ应用模式 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x5-page-mode<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- windows phone 点击无高光 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msapplication-tap-highlight<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- iOS 图标 begin --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon-precomposed<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/apple-touch-icon-57x57-precomposed.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon-precomposed<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>114x114<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/apple-touch-icon-114x114-precomposed.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon-precomposed<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>144x144<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/apple-touch-icon-144x144-precomposed.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --></span>     <span class="token comment" spellcheck="true">&lt;!-- iOS 图标 end --></span>     <span class="token comment" spellcheck="true">&lt;!-- iOS 启动画面 begin --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>768x1004<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/splash-screen-768x1004.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1536x2008<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/splash-screen-1536x2008.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- iPad 竖屏 1536x2008（Retina） --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1024x748<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/Default-Portrait-1024x748.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- iPad 横屏 1024x748（标准分辨率） --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2048x1496<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/splash-screen-2048x1496.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- iPad 横屏 2048x1496（Retina） --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/splash-screen-320x480.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>640x960<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/splash-screen-640x960.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>640x1136<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/splash-screen-640x1136.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --></span>     <span class="token comment" spellcheck="true">&lt;!-- iOS 启动画面 end --></span>     <span class="token comment" spellcheck="true">&lt;!-- iOS 设备 end --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msapplication-TileColor<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- Windows 8 磁贴颜色 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msapplication-TileImage<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- Windows 8 磁贴图标 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alternate<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application/rss+xml<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RSS<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/rss.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 添加 RSS 订阅 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/ico<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/favicon.ico<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 添加 favicon icon --></span>     <span class="token comment" spellcheck="true">&lt;!-- sns 社交标签 begin --></span>     <span class="token comment" spellcheck="true">&lt;!-- 参考微博API --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>og:type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>类型<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>og:url<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>URL地址<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>og:title<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>标题<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>og:image<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>og:description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>描述<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- sns 社交标签 end --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> html5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css和css3的一些属性方法</title>
      <link href="/2019/03/27/qian-duan/css/css-he-css3-de-yi-xie-shu-xing-fang-fa/"/>
      <url>/2019/03/27/qian-duan/css/css-he-css3-de-yi-xie-shu-xing-fang-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>CSS权重</p></blockquote><p>CSS权重指的是样式的优先级，有两条或多条样式作用于一个元素，权重高的那条样式对元素起作用,权重相同的，后写的样式会覆盖前面写的样式。</p><blockquote><p>权重的等级<br>可以把样式的应用方式分为几个等级，按照等级来计算权重</p></blockquote><p>1、!important，加在样式属性值后，权重值为 10000<br>2、内联样式，如：style=””，权重值为1000<br>3、ID选择器，如：#content，权重值为100<br>4、类，伪类和属性选择器，如： content、:hover 权重值为10<br>5、标签选择器和伪元素选择器，如：div、p、:before 权重值为1<br>6、通用选择器（*）、子选择器（&gt;）、相邻选择器（+）、同胞选择器（~）、权重值为0</p><blockquote><p>清除浮动</p></blockquote><p>父级上增加属性overflow：hidden<br>在最后一个子元素的后面加一个空的div，给它样式属性 clear:both（不推荐）<br>使用成熟的清浮动样式类，clearfix<br>.clearfix:after,.clearfix:before{ content: “”;display: table;}<br>.clearfix:after{ clear:both;}<br>.clearfix{zoom:1;}<br>清除浮动的使用方法：<br>.con2{… overflow:hidden}<br>或者<br>div class=”con2 clearfix”</p><p>1.盒子绝对居中(第一种方法)<br>    position: absolute;<br>    top: 50%;<br>    margin-top:-100px;<br>    left: 50%;<br>    margin-left: -100px;<br>2.盒子绝对居中(第二种方法)<br>    position: absolute;<br>    top: 0;bottom: 0;left:0 ;right:0 ;<br>    margin: auto;<br>3.盒子绝对居中(第三种方法)<br>    html,body{height: 100%;}<br>    body{display: flex;}或者flex改为grid。<br>    __{ width: 200px; height: 200px;margin: auto;}</p><p>4.定位布局<br>html,body{width:100% ;height:100%;position: relative;display:flex;justify-content:center;align-items:center;overflow:hidden;}</p><pre><code> display: flex;    justify-content:space-around;/*左右均分*/    align-items:center;/*上下均分*/</code></pre><p>/<em>css3动画名称 时间   速度【匀速：linear】  循环【持续：infinite】</em>/<br>    animation:move 8s linear infinite;<br>    -webkit-animation:move 3s linear infinite;<br>    @keyframes move{<br>            0%{ left: 200px;}<br>            100%{left: -200px;}<br>    }<br>    @keyframes fun{<br>        0%{transform:rotate(0deg);}<br>        25%{transform:rotate(90deg);}<br>        50%{transform:rotate(180deg);}<br>        75%{transform:rotate(270deg);}<br>        100%{transform:rotate(360deg);}<br>    }</p><p>同级元素选择<br>.love:nth-child(2){}<br>.love:nth-of-type(2){}</p><p>/<em>线性渐变</em>/<br>-webkit-linear-gradient(#ffff00  10%,#00ffff  40%,#ff00ff 10%);</p><p>3D空间<br>ransform-style:preserve-3d;</p><p>//随机颜色 至少有七种写法<br>    function randomColor(){<br>        var r=Math.floor(Math.random()<em>255);<br>        var g=Math.floor(Math.random()</em>255);<br>        var b=Math.floor(Math.random()*255);<br>        return “rgb(“+r+”,”+g+”,”+b+”)”;<br>    }</p><p> CSS border-collapse 属性 ：<a href="http://www.w3school.com.cn/cssref/pr_tab_border-collapse.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/cssref/pr_tab_border-collapse.asp</a></p><p> CSS vertical-align 属性 ：<a href="http://www.w3school.com.cn/cssref/pr_pos_vertical-align.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/cssref/pr_pos_vertical-align.asp</a></p><p>CSS letter-spacing 属性 ：字间距（in cm  mm px  em pt） <a href="http://www.w3school.com.cn/cssref/pr_text_letter-spacing.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/cssref/pr_text_letter-spacing.asp</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3新增选择器</title>
      <link href="/2019/03/27/qian-duan/css/css3-xin-zeng-xuan-ze-qi/"/>
      <url>/2019/03/27/qian-duan/css/css3-xin-zeng-xuan-ze-qi/</url>
      
        <content type="html"><![CDATA[<section class="normal" id="section-"><br><br>                        <h2 id="css3新增选择器">CSS3新增选择器</h2><br><p>1、E:nth-child(n)：匹配元素类型为E且是父元素的第n个子元素  </p><br><pre><code>&lt;style type=”text/css”&gt;<br>    .list div:nth-child(2){<br>        background-color:red;<br>    }<br>&lt;/style&gt;<br>……<br>&lt;div class=”list”&gt;<br>    &lt;h2&gt;1&lt;/h2&gt;<br>    &lt;div&gt;2&lt;/div&gt;<br>    &lt;div&gt;3&lt;/div&gt;<br>    &lt;div&gt;4&lt;/div&gt;<br>    &lt;div&gt;5&lt;/div&gt;<br>&lt;/div&gt;<br><br>&lt;!– 第2个子元素div匹配 –&gt;<br></code></pre><p>2、E:nth-last-child(n)：匹配元素类型为E且是父元素的倒数第n个子元素（与上一项顺序相反）<br>3、E:first-child：匹配元素类型为E且是父元素的第一个子元素<br>4、E:last-child：匹配元素类型为E且是父元素的最后一个子元素<br>5、E:only-child：匹配元素类型为E且是父元素中唯一的子元素<br>6、E:nth-of-type(n)：匹配父元素的第n个类型为E的子元素<br>7、E:nth-last-of-type(n)：匹配父元素的倒数第n个类型为E的子元素（与上一项顺序相反）<br>8、E:first-of-type：匹配父元素的第一个类型为E的子元素<br>9、E:last-of-type：匹配父元素的最后一个类型为E的子元素<br>10、E:only-of-type：匹配父元素中唯一子元素是E的子元素<br>11、E:empty 选择一个空的元素<br>12、E:enabled 可用的表单控件<br>13、E:disabled  失效的表单控件<br>14、E:checked   选中的checkbox<br>15、E:not(s)  不包含某元素  </p><br><pre><code>&lt;style type=”text/css”&gt;<br>    .list div:not(:nth-child(2)){<br>        background-color:red;<br>    }<br>&lt;/style&gt;<br>……<br>&lt;div class=”list”&gt;<br>    &lt;h2&gt;1&lt;/h2&gt;<br>    &lt;div&gt;2&lt;/div&gt;<br>    &lt;div&gt;3&lt;/div&gt;<br>    &lt;div&gt;4&lt;/div&gt;<br>    &lt;div&gt;5&lt;/div&gt;<br>&lt;/div&gt;<br><br>&lt;!– 第 3、4、5 子元素div匹配 –&gt;<br></code></pre><p>16、E:target 对应锚点的样式  </p><br><pre><code>&lt;style type=”text/css”&gt;<br>    h2:target{<br>        color:red;<br>    }<br>&lt;/style&gt;<br>……<br>&lt;a href=”#tit01”&gt;标题一&lt;/a&gt;<br>……<br>&lt;h2 id=”tit01”&gt;标题一&lt;/h2&gt;<br><br>&lt;!– 点击链接，h2标题变红 –&gt;<br></code></pre><p>17、E &gt; F   E元素下面第一层子集<br>18、E ~ F   E元素后面的兄弟元素<br>19、E + F  紧挨着的兄弟元素  </p><br><p>属性选择器：<br>1、E[data-attr]          含有data-attr属性的元素  </p><br><pre><code>&lt;style type=”text/css”&gt;<br>    div[data-attr=’ok’]{<br>        color:red;<br>    }<br>&lt;/style&gt;<br>……<br>&lt;div data-attr=”ok”&gt;这是一个div元素&lt;/div&gt;<br><br>&lt;!– 点击链接，h2标题变红 –&gt;<br></code></pre><p>2、E[data-attr=’ok’]     含有data-attr属性的元素且它的值为“ok”<br>3、E[data-attr^=’ok’]    含有data-attr属性的元素且它的值的开头含有“ok”<br>4、E[data-attr$=’ok’]    含有data-attr属性的元素且它的值的结尾含有“ok”<br>5、E[data-attr*=’ok’]    含有data-attr属性的元素且它的值中含有“ok”  </p><br><br><br>                    </section>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ps注册表清除</title>
      <link href="/2019/03/25/ruan-jian-she-ji/ps/p-zhu-ce-biao-qing-chu/"/>
      <url>/2019/03/25/ruan-jian-she-ji/ps/p-zhu-ce-biao-qing-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="ps注册表清除两种方法"><a href="#ps注册表清除两种方法" class="headerlink" title="ps注册表清除两种方法"></a>ps注册表清除两种方法</h1><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><hr><p>1.运行 regedit 打开注册表编辑器。<br>2.依次展开HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager目录，找到其中的 PendingFileRenameOperations 项目，直接右键，选择“删除”即可。<br>3.删除C:\Program Files\Common Files\Adobe目录即可</p><p>4.清除成功后，别忘记了重启下电脑，这步是不可或缺的哦！</p><pre><code>实在不行看我这里</code></pre><h1 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h1><hr><p>下载软件Adobe_Creative_Cloud_Cleaner_Tool并解压，找到文件夹中的如图安装包，点击进行安装。</p><blockquote><p>Adobe官方卸载工具：</p></blockquote><blockquote><p>下载地址：<a href="http://www.yishimei.cn/download/AdobeCreativeCloudCleanerTool.exe" target="_blank" rel="noopener">http://www.yishimei.cn/download/AdobeCreativeCloudCleanerTool.exe</a></p></blockquote><p>1.打开后我们可以看到类似于命令提示符的操作界面，我们输入“e”选择英文界面。</p><p>2.按下回车键后，回复“y”确认同意以上消息。</p><p>3.在弹出的界面中显示出已经安装的相应版本信息，回复相应数字选中相应版本。</p><p>4.这里我选择1,如果安装了其他的adobe软件最好注意下,回车后,显示1.clean all,回复1确认清空所有消息。</p><p>5.系统显示确认信息，回复 y 确认删除，稍等片刻即可清除注册表信息。</p><p>6.清除成功后，别忘记了重启下电脑，这步是不可或缺的！</p>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计类 </tag>
            
            <tag> ps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 速查列表</title>
      <link href="/2019/03/21/qian-duan/html/html-lie-biao/"/>
      <url>/2019/03/21/qian-duan/html/html-lie-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-速查列表"><a href="#HTML-速查列表" class="headerlink" title="HTML 速查列表"></a>HTML 速查列表</h1><p><a href="https://www.lanzous.com/i3lo13c" target="_blank" rel="noopener">https://www.lanzous.com/i3lo13c</a><br>密码:990126</p><h2 id="HTML-基本文档"><a href="#HTML-基本文档" class="headerlink" title="HTML 基本文档"></a>HTML 基本文档</h2><pre><code>  &lt;!DOCTYPE html&gt;  &lt;html&gt;  &lt;head&gt;  &lt;title&gt;文档标题&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  可见文本...  &lt;/body&gt;  &lt;/html&gt;</code></pre><h2 id="基本标签（Basic-Tags）"><a href="#基本标签（Basic-Tags）" class="headerlink" title="基本标签（Basic Tags）"></a>基本标签（Basic Tags）</h2><pre><code>  &lt;h1&gt;最大的标题&lt;/h1&gt;  &lt;h2&gt; . . . &lt;/h2&gt;  &lt;h3&gt; . . . &lt;/h3&gt;  &lt;h4&gt; . . . &lt;/h4&gt;  &lt;h5&gt; . . . &lt;/h5&gt;  &lt;h6&gt;最小的标题&lt;/h6&gt;  &lt;p&gt;这是一个段落。&lt;/p&gt;  &lt;br&gt; （换行）  &lt;hr&gt; （水平线）  &lt;!-- 这是注释 --&gt;</code></pre><h2 id="文本格式化（Formatting）"><a href="#文本格式化（Formatting）" class="headerlink" title="文本格式化（Formatting）"></a>文本格式化（Formatting）</h2><pre><code>  &lt;b&gt;粗体文本&lt;/b&gt;  &lt;code&gt;计算机代码&lt;/code&gt;  &lt;em&gt;强调文本&lt;/em&gt;  &lt;i&gt;斜体文本&lt;/i&gt;  &lt;kbd&gt;键盘输入&lt;/kbd&gt;  &lt;pre&gt;预格式化文本&lt;/pre&gt;  &lt;small&gt;更小的文本&lt;/small&gt;  &lt;strong&gt;重要的文本&lt;/strong&gt;  &lt;abbr&gt; （缩写）  &lt;address&gt; （联系信息）  &lt;bdo&gt; （文字方向）  &lt;blockquote&gt; （从另一个源引用的部分）  &lt;cite&gt; （工作的名称）  &lt;del&gt; （删除的文本）  &lt;ins&gt; （插入的文本）  &lt;sub&gt; （下标文本）  &lt;sup&gt; （上标文本）</code></pre><h2 id="链接（Links）"><a href="#链接（Links）" class="headerlink" title="链接（Links）"></a>链接（Links）</h2><pre><code>  普通的链接：&lt;a href=&quot;http://www.example.com/&quot;&gt;链接文本&lt;/a&gt;  图像链接： &lt;a href=&quot;http://www.example.com/&quot;&gt;&lt;img src=&quot;URL&quot; alt=&quot;替换文本&quot;&gt;&lt;/a&gt;  邮件链接： &lt;a href=&quot;mailto:webmaster@example.com&quot;&gt;发送e-mail&lt;/a&gt;</code></pre><h2 id="书签："><a href="#书签：" class="headerlink" title="书签："></a>书签：</h2><pre><code>  &lt;a id=&quot;tips&quot;&gt;提示部分&lt;/a&gt;  &lt;a href=&quot;#tips&quot;&gt;跳到提示部分&lt;/a&gt;</code></pre><h2 id="图片（Images）"><a href="#图片（Images）" class="headerlink" title="图片（Images）"></a>图片（Images）</h2><pre><code>  &lt;img src=&quot;URL&quot; alt=&quot;替换文本&quot; height=&quot;42&quot; width=&quot;42&quot;&gt;</code></pre><h2 id="样式-区块（Styles-Sections）"><a href="#样式-区块（Styles-Sections）" class="headerlink" title="样式/区块（Styles/Sections）"></a>样式/区块（Styles/Sections）</h2><pre><code>  &lt;style type=&quot;text/css&quot;&gt;  h1 {color:red;}  p {color:blue;}  &lt;/style&gt;  &lt;div&gt;文档中的块级元素&lt;/div&gt;  &lt;span&gt;文档中的内联元素&lt;/span&gt;</code></pre><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><pre><code>  &lt;ul&gt;      &lt;li&gt;项目&lt;/li&gt;      &lt;li&gt;项目&lt;/li&gt;  &lt;/ul&gt;</code></pre><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><pre><code>  &lt;ol&gt;      &lt;li&gt;第一项&lt;/li&gt;      &lt;li&gt;第二项&lt;/li&gt;  &lt;/ol&gt;</code></pre><h2 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h2><pre><code>  &lt;dl&gt;    &lt;dt&gt;项目 1&lt;/dt&gt;      &lt;dd&gt;描述项目 1&lt;/dd&gt;    &lt;dt&gt;项目 2&lt;/dt&gt;      &lt;dd&gt;描述项目 2&lt;/dd&gt;  &lt;/dl&gt;</code></pre><h2 id="表格（Tables）"><a href="#表格（Tables）" class="headerlink" title="表格（Tables）"></a>表格（Tables）</h2><pre><code>  &lt;table border=&quot;1&quot;&gt;    &lt;tr&gt;      &lt;th&gt;表格标题&lt;/th&gt;      &lt;th&gt;表格标题&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;表格数据&lt;/td&gt;      &lt;td&gt;表格数据&lt;/td&gt;    &lt;/tr&gt;  &lt;/table&gt;</code></pre><h2 id="框架（Iframe）"><a href="#框架（Iframe）" class="headerlink" title="框架（Iframe）"></a>框架（Iframe）</h2><pre><code>  &lt;iframe src=&quot;demo_iframe.htm&quot;&gt;&lt;/iframe&gt;</code></pre><h2 id="表单（Forms）"><a href="#表单（Forms）" class="headerlink" title="表单（Forms）"></a>表单（Forms）</h2><pre><code>  &lt;form action=&quot;demo_form.php&quot; method=&quot;post/get&quot;&gt;    &lt;input type=&quot;text&quot; name=&quot;email&quot; size=&quot;40&quot; maxlength=&quot;50&quot;&gt;    &lt;input type=&quot;password&quot;&gt;    &lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;&gt;    &lt;input type=&quot;radio&quot; checked=&quot;checked&quot;&gt;    &lt;input type=&quot;submit&quot; value=&quot;Send&quot;&gt;    &lt;input type=&quot;reset&quot;&gt;    &lt;input type=&quot;hidden&quot;&gt;  &lt;select&gt;    &lt;option&gt;苹果&lt;/option&gt;    &lt;option selected=&quot;selected&quot;&gt;香蕉&lt;/option&gt;    &lt;option&gt;樱桃&lt;/option&gt;  &lt;/select&gt;  &lt;textarea name=&quot;comment&quot; rows=&quot;60&quot; cols=&quot;20&quot;&gt;&lt;/textarea&gt;  &lt;/form&gt;</code></pre><h2 id="实体（Entities）"><a href="#实体（Entities）" class="headerlink" title="实体（Entities）"></a>实体（Entities）</h2><pre><code>  &amp;lt; 等同于 &lt;  &amp;gt; 等同于 &gt;  &amp;#169; 等同于 ©</code></pre>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML  标准</title>
      <link href="/2019/03/21/qian-duan/html/html/"/>
      <url>/2019/03/21/qian-duan/html/html/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-元素属性"><a href="#HTML-元素属性" class="headerlink" title="HTML 元素属性"></a>HTML 元素属性</h1><pre><code>  &lt;!DOCTYPE html&gt;| 声明为 HTML5 文档  &lt;html&gt;| 元素是 HTML 页面的根元素  &lt;head&gt;| 元素包含了文档的元（meta）数据，定义网页编码格式为 utf-8。  &lt;title&gt;| 元素描述了文档的标题  &lt;body&gt;| 元素包含了可见的页面内容  &lt;h1&gt;| 元素定义一个大标题  &lt;p&gt;| 元素定义一个段落  &lt;html&gt;|  定义 HTML 文档  &lt;body&gt;|  定义文档的主体  &lt;base&gt; | 定义了页面链接标签的默认链接地址  &lt;link&gt; | 定义了一个文档和外部资源之间的关系  &lt;meta&gt; | 定义了HTML文档中的元数据  &lt;script&gt; |   定义了客户端的脚本文件  &lt;style&gt; |定义了HTML文档的样式文件  &lt;h1&gt; ~ &lt;h6&gt;| 定义 HTML 标题  &lt;hr&gt;|    定义水平线  &lt;a&gt;|链接  &lt;div&gt; |  定义了文档的区域，块级 (block-level)  &lt;span&gt; | 用来组合文档中的行内元素， 内联元素(inline)  class |  为html元素定义一个或多个类名（classname）(类名从样式文件引入)  id  |定义元素的唯一id  style |  规定元素的行内样式（inline style）  title  | 描述了元素的额外信息 (作为工具条使用)  &lt;!--...--&gt;|  定义注释</code></pre><h2 id="HTML-文本格式化"><a href="#HTML-文本格式化" class="headerlink" title="HTML 文本格式化"></a>HTML 文本格式化</h2><pre><code>  &lt;b&gt; |定义粗体文本  &lt;em&gt; |   定义着重文字  &lt;i&gt; |定义斜体字  &lt;small&gt; |定义小号字  &lt;strong&gt; |   定义加重语气  &lt;sub&gt; |  定义下标字  &lt;sup&gt; |  定义上标字  &lt;ins&gt; |  定义插入字  &lt;del&gt; |  定义删除字</code></pre><h2 id="HTML-“计算机输出”-标签"><a href="#HTML-“计算机输出”-标签" class="headerlink" title="HTML “计算机输出” 标签"></a>HTML “计算机输出” 标签</h2><pre><code>  &lt;code&gt; | 定义计算机代码  &lt;kbd&gt; |  定义键盘码  &lt;samp&gt; | 定义计算机代码样本  &lt;var&gt; |  定义变量  &lt;pre&gt; |  定义预格式文本</code></pre><h2 id="HTML-引文-引用-及标签定义"><a href="#HTML-引文-引用-及标签定义" class="headerlink" title="HTML 引文, 引用, 及标签定义"></a>HTML 引文, 引用, 及标签定义</h2><pre><code>  &lt;abbr&gt; | 定义缩写  &lt;address&gt; |  定义地址  &lt;bdo&gt; |  定义文字方向  &lt;blockquote&gt; |   定义长的引用  &lt;q&gt; |定义短的引用语  &lt;cite&gt; | 定义引用、引证  &lt;dfn&gt; |  定义一个定义项目。</code></pre><h2 id="HTMLbase元素"><a href="#HTMLbase元素" class="headerlink" title="HTMLbase元素"></a>HTMLbase元素</h2><p>base标签描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接标签的默认链接:</p><pre><code>  &lt;head&gt;  &lt;base href=&quot;  &quot; target=&quot;_blank&quot;&gt;  &lt;/head&gt;</code></pre><h2 id="HTMLlink元素"><a href="#HTMLlink元素" class="headerlink" title="HTMLlink元素"></a>HTMLlink元素</h2><p> 标签定义了文档与外部资源之间的关系。<br> 标签通常用于链接到样式表:</p><pre><code>```&lt;head&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;&lt;/head&gt;```</code></pre><h2 id="HTML-style元素"><a href="#HTML-style元素" class="headerlink" title="HTML style元素"></a>HTML style元素</h2><p>标签定义了HTML文档的样式文件引用地址.<br>元素中你也可以直接添加样式来渲染 HTML 文档:</p><pre><code>```&lt;head&gt;&lt;style type=&quot;text/css&quot;&gt;  body {background-color:yellow}  p {color:blue}&lt;/style&gt;&lt;/head&gt;```</code></pre><h2 id="HTML-meta元素"><a href="#HTML-meta元素" class="headerlink" title="HTML meta元素"></a>HTML meta元素</h2><p>meta标签描述了一些基本的元数据。<br>标签提供了元数据.元数据也不显示在页面上，但会被浏览器解析。<br>META 元素通常用于指定网页的描述，关键词，文件的最后修改时间，作者，和其他元数据。<br>元数据可以使用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他Web服务。</p><pre><code>meta标签- 使用实例---</code></pre><p>  为搜索引擎定义关键词:<br>  <meta name="keywords" content="HTML, CSS, XML, XHTML, JavaScript"></p><p>  为网页定义描述内容:<br>  <meta name="description" content="免费 Web & 编程 教程"></p><p>  定义网页作者:<br>  <meta name="author" content="Runoob"></p><p>  每30秒钟刷新当前页面:<br>  <meta http-equiv="refresh" content="30"></p><p>  HTML <script> 元素<br>  <script>标签用于加载脚本文件，如： JavaScript。<br>  <script> 元素在以后的章节中会详细描述。</p><pre><code>HTML 图像- 设置图像的高度与宽度---height（高度） 与 width（宽度）属性用于设置图像的高度与宽度。属性值默认单位为像素:</code></pre><p>  <img src="pulpit.jpg" alt="Pulpit rock" width="304" height="228"><br>  <img>   定义图像<br>  <map>   定义图像地图<br>  <area>  定义图像地图中的可点击区域</p><p>  示例”创建图像映射”中的代码：<br>  <map name="planetmap"><br>    <area shape="rect" coords="0,0,82,126" alt="Sun" href="sun.htm"><br>    <area shape="circle" coords="90,58,3" alt="Mercury" href="mercur.htm"><br>    <area shape="circle" coords="124,58,8" alt="Venus" href="venus.htm"><br>  </map></p><p>  1、矩形：(左上角顶点坐标为(x1,y1)，右下角顶点坐标为(x2,y2))<br>  <area shape="rect" coords="x1,y1,x2,y2" href=url></p><p>  2、圆形：(圆心坐标为(X1,y1)，半径为r)<br>  <area shape="circle" coords="x1,y1,r" href=url></p><p>  3、多边形：(各顶点坐标依次为(x1,y1)、(x2,y2)、(x3,y3) ……)<br>  <area shape="poly" coords="x1,y1,x2,y2 ......" href=url></p><pre><code>HTML 表格----表格由 table 标签来定义。每个表格均有若干行（由 tr 标签定义），每行被分割为若干单元格（由 &lt;td&gt; 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。表格实例---  &lt;table border=&quot;1&quot;&gt;      &lt;tr&gt;          &lt;th colspan=&quot;2&quot;&gt;Telephone&lt;/th&gt;          &lt;td&gt;row 1, cell 1&lt;/td&gt;          &lt;td&gt;row 1, cell 2&lt;/td&gt;          &lt;td&gt;row 1, cell 2&lt;/td&gt;      &lt;/tr&gt;      &lt;tr&gt;          &lt;td&gt;row 2, cell 1&lt;/td&gt;          &lt;td&gt;row 2, cell 2&lt;/td&gt;          &lt;th rowspan=&quot;2&quot;&gt;Telephone:&lt;/th&gt;      &lt;/tr&gt;  &lt;/table&gt;HTML 表格标签---</code></pre><p>  <table> 定义表格<br>  <th>    定义表格的表头<br>  <tr>    定义表格的行<br>  <td>    定义表格单元<br>  <caption>   定义表格标题<br>  <colgroup>  定义表格列的组<br>  <col>   定义用于表格列的属性<br>  <thead> 定义表格的页眉<br>  <tbody> 定义表格的主体<br>  <tfoot> 定义表格的页脚<br>  <a href="https://c.runoob.com/codedemo/3187">https://c.runoob.com/codedemo/3187</a></p><p>  HTML 列表标签<br>  标签  描述<br>  <ol>    定义有序列表<br>  <ul>    定义无序列表<br>  <li>    定义列表项<br>  <dl>    定义列表<br>  <dt>    自定义列表项目<br>  <dd>    定义自定列表项的描述</p><pre><code>HTML 表单 - 输入元素---多数情况下被用到的表单标签是输入标签（&lt;input&gt;）。输入类型是由类型属性（type）定义的。大多数经常被用到的输入类型如下：</code></pre><p>  文本域（Text Fields）<br>  文本域通过<input type="text"> 标签来设定，当用户要在表单中键入字母、数字等内容时，就会用到文本域。<br>  <form><br>  First name: <input type="text" name="firstname"><br><br>  Last name: <input type="text" name="lastname"><br>  </form></p><h2 id="密码字段"><a href="#密码字段" class="headerlink" title="  密码字段-"></a>  密码字段-</h2><p>  密码字段通过标签<input type="password"> 来定义:</p>  <form><br>  Password: <input type="password" name="pwd"><br>  </form><h2 id="单选按钮（Radio-Buttons）"><a href="#单选按钮（Radio-Buttons）" class="headerlink" title="  单选按钮（Radio Buttons）"></a>  单选按钮（Radio Buttons）</h2><p>  <input type="radio"> 标签定义了表单单选框选项<br>  <form><br>  <input type="radio" name="sex" value="male">Male<br><br>  <input type="radio" name="sex" value="female">Female<br>  </form></p><h2 id="复选框（Checkboxes）"><a href="#复选框（Checkboxes）" class="headerlink" title="  复选框（Checkboxes）"></a>  复选框（Checkboxes）</h2><p>  <input type="checkbox"> 定义了复选框. 用户需要从若干给定的选择中选取一个或若干选项。<br>  <form><br>  <input type="checkbox" name="vehicle" value="Bike">I have a bike<br><br>  <input type="checkbox" name="vehicle" value="Car">I have a car<br>  </form></p><h2 id="提交按钮-Submit-Button"><a href="#提交按钮-Submit-Button" class="headerlink" title="  提交按钮(Submit Button)"></a>  提交按钮(Submit Button)</h2><p>  <input type="submit"> 定义了提交按钮.</p><p>  当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收到的输入数据进行相关的处理。:</p>  <form name="input" action="html_form_action.php" method="get"><br>  Username: <input type="text" name="user"><br>  <input type="submit" value="Submit"><br>  </form><p>  <form action=""><br>      <select name="cars"><br>          <option value="volvo">Volvo</option><br>          <option value="saab">Saab</option><br>          <option value="fiat">Fiat</option><br>          <option value="audi">Audi</option><br>      </select><br>  </form><br>  <textarea rows="10" cols="30"><br>  我是一个文本框。<br>  </textarea><br>  <form action=""><br>  <fieldset><br>  <legend>Personal information:</legend><br>  Name: <input type="text" size="30"><br><br>  E-mail: <input type="text" size="30"><br><br>  Date of birth: <input type="text" size="10"><br>  </fieldset><br>  </form><br>  <code>`</code></p><h2 id="HTML-表单标签"><a href="#HTML-表单标签" class="headerlink" title="HTML 表单标签"></a>HTML 表单标签</h2><p>  <form>  定义供用户输入的表单<br>  <input> 定义输入域<br>  <textarea>  定义文本域 (一个多行的输入控件)<br>  <label> 定义了 <input> 元素的标签，一般为输入标题<br>  <fieldset>  定义了一组相关的表单元素，并使用外框包含起来<br>  <legend>    定义了 <fieldset> 元素的标题<br>  <select>    定义了下拉选项列表<br>  <optgroup>  定义选项组<br>  <option>    定义下拉列表中的选项<br>  <button>    定义一个点击按钮<br>  <datalist>   指定一个预先定义的输入控件选项列表<br>  <keygen> 定义了表单的密钥对生成器字段<br>  <output> 定义一个计算结果</p><h2 id="HTML-框架"><a href="#HTML-框架" class="headerlink" title="HTML 框架"></a>HTML 框架</h2><p>Iframe - 设置高度与宽度<br>height 和 width 属性用来定义iframe标签的高度与宽度。</p><p>属性默认以像素为单位, 但是你可以指定其按比例显示 (如：”80%”)。</p><p>实例</p>  <iframe src="demo_iframe.htm" width="200" height="200"></iframe><p>尝试一下 »</p><p>Iframe - 移除边框<br>frameborder 属性用于定义iframe表示是否显示边框。</p><p>设置属性值为 “0” 移除iframe的边框:</p><p>实例</p>  <iframe src="demo_iframe.htm" frameborder="0"></iframe><p>使用iframe来显示目标链接页面<br>iframe可以显示一个目标链接的页面</p><p>目标链接的属性必须使用iframe的属性，如下实例:</p><p>实例</p><p>  <iframe src="demo_iframe.htm" name="iframe_a"></iframe><br>  <p><a href="http://www.runoob.com" target="iframe_a">RUNOOB.COM</a></p></p></script></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Theme-Matery &lt;Span Style=&#39;color:yellow;font-Weight:bold;&#39;&gt;[加密]&lt;/span&gt;</title>
      <link href="/2019/03/20/da-jian/readme/"/>
      <url>/2019/03/20/da-jian/readme/</url>
      
        <content type="html"><![CDATA[<p><a href="README.md">English Document</a> | <a href="https://blinkfox.github.io/" target="_blank" rel="noopener">演示示例</a> |</p><blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li></ul><blockquote><p>音乐播放器插件 <a href="http://www.tuyiyi.com/h1.html" target="_blank" rel="noopener">http://www.tuyiyi.com/h1.html</a></p></blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>当你看到这里的时候，应该已经有一个自己的 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown</a> 来写博客和文章。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master" target="_blank" rel="noopener">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span></code></pre><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://pic.netbian.com//uploads/allimg/170819/133427-150312086766a0.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"潭州课堂"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"和我一起玩耍"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"一起去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://pic.netbian.com//uploads/allimg/170819/133427-150312086766a0.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"腾讯课堂"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"和我一起玩耍"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"一起去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://pic.netbian.com//uploads/allimg/170819/133427-150312086766a0.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"慕课网"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"和我一起玩耍不"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"一起去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://pic.netbian.com//uploads/allimg/170819/133427-150312086766a0.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"拓新教育"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"和我一起玩耍不"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"一起去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  <span class="token key atrule">custom_css</span><span class="token punctuation">:</span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h3 id="中文链接转拼音（可选的）"><a href="#中文链接转拼音（可选的）" class="headerlink" title="中文链接转拼音（可选的）"></a>中文链接转拼音（可选的）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（可选的）"><a href="#文章字数统计插件（可选的）" class="headerlink" title="文章字数统计插件（可选的）"></a>文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 将这个值设置为 true 即可.</span>  <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://github.com/blinkfox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fa-facebook</code></li><li>Twitter: <code>fa-twitter</code></li><li>Google-plus: <code>fa-google-plus</code></li><li>Linkedin: <code>fa-linkedin</code></li><li>Tumblr: <code>fa-tumblr</code></li><li>Medium: <code>fa-medium</code></li><li>Slack: <code>fa-slack</code></li><li>新浪微博: <code>fa-weibo</code></li><li>微信: <code>fa-wechat</code></li><li>QQ: <code>fa-qq</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>4.7.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"五月雨变奏电音"</span><span class="token punctuation">,</span>  <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"AnimeVibe"</span><span class="token punctuation">,</span>  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music1.mp3"</span><span class="token punctuation">,</span>  <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover1.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Take me hand"</span><span class="token punctuation">,</span>  <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"DAISHI DANCE,Cecile Corbel"</span><span class="token punctuation">,</span>  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/medias/music/music2.mp3"</span><span class="token punctuation">,</span>  <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"/medias/music/cover2.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Shape of You"</span><span class="token punctuation">,</span>  <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"J.Fla"</span><span class="token punctuation">,</span>  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music3.mp3"</span><span class="token punctuation">,</span>  <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover3.png"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><blockquote><p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p></blockquote><p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 是否在首页显示音乐.</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">showTitle</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span> <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'list'</span> <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span> <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7 </span><span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 列表默认折叠</span>  <span class="token key atrule">listMaxHeight</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 列表最大高度</span></code></pre><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 `</p><p><script></script><br>` 代码中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本记录"><a href="#版本记录" class="headerlink" title="版本记录"></a>版本记录</h2><ul><li>v1.0.3<ul><li>新增了<code>TOC</code>展开、收缩的按钮和相关配置，默认显示此按钮；</li></ul></li><li>v1.0.2<ul><li>升级了 <a href="https://materializecss.com/" target="_blank" rel="noopener">Materialize</a> 框架版本为<code>1.0.0</code>，重构和修改了升级过程中的部分文件或问题；</li><li>新增了首页封面的全屏轮播特效，可以将更重要的文章设置到首页轮播中；</li><li>修复首页第一个按钮是中文的问题</li><li>修复了 iPhone 上点击搜索输入获取焦点的问题；</li><li>修复了 iPhone 上输入框获取焦点后页面放大的问题；</li><li>修复一些文章或 UI 显示问题；</li></ul></li><li>v1.0.1<ul><li>调整 <code>css</code>、<code>js</code> 的文件请求路径在主题的<code>_config.yml</code>中配置，便于你更快捷的配置自己的 CDN；</li><li>新增代码是否折行为可配置，默认为折行；</li><li>默认激活 <code>TOC</code> 功能，并新增为某篇文章关闭 <code>TOC</code> 的 <code>Front-matter</code> 配置选项；</li><li>修复文章滚动时，高亮的目录选项不准确的问题；</li><li><code>IOS</code>下移除搜索框自动获得焦点属性，防止自动获得焦点后导致视图上移；</li></ul></li><li>v1.0.0<ul><li>新增了所有基础功能；</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ps快捷键</title>
      <link href="/2019/03/16/ruan-jian-she-ji/ps/ps-kuai-jie-jian/"/>
      <url>/2019/03/16/ruan-jian-she-ji/ps/ps-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h4 id="推荐个在线编辑图片的photopea-功能和ps差不多-不用在电脑安装ps-在线就可以编辑图片-记得注册下哦！"><a href="#推荐个在线编辑图片的photopea-功能和ps差不多-不用在电脑安装ps-在线就可以编辑图片-记得注册下哦！" class="headerlink" title="推荐个在线编辑图片的photopea 功能和ps差不多 不用在电脑安装ps 在线就可以编辑图片 记得注册下哦！"></a>推荐个在线编辑图片的photopea 功能和ps差不多 不用在电脑安装ps 在线就可以编辑图片 记得<code>注册</code>下哦！</h4><p>链接：<a href="https://www.photopea.com/" target="_blank" rel="noopener">https://www.photopea.com/</a></p><blockquote><p><strong> <code>注意</code> </strong>:进去的时候加载有些慢哈！&amp;_&amp;<br>好的话麻烦在文章最后评论,嘻嘻嘻</p></blockquote><blockquote><p><a href="https://wulangwang.xyz/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/我的个人博客地址-https://wulangwang.xyz/-green.svg?colorA=888&amp;colorB=52A1F8&amp;longCache=true&amp;style=popout-square" alt></a><br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1552743570395&amp;di=074055ea6788c926bd60e07abf254650&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.zcool.cn%2Fcommunity%2F0128b75b00fab1a801209a853f6f19.jpg%401280w_1l_2o_100sh.jpg" alt title="ps快捷键"></p></blockquote><h3 id="1、工具箱"><a href="#1、工具箱" class="headerlink" title="1、工具箱"></a>1、工具箱</h3><p>(多种工具共用一个快捷键的可同时按【Shift】加此快捷键选取)<br>矩形、椭圆选框工具 【M】<br>裁剪工具 【C】<br>移动工具 【V】<br>套索、多边形套索、磁性套索 【L】<br>魔棒工具 【W】<br>喷枪工具 【J】<br>画笔工具 【B】<br>橡皮图章、图案图章 【S】<br>历史记录画笔工具 【Y】<br>橡皮擦工具 【E】<br>铅笔、直线工具 【N】<br>模糊、锐化、涂抹工具 【R】<br>减淡、加深、海棉工具 【O】<br>钢笔、自由钢笔、磁性钢笔 【P】<br>添加锚点工具 【+】<br>删除锚点工具 【-】<br>直接选取工具 【A】<br>文字、文字蒙板、直排文字、直排文字蒙板 【T】<br>度量工具 【U】<br>直线渐变、径向渐变、对称渐变、角度渐变、菱形渐变【G】<br>油漆桶工具【G】<br>吸管、颜色取样器 【I】<br>抓手工具 【H】<br>缩放工具 【Z】<br>默认前景色和背景色 【D】<br>切换前景色和背景色 【X】<br>切换标准模式和快速蒙板模式 【Q】<br>标准屏幕模式、带有菜单栏的全屏模式、全屏模式 【F】<br>临时使用移动工具 【Ctrl】<br>临时使用吸色工具 【Alt】<br>临时使用抓手工具 【空格】<br>打开工具选项面板 【Enter】<br>快速输入工具选项(当前工具选项面板中至少有一个可调节数字) 【0】至【9】<br>循环选择画笔 【[】或【]】<br>选择第一个画笔 【Shift】+【[】<br>选择最后一个画笔 【Shift】+【]】<br>建立新渐变(在”渐变编辑器”中) 【Ctrl】+【N】</p><h3 id="2、文件操作"><a href="#2、文件操作" class="headerlink" title="2、文件操作"></a>2、文件操作</h3><p>新建图形文件【Ctrl】+【N】<br>新建图层【Ctrl】+【Shift】+【N】<br>用默认设置创建新文件 【Ctrl】+【Alt】+【N】<br>打开已有的图像 【Ctrl】+【O】<br>打开为… 【Ctrl】+【Alt】+【O】<br>关闭当前图像 【Ctrl】+【W】<br>保存当前图像 【Ctrl】+【S】<br>另存为… 【Ctrl】+【Shift】+【S】<br>存储副本 【Ctrl】+【Alt】+【S】<br>页面设置 【Ctrl】+【Shift】+【P】<br>打印 【Ctrl】+【P】<br>打开“预置”对话框 【Ctrl】+【K】<br>显示最后一次显示的“预置”对话框 【Alt】+【Ctrl】+【K】<br>设置“常规”选项(在预置对话框中) 【Ctrl】+【1】<br>设置“存储文件”(在预置对话框中) 【Ctrl】+【2】<br>设置“显示和光标”(在预置对话框中) 【Ctrl】+【3】<br>设置“透明区域与色域”(在预置对话框中) 【Ctrl】+【4】<br>设置“单位与标尺”(在预置对话框中) 【Ctrl】+【5】<br>设置“参考线与网格”(在预置对话框中) 【Ctrl】+【6】<br>外发光效果(在”效果”对话框中) 【Ctrl】+【3】<br>内发光效果(在”效果”对话框中) 【Ctrl】+【4】<br>斜面和浮雕效果(在”效果”对话框中) 【Ctrl】+【5】<br>应用当前所选效果并使参数可调(在”效果”对话框中) 【A】</p><h3 id="3、图层混合"><a href="#3、图层混合" class="headerlink" title="3、图层混合"></a>3、图层混合</h3><p>循环选择混合模式【Alt】+【-】或【+】<br>正常 【Shift】+【Alt】+【N】<br>阈值（位图模式） 【Shift】+【Alt】+【L】<br>溶解 【Shift】+【Alt】+【I】<br>背后 【Shift】+【Alt】+【Q】<br>清除 【Shift】+【Alt】+【R】<br>正片叠底 【Shift】+【Alt】+【M】<br>屏幕 【Shift】+【Alt】+【S】<br>叠加 【Shift】+【Alt】+【O】<br>柔光 【Shift】+【Alt】+【F】<br>强光 【Shift】+【Alt】+【H】<br>滤色 【Shift】+【Alt】+【S】<br>颜色减淡 【Shift】+【Alt】+【D】<br>颜色加深 【Shift】+【Alt】+【B】<br>变暗 【Shift】+【Alt】+【K】<br>变亮 【Shift】+【Alt】+【G】<br>差值 【Shift】+【Alt】+【E】<br>排除 【Shift】+【Alt】+【X】<br>色相 【Shift】+【Alt】+【U】<br>饱和度 【Shift】+【Alt】+【T】<br>颜色 【Shift】+【Alt】+【C】<br>光度 【Shift】+【Alt】+【Y】<br>去色 海棉工具+【Shift】+【Alt】+【J】<br>加色 海棉工具+【Shift】+【Alt】+【A】<br>暗调 减淡/加深工具+【Shift】+【Alt】+【W】<br>中间调 减淡/加深工具+【Shift】+【Alt】+【V】<br>高光减淡/加深工具+【Shift】+【Alt】+【Z】</p><h3 id="4、选择功能"><a href="#4、选择功能" class="headerlink" title="4、选择功能"></a>4、选择功能</h3><p>全部选取 【Ctrl】+【A】<br>取消选择 【Ctrl】+【D】<br>重新选择 【Ctrl】+【Shift】+【D】<br>羽化选择 【Ctrl】+【Alt】+【D】<br>反向选择 【Ctrl】+【Shift】+【I】<br>路径变选区 数字键盘的【Enter】<br>载入选区 【Ctrl】+点按图层、路径、通道面板中的缩约图<br>滤镜<br>按上次的参数再做一次上次的滤镜 【Ctrl】+【F】<br>退去上次所做滤镜的效果 【Ctrl】+【Shift】+【F】<br>重复上次所做的滤镜(可调参数) 【Ctrl】+【Alt】+【F】<br>选择工具(在“3D变化”滤镜中) 【V】<br>立方体工具(在“3D变化”滤镜中) 【M】<br>球体工具(在“3D变化”滤镜中) 【N】<br>柱体工具(在“3D变化”滤镜中) 【C】<br>轨迹球(在“3D变化”滤镜中) 【R】<br>全景相机工具(在“3D变化”滤镜中) 【E】</p><h3 id="5、视图操作"><a href="#5、视图操作" class="headerlink" title="5、视图操作"></a>5、视图操作</h3><p>显示彩色通道 【Ctrl】+【~】<br>显示单色通道 【Ctrl】+【数字】<br>显示复合通道 【~】<br>以CMYK方式预览(开) 【Ctrl】+【Y】<br>打开/关闭色域警告 【Ctrl】+【Shift】+【Y】<br>放大视图 【Ctrl】+【+】<br>缩小视图 【Ctrl】+【-】<br>满画布显示 【Ctrl】+【0】<br>实际象素显示 【Ctrl】+【Alt】+【0】<br>向上卷动一屏 【PageUp】<br>向下卷动一屏 【PageDown】<br>向左卷动一屏 【Ctrl】+【PageUp】<br>向右卷动一屏 【Ctrl】+【PageDown】<br>向上卷动10 个单位 【Shift】+【PageUp】<br>向下卷动10 个单位 【Shift】+【PageDown】<br>向左卷动10 个单位 【Shift】+【Ctrl】+【PageUp】<br>向右卷动10 个单位 【Shift】+【Ctrl】+【PageDown】<br>将视图移到左上角 【Home】<br>将视图移到右下角 【End】<br>显示/隐藏选择区域 【Ctrl】+【H】<br>显示/隐藏路径 【Ctrl】+【Shift】+【H】<br>显示/隐藏标尺 【Ctrl】+【R】<br>显示/隐藏参考线 【Ctrl】+【;】<br>显示/隐藏网格 【Ctrl】+【”】<br>贴紧参考线 【Ctrl】+【Shift】+【;】<br>锁定参考线 【Ctrl】+【Alt】+【;】<br>贴紧网格 【Ctrl】+【Shift】+【”】<br>显示/隐藏“画笔”面板 【F5】<br>显示/隐藏“颜色”面板 【F6】<br>显示/隐藏“图层”面板 【F7】<br>显示/隐藏“信息”面板 【F8】<br>显示/隐藏“动作”面板 【F9】<br>显示/隐藏所有命令面板 【TAB】<br>显示或隐藏工具箱以外的所有调板 【Shift】+【TAB】<br>文字处理(在”文字工具”对话框中)<br>左对齐或顶对齐 【Ctrl】+【Shift】+【L】<br>中对齐 【Ctrl】+【Shift】+【C】<br>右对齐或底对齐 【Ctrl】+【Shift】+【R】<br>左/右选择 1 个字符 【Shift】+【←】/【→】<br>下/上选择 1 行 【Shift】+【↑】/【↓】<br>选择所有字符 【Ctrl】+【A】<br>选择从插入点到鼠标点按点的字符 【Shift】加点按<br>左/右移动 1 个字符 【←】/【→】<br>下/上移动 1 行 【↑】/【↓】<br>左/右移动1个字 【Ctrl】+【←】/【→】<br>将所选文本的文字大小减小2 点象素 【Ctrl】+【Shift】+【&lt;】<br>将所选文本的文字大小增大2 点象素 【Ctrl】+【Shift】+【&gt;】<br>将所选文本的文字大小减小10 点象素 【Ctrl】+【Alt】+【Shift】+【&lt;】<br>将所选文本的文字大小增大10 点象素 【Ctrl】+【Alt】+【Shift】+【&gt;】<br>将行距减小2点象素 【Alt】+【↓】<br>将行距增大2点象素 【Alt】+【↑】<br>将基线位移减小2点象素 【Shift】+【Alt】+【↓】<br>将基线位移添加2点象素 【Shift】+【Alt】+【↑】<br>将字距微调或字距调整减小20/1000ems 【Alt】+【←】<br>将字距微调或字距调整添加20/1000ems 【Alt】+【→】<br>将字距微调或字距调整减小100/1000ems 【Ctrl】+【Alt】+【←】<br>将字距微调或字距调整添加100/1000ems 【Ctrl】+【Alt】+【→】<br>设置“增效工具与暂存盘”(在预置对话框中) 【Ctrl】+【7】<br>设置“内存与图像高速缓存”(在预置对话框中) 【Ctrl】+【8】</p><h3 id="6、编辑操作"><a href="#6、编辑操作" class="headerlink" title="6、编辑操作"></a>6、编辑操作</h3><p>还原/重做前一步操作【Ctrl】+【Z】<br>还原两步以上操作 【Ctrl】+【Alt】+【Z】<br>重做两步以上操作 【Ctrl】+【Shift】+【Z】<br>剪切选取的图像或路径 【Ctrl】+【X】或【F2】<br>拷贝选取的图像或路径 【Ctrl】+【C】<br>合并拷贝 【Ctrl】+【Shift】+【C】<br>将剪贴板的内容粘到当前图形中 【Ctrl】+【V】或【F4】<br>将剪贴板的内容粘到选框中 【Ctrl】+【Shift】+【V】<br>自由变换 【Ctrl】+【T】<br>应用自由变换(在自由变换模式下) 【Enter】<br>从中心或对称点开始变换 (在自由变换模式下) 【Alt】<br>限制(在自由变换模式下) 【Shift】<br>扭曲(在自由变换模式下) 【Ctrl】<br>取消变形(在自由变换模式下) 【Esc】<br>自由变换复制的象素数据 【Ctrl】+【Shift】+【T】<br>再次变换复制的象素数据并建立一个副本 【Ctrl】+【Shift】+【Alt】+【T】<br>删除选框中的图案或选取的路径 【DEL】<br>用背景色填充所选区域或整个图层 【Ctrl】+【BackSpace】或【Ctrl】+【Del】<br>用前景色填充所选区域或整个图层 【Alt】+【BackSpace】或【Alt】+【Del】<br>弹出“填充”对话框 【Shift】+【BackSpace】或【shift】+【F5】<br>从历史记录中填充 【Alt】+【Ctrl】+【Backspace】</p><h3 id="7、图像调整"><a href="#7、图像调整" class="headerlink" title="7、图像调整"></a>7、图像调整</h3><p>调整色阶 【Ctrl】+【L】<br>自动调整色阶 【Ctrl】+【Shift】+【L】<br>打开曲线调整对话框 【Ctrl】+【M】<br>在所选通道的曲线上添加新的点(‘曲线’对话框中) 在图象中【Ctrl】加点按<br>在复合曲线以外的所有曲线上添加新的点(‘曲线’对话框中) 【Ctrl】+【Shift】</p><h3 id="8、加点按"><a href="#8、加点按" class="headerlink" title="8、加点按"></a>8、加点按</h3><p>移动所选点(‘曲线’对话框中) 【↑】/【↓】/【←】/【→】<br>以10点为增幅移动所选点以10点为增幅(‘曲线’对话框中) 【Shift】+【箭头】<br>选择多个控制点(‘曲线’对话框中) 【Shift】加点按<br>前移控制点(‘曲线’对话框中) 【Ctrl】+【Tab】<br>后移控制点(‘曲线’对话框中) 【Ctrl】+【Shift】+【Tab】<br>添加新的点(‘曲线’对话框中) 点按网格<br>删除点(‘曲线’对话框中) 【Ctrl】加点按点<br>取消选择所选通道上的所有点(‘曲线’对话框中) 【Ctrl】+【D】<br>使曲线网格更精细或更粗糙(‘曲线’对话框中) 【Alt】加点按网格<br>选择彩色通道(‘曲线’对话框中) 【Ctrl】+【~】<br>选择单色通道(‘曲线’对话框中) 【Ctrl】+【数字】<br>打开“色彩平衡”对话框 【Ctrl】+【B】<br>打开“色相/饱和度”对话框 【Ctrl】+【U】<br>全图调整(在色相/饱和度”对话框中) 【Ctrl】+【~】<br>只调整红色(在色相/饱和度”对话框中) 【Ctrl】+【1】<br>只调整黄色(在色相/饱和度”对话框中) 【Ctrl】+【2】<br>只调整绿色(在色相/饱和度”对话框中) 【Ctrl】+【3】<br>只调整青色(在色相/饱和度”对话框中) 【Ctrl】+【4】<br>只调整蓝色(在色相/饱和度”对话框中) 【Ctrl】+【5】<br>只调整洋红(在色相/饱和度”对话框中) 【Ctrl】+【6】<br>去色 【Ctrl】+【Shift】+【U】<br>反相 【Ctrl】+【I】</p><h3 id="9、图层操作"><a href="#9、图层操作" class="headerlink" title="9、图层操作"></a>9、图层操作</h3><p>从对话框新建一个图层 【Ctrl】+【Shift】+【N】<br>以默认选项建立一个新的图层 【Ctrl】+【Alt】+【Shift】+【N】<br>通过拷贝建立一个图层 【Ctrl】+【J】<br>通过剪切建立一个图层 【Ctrl】+【Shift】+【J】<br>与前一图层编组 【Ctrl】+【G】<br>取消编组 【Ctrl】+【Shift】+【G】<br>向下合并或合并联接图层 【Ctrl】+【E】<br>合并可见图层 【Ctrl】+【Shift】+【E】<br>盖印或盖印联接图层 【Ctrl】+【Alt】+【E】<br>盖印可见图层【Ctrl】+【Alt】+【Shift】+【E】<br>将当前层下移一层 【Ctrl】+【[】<br>将当前层上移一层 【Ctrl】+【]】<br>将当前层移到最下面 【Ctrl】+【Shift】+【[】<br>将当前层移到最上面 【Ctrl】+【Shift】+【]】<br>激活下一个图层 【Alt】+【[】<br>激活上一个图层 【Alt】+【]】<br>激活底部图层 【Shift】+【Alt】+【[】<br>激活顶部图层 【Shift】+【Alt】+【]】<br>调整当前图层的透明度(当前工具为无数字参数的,如移动工具) 【0】至【9】<br>保留当前图层的透明区域(开关) 【/】<br>投影效果(在”效果”对话框中) 【Ctrl】+【1】<br>内阴影效果(在”效果”对话框中) 【Ctrl】+【2】<br>F1 -帮助<br>F2 -剪切<br>F3 -拷贝<br>F4-粘贴<br>F5-隐藏/显示画笔面板<br>F6-隐藏/显示颜色面板<br>F7-隐藏/显示图层面板<br>F8-隐藏/显示信息面板<br>F9-隐藏/显示动作面板<br>F12-恢复<br>Shift+f5-填充<br>Shift+f6-羽化<br>Shift+f7-选择→反选<br>ctrl+h-隐藏选定区域<br>ctrl+d-取消选定区域<br>ctrl+w-关闭文件<br>ctrl+Q-退出ps</p><h3 id="10、取消操作"><a href="#10、取消操作" class="headerlink" title="10、取消操作"></a>10、取消操作</h3><ul><li>1.按Tab键可以显示或隐藏工具箱和调色板，按”shift+Tab”键可以显示或隐藏除工具以外的其他面板。</li><li>2.按住shift用绘画工具在画面点击就可以在每两点间画出直线，按住鼠标拖动便可画出水平或垂直线。</li><li>3.使用其他工具时，按住ctrl键可切换到move工具的功能（除了选择hand工具时）按住空格键可切换到hand工具的功能。</li><li>4.同时按住alt和ctrl+或-可让画框与画面同时缩放。</li><li>5.使用其他工具时，按ctrl+空格键可切换到zoom in工具放大图象显示比例，按alt+ctrl+空格可切换到zoomout工具缩小图象显示比例。</li><li>6.在hand工具上双击鼠标可以使图象匹配窗口的大小显示。</li><li>7.按住alt双击ps底板相当于open as。</li><li>8.按住shife双击ps底板相当于save。</li><li>9.按住ctrl双击ps底板相当于new file。</li><li>10.按住ale点击工具盒中带小点的工具可循环选择隐藏的工具。</li><li>11.按ctrl+alt+{数字键0}或在zoom工具上双击鼠标可使图象文件以1：1比例显示。</li><li>12.在各种设置框内，只要按住alt键，cancel键会变成键reset键，按reset键变可恢复默认设置。</li><li>13.按shift+backspace键可直接调用fill填充对话框。</li><li>14.按alt+backspace(delete)键可将前景色填入选取框按ctrl+backspace(delete)键可将背景色填入选取框。</li><li>15.同时按住ctrl和alt移动可马上复制到新的layer并可同时移动物体。</li><li>16.再用裁切工具裁切图片并调整裁切点时按住ctrl便不会贴近画面边缘。</li><li>17.若要在一个宏(action)中的某一命令后新增一条命令,可以先选中该命令,然后单击调色板上的开始录制(beginrecording)图标,选择要添加的命令,再单击停止录制(stop recording)图标即可。</li><li>18.在layers,channels,paths面板上,按alt单击,按单击这些面板底部的工具图标时,对于有对话的工19.在使用filter→render→lightingeffectts滤镜时,若要在对话框内复制光源,可先按住alt键后再拖动光源即可实现复制。</li><li>20.按住shift加上tab键可以显示或隐藏除工具 箱外的其他调色板</li><li>21.调用curves对话框时,按住键于格线内单击鼠标可以添加网格线,提高曲线精度。</li><li>22.若要在两上窗口间拖放拷贝,拖动过程中按住shift键,图像拖动到目的窗口后会自动居中。</li><li>23.按住shift选择区域时可在原区域上添加新的区域;按住alt选择区域时,可在原区域上减去新选区域,同时按住shift和alt选择区域时,可取得与原选择区域相交的部分</li><li>24.移动图层和选取框时,按住shift键可做水平,垂直或45度角的移动,按键盘上的方向键,可做每次1像素的移动,按住shift键再键盘上的方向键可做每次10像素的移动。</li><li>25.使用笔形工具制作路径是按住shift键可以强制路径或方向线成水平或垂直或45度角按住ctrl键可暂时切换到路径选取工具按住alt键将笔形光标在黑色的接点上单击可以改变方向线的方向，使曲线可以转折；按alt键用路径选取(directselection)工具单击路径会选取整个路径，要同时选取多个路径可按住shift后逐个单击，用路径选取工具是按住ctrl+alt键移近路径会切换到加节点与件节点的笔行工具。</li><li>26.在使用选取工具时,按shift键拖动鼠标可以在原选取框外添加选取范围;同时按shift与alt键拖动鼠标可以选取与原选取框重叠的范围(交集)。</li><li>27.ctrl+delete加填前景颜色,ctrl或shift加delete填背景颜色。</li><li>28.空格加ctrl(注意顺序)快速调出放大镜, 再加alt变成缩小镜。</li><li>29.若要将图像用于网面上,可将图像模式设置为indexed color索引色彩模式,有文件小,传输快的优点, 如果再选择gif89aexport(gif输出),可以设置透明的效果,并将文件保存成gif格式。</li><li>30.使用filter→render→clouds滤镜时,先按住alt可加云彩的反差,先按住shift键则降低反差 。</li><li>31.双击放大镜可使画面以的100%比例显示大小。</li><li>32.按ctrl+r 出现标尺,在标尺拉出辅助线时按住就可以准确的让辅助线贴近刻度。</li><li>33.在使用自由变形(layer→free→transform)功能时,按ctrl键并拖动某一控制点可以进行随意变形的调整,”shift+ctrl”键并拖动某一控制点可以时行倾斜调整;按alt键并拖动某一控制点可以进行对称调整;按shift+ctrl+alt键并拖动某一控制点可以进行透视效果的调整。</li><li>34.在ps5.0以上版本中右键点击文字,在layer选effects…可快速做出随字体改变的阴影及光芒效果。</li><li>35.在安装ps的时候在select country中选择all other countries;在selectcomponents中确定选择了cmap files;这样安装完后,您的ps就可以正常使用中文了。</li><li>36.在ps5.0中在history控制面板中点右上角的小三角选clearhistory可以暂时缓解你对虚拟内存的要求。</li><li>37.在使用filter→render→clouds滤镜时,若要产生更多明显的纹理图案,可先按住alt键后再执行该命令。</li><li>38.大部分工具在使用时按caps lock键可使工具图标与精 确十线相互切换。</li><li>39.按f键可把ps面板的显示模式顺序替换为:标准显示 带菜单的全屏显示 全屏显示。</li><li>40.想从中心开始画选框可按住alt拖动。</li></ul><h3 id="11、工作界面"><a href="#11、工作界面" class="headerlink" title="11、工作界面"></a>11、工作界面</h3><p>启动后，就进入ps的工作界面了，由以下几部分组成:<br>标题栏：位于主窗口顶端，最左边是ps标记，右边分别是最小化、最大化/还原和关闭按钮。<br>属性栏(又称工具选项栏)：选中某个工具后，属性栏就会改变成相应工具的属性设置选项，可更改相应的选项。<br>菜单栏：菜单栏为整个环境下所有窗口提供菜单控制，包括:文件、编辑、图像、图层、选择、滤镜、视图、窗口和帮助九项。<br>ps中通过两种方式执行所有命令，一是菜单，二是快捷键。<br>图像编辑窗口：中间窗口是图像窗口，它是ps的主要工作区，用于显示图像文件。图像窗口带有自己的标题栏，提供了打开文件的基本信息，如文件名、缩放比例、颜色模式等。<br>如同时打开两副图像，可通过单击图像窗口进行切换。图像窗口切换可使用Ctrl+Tab<br>状态栏：主窗口底部是状态栏，由三部分组成:<br>(1)最右边的是文本行，说明当前所选工具和所进行操作 的功能与作用等信息。</p><p>(2)左边是缩放栏，显示当前图像窗口的显示比例，用户也可在此窗口中输入数值后按回车来改变显示比例。<br>(3)中间是预览框，单击右边的黑色三角按扭，打开弹出菜单，选择任一命令，相应的信息就会在预览框中显示。<br>文档大小:表示当前显示的是图像文件尺寸。左边的数字表示该图像不含任何图层和通道等数据情况下的尺寸，右侧的数字表示当前图像的全部文件尺寸。<br>文档配置文件:在状态栏上将显示文件的颜色模式<br>文档尺寸:在状态档上将显示文档的大小(宽度和高度)。</p><p>暂存盘大小:已用和可用内存大小。<br>效率:代表ps的工作效率。低于60%则表示计算机硬盘可能已无法满足要求。<br>计时:执行上一次操作所花费的时间。<br>当前工具:当前选中的工具。</p><p>工具栏工具箱：工具箱中的工具可用来选择、绘画、编辑以及查看图像。拖动工具箱的标题栏，可移动工具箱。单击可选中工具，属性栏会显示该工具的属性。有些工具的右下角有一个小三角形符号，这表示在工具位置上存在一个工具组，其中包括若干个相关工具。<br>控制面板：共有14个面板，可通过“窗口/显示”来显示面板。<br>按Tab键，自动隐藏命令面板，属性栏和工具箱，再次按键，显示以上组件。<br>按Shift+Tab，隐藏控制面板，保留工具箱</p><ul><li><ul><li>选框-Marquee(M)</li></ul></li><li><ul><li>移动-move(V)</li></ul></li><li><ul><li>套索-Lasso(L)</li></ul></li><li><ul><li>魔棒-Wand(W)</li></ul></li><li><ul><li>喷枪-injection lance (J)</li></ul></li><li><ul><li>画笔-Brush (B)</li></ul></li><li><ul><li>铅笔-pencil(N)</li></ul></li><li><ul><li>橡皮图章-rubbr-stamp(s)</li></ul></li><li><ul><li>历史记录画笔-history brush tool (Y)</li></ul></li><li><ul><li>橡皮擦-Erasers (E)</li></ul></li><li><ul><li>模糊-Blur (R)</li></ul></li><li><ul><li>减淡- dodge tool (O)</li></ul></li><li><ul><li>钢笔-pen (P)</li></ul></li><li><ul><li>文字-text (T)</li></ul></li><li><ul><li>度量-measurement (U)</li></ul></li><li><ul><li>渐变-Gradient (G)</li></ul></li><li><ul><li>油漆桶-Paint Bucket Tool (K)</li></ul></li><li><ul><li>吸管- suction tube (I)</li></ul></li><li><ul><li>抓手-hand grip (H)</li></ul></li><li><ul><li>缩放-Zoom (Z)</li></ul></li><li><ul><li>默认前景和背景色-The default foreground and background color (D)</li></ul></li><li><ul><li>切换前景和背景色-Switch foreground and background color (X)</li></ul></li><li><ul><li>编辑模式切换-Edit mode switching (Q)</li></ul></li><li><ul><li>显示模式切换-F Cycle through Screen Modes (F)</li></ul></li></ul><hr><h2 id="一、File－（文件）"><a href="#一、File－（文件）" class="headerlink" title="一、File－（文件）"></a>一、File－（文件）</h2><p>1.New－（新建）<br>2.Open－（打开）<br>3.Open As－（打开为）<br>4.Open Recent－（最近打开文件）<br>5.Close－（关闭）<br>6.Save－（存储）<br>7.Save As－（存储为）<br>8.Save for Web－（存储为Web所用格式）<br>9.Revert－（恢复）<br>10.Place－（置入）<br>11.Import－（输入）<br>－（1）PDF Image<br>－（2）Annotations－（注释）<br>12.Export－（输出）<br>13.Manage Workflow－（管理工作流程）<br>－（1）Check In－（登记）<br>－（2）Undo Check Out－（还原注销）<br>－（3）Upload To Server－（上载到服务器）<br>－（4）Add To Workflow－（添加到工作流程）<br>－（5）Open From Workflow－（从工作流程打开）<br>14.Automate－（自动）<br>－（1）Batch－（批处理）<br>－（2）Create Droplet－（创建快捷批处理）<br>－（3）Conditional Mode Change－（条件模式更改）<br>－（4）Contact Sheet－（联系表）<br>－（5）Fix Image－（限制图像）<br>－（6）Multi<br>－（7）Picture package－（图片包）<br>－（8）Web Photo Gallery<br>15.File Info－（文件简介）<br>16.Print Options－（打印选项）<br>17.Page Setup－（页面设置）<br>18.Print－（打印）<br>19.Jump to－（跳转到）<br>20.Exit－（退出）</p><h2 id="二、Edit－（编辑）"><a href="#二、Edit－（编辑）" class="headerlink" title="二、Edit－（编辑）"></a>二、Edit－（编辑）</h2><p>1.Undo－（还原）<br>2.Step Forward－（向前）<br>3.Step Backward－（返回）<br>4.Fade－（消退）<br>5.Cut－（剪切）<br>6.Copy－（拷贝）<br>7.Copy Merged－（合并拷贝）<br>8.Paste－（粘贴）<br>9.Paste Into－（粘贴入）<br>10.Clear－（清除）<br>11.Fill－（填充）<br>12.Stroke－（描边）<br>13.Free Transform－（自由变形）<br>14.Transform－（变换）<br>－（1）Again－（再次）<br>－（2）Sacle－（缩放）<br>－（3）Rotate－（旋转）<br>－（4）Skew－（斜切）<br>－（5）Distort－（扭曲）<br>－（6）Prespective－（透视）<br>－（7）Rotate 180°－（旋转180度）<br>－（8）Rotate 90°CW－（顺时针旋转90度）<br>－（9）Rotate 90°CCW－（逆时针旋转90度）<br>－（10） Flip Hpeizontal－（水平翻转）<br>－（11） Flip Vertical－（垂直翻转）<br>15.Define Brush－（定义画笔）<br>16.Define Pattern－（设置图案）<br>17.Define Custom Shape－（定义自定形状）<br>18.Purge－（清除内存数据）<br>－（1） Undo－（还原）<br>－（2） Clipboard－（剪贴板）<br>－（3） Histories－（历史纪录）<br>－（4） All－（全部）<br>19.Color Settings－（颜色设置）<br>20.Preset Manager－（预置管理器）<br>21.Preferences－（预设）<br>－（1） General－（常规）<br>－（2） Saving Files－（存储文件）<br>－（3） Display</p><h2 id="三、Image－（图像）"><a href="#三、Image－（图像）" class="headerlink" title="三、Image－（图像）"></a>三、Image－（图像）</h2><p>1.Mode－（模式）<br>－（1） Bitmap－（位图）<br>－（2） Grayscale－（灰度）<br>－（3） Duotone－（双色调）<br>－（4） Indexed Color－（索引色）<br>－（5） RGB Color<br>－（6） CMYK Color<br>－（7） Lab Color<br>－（8） Multichannel－（多通道）<br>－（9） 8 Bits/Channel－（8位通道）<br>－（10） 16 Bits/Channel－（16位通道）<br>－（11） Color Table－（颜色表）<br>－（12）Assing Profile－（制定配置文件）<br>－（13）Convert to Profile－（转换为配置文件）<br>2.Adjust－（调整）<br>－（1） Levels－（色阶））<br>－（2） Auto Laves－（自动色阶）<br>－（3） Auto Contrast－（自动对比度）<br>－（4） Curves－（曲线））<br>－（5） Color Balance－（色彩平衡）<br>－（6） Brightness/Contrast－（亮度/对比度）<br>－（7） Hue/Saturation－（色相/饱和度）<br>－（8） Desaturate－（去色）<br>－（9） Replace Color－（替换颜色）<br>－（10） Selective Color－（可选颜色）<br>－（11） Channel Mixer－（通道混合器）<br>－（12） Gradient Map－（渐变映射）<br>－（13） Invert－（反相）<br>－（14） Equalize－（色彩均化）<br>－（15） Threshold－（阈值）<br>－（16） Posterize－（色调分离）<br>－（17） Variations－（变化）<br>3.Duplicate－（复制）<br>4.Apply Image－（应用图像）<br>5.Calculations－（计算）<br>6.Image Size－（图像大小）<br>7.Canvas Size－（画布大小）<br>8.Rotate Canvas－（旋转画布）<br>－（1） 180°－（180度）<br>－（2） 90°CW－（顺时针90度）<br>－（3） 90°CCW－（逆时针90度）<br>－（4） Arbitrary－（任意角度）<br>－（5） Flip Horizontal－（水平翻转）<br>－（6） Flip Vertical－（垂直翻转）<br>9.Crop－（裁切）<br>10.Trim－（修整）<br>11.Reverl All－（显示全部）<br>12.Histogram－（直方图）<br>13.Trap－（陷印）<br>14.Extract－（抽出）<br>15.Liquify－（液化）</p><h2 id="四、Layer－（图层）"><a href="#四、Layer－（图层）" class="headerlink" title="四、Layer－（图层）"></a>四、Layer－（图层）</h2><p>1.New－（新建）<br>－（1） Layer－（图层）<br>－（2） Background From Layer－（背景图层）<br>－（3） Layer Set－（图层组）<br>－（4） Layer Set From Linked－（图层组来自链接的）<br>－（5） Layer via Copy－（通过拷贝的图层）<br>－（6） Layer via Cut－（通过剪切的图层）<br>2.Duplicate Layer－（复制图层）<br>3.Delete Layer－（删除图层）<br>4.Layer Properties－（图层属性）<br>5.Layer Style－（图层样式）<br>－（1） Blending Options－（混合选项）<br>－（2） Drop Shadow－（投影）<br>－（3） Inner Shadow－（内阴影）<br>－（4） Outer Glow－（外发光）<br>－（5） Inner Glow－（内发光）<br>－（6） Bevel and Emboss－（斜面和浮雕）<br>－（7） Satin－（光泽）<br>－（8） Color Overlay－（颜色叠加）<br>－（9） Gradient Overlay－（渐变叠加）<br>－（10） Pattern Overlay－（图案叠加）<br>－（11） Stroke－（描边）<br>－（12） Copy Layer Effects－（拷贝图层样式）<br>－（13） Paste Layer Effects－（粘贴图层样式）<br>－（14） Paste Layer Effects To Linked－（将图层样式粘贴的链接的）<br>－（15） Clear Layer Effects－（清除图层样式）<br>－（16） Global Light－（全局光）<br>－（17） Create Layer－（创建图层）<br>－（18） Hide All Effects－（显示/隐藏全部效果）<br>－（19） Scale Effects－（缩放效果）<br>6.New Fill Layer－（新填充图层）<br>－（1） Solid Color－（纯色）<br>－（2） Gradient－（渐变）<br>－（3） Pattern－（图案）<br>7.New Adjustment Layer－（新调整图层）<br>－（1）Levels－（色阶）<br>－（2）Curves－（曲线）<br>－（3）Color Balance－（色彩平衡）<br>－（4）Brightness/Contrast－（亮度/对比度）<br>－（5）Hue/Saturation－（色相/饱和度）<br>－（6）Selective Color－（可选颜色）<br>－（7）Channel Mixer－（通道混合器）<br>－（8）Gradient Map－（渐变映射）<br>－（9）Invert－（反相）<br>－（10）Threshold－（阈值）<br>－（11）Posterize－（色调分离）<br>8.Change Layer Content－（更改图层内容）<br>9.Layer Content Options－（图层内容选项）<br>10.Type－（文字）<br>－（1） Create Work Path－（创建工作路径）<br>－（2） Convert to Shape－（转变为形状）<br>－（3） Horizontal－（水平）<br>－（4） Vertical－（垂直）<br>－（5） Anti-Alias None－（消除锯齿无）<br>－（6） Anti-Alias Crisp－（消除锯齿明晰）<br>－（7） Anti-Alias Strong－（消除锯齿强）<br>－（8） Anti-Alias Smooth－（消除锯齿平滑）<br>－（9） Covert To Paragraph Text－（转换为段落文字）<br>－（10） Warp Text－（文字变形）<br>－（11）Update All Text Layers－（更新所有文本图层）<br>－（12）Replace All Missing Fonts－（替换所以缺欠文字）<br>11.Rasterize－（栅格化）<br>－（1）Type－（文字）<br>－（2）Shape－（形状）<br>－（3）Fill Content－（填充内容）<br>－（4）Layer Clipping Path－（图层剪贴路径）<br>－（5）Layer－（图层）<br>－（6）Linked Layers－（链接图层）<br>－（7）All Layers－（所有图层）<br>12.New Layer Based Slice－（基于图层的切片）<br>13.Add Layer Mask－（添加图层蒙板）<br>－（1） Reveal All－（显示全部）<br>－（2） Hide All－（隐藏全部）<br>－（3） Reveal Selection－（显示选区）<br>－（4） Hide Selection－（隐藏选区）<br>14.Enable Layer Mask－（启用图层蒙板）<br>15.Add Layer Clipping Path－（添加图层剪切路径）<br>－（1）Reveal All－（显示全部）<br>－（2）Hide All－（隐藏全部）<br>－（3）Current Path－（当前路径）<br>16.Enable Layer Clipping Path－（启用图层剪切路径）<br>17.Group Linked－（于前一图层编组）<br>18.UnGroup－（取消编组）<br>19.Arrange－（排列）<br>－（1） Bring to Front－（置为顶层）<br>－（2） Bring Forward－（前移一层）<br>－（3） Send Backward－（后移一层）<br>－（4） Send to Back－（置为底层）<br>20.Arrange Linked－（对齐链接图层）<br>－（1） Top Edges－（顶边）<br>－（2） Vertical Center－（垂直居中）<br>－（3） Bottom Edges－（底边）<br>－（4） Left Edges－（左边）<br>－（5） Horizontal Center－（水平居中）<br>－（6） Right Edges－（右边）<br>21.Distribute Linked－（分布链接的）<br>－（1） Top Edges－（顶边）<br>－（2） Vertical Center－（垂直居中）<br>－（3） Bottom Edges－（底边）<br>－（4） Left Edges－（左边）<br>－（5） Horizontal Center－（水平居中）<br>－（6） Right Edges－（右边）<br>22.Lock All Linked Layers－（锁定所有链接图层）<br>23.Merge Linked－（合并链接图层）<br>24.Merge Visible－（合并可见图层）<br>25.Flatten Image－（合并图层）<br>26.Matting－（修边）<br>－（1） Define－（去边）<br>－（2） Remove Black Matte－（移去黑色杂边）<br>－（3） Remove White Matte－（移去白色杂边）</p><h2 id="五、Selection－（选择）"><a href="#五、Selection－（选择）" class="headerlink" title="五、Selection－（选择）"></a>五、Selection－（选择）</h2><p>1.All－（全部）<br>2.Deselect－（取消选择）<br>3.Reselect－（重新选择）<br>4.Inverse－（反选）<br>5.Color Range－（色彩范围）<br>6.Feather－（羽化）<br>7.Modify－（修改）<br>－（1） Border－（扩边）<br>－（2） Smooth－（平滑）<br>－（3） Expand－（扩展）<br>－（4） Contract－（收缩）<br>8.Grow－（扩大选区）<br>9.Similar－（选区相似）<br>10.Transform Selection－（变换选区）<br>11.Load Selection－（载入选区）<br>12.Save Selection－（存储选区）</p><h2 id="六、Filter－（滤镜）"><a href="#六、Filter－（滤镜）" class="headerlink" title="六、Filter－（滤镜）"></a>六、Filter－（滤镜）</h2><p>1.LastFilter－（上次滤镜操作）<br>2.Artistic－（艺术效果）<br>－（1） Colored Pencil－（彩色铅笔）<br>－（2） Cutout－（剪贴画）<br>－（3） Dry Brush－（干笔画）<br>－（4） Film Grain－（胶片颗粒）<br>－（5） Fresco－（壁画）<br>－（6） Neon Glow－（霓虹灯光）<br>－（7） Paint Daubs－（涂抹棒）<br>－（8） Palette Knife－（调色刀）<br>－（9） Plastic Wrap－（塑料包装）<br>－（10） Poster Edges－（海报边缘）<br>－（11） Rough Pastels－（粗糙彩笔）<br>－（12） Smudge Stick－（绘画涂抹）<br>－（13） Sponge－（海绵）<br>－（14） Underpainting－（底纹效果）<br>－（15） Watercolor－（水彩）<br>3.Blur－（模糊）<br>－（1） Blur－（模糊）<br>－（2） Blur More－（进一步模糊）<br>－（3） Gaussian Blur－（高斯模糊）<br>－（4） Motion Blur－（动态模糊）<br>－（5） Radial Blur－（径向模糊）<br>－（6） Smart Blur－（特殊模糊）<br>4.Brush Strokes－（画笔描边）<br>－（1） Accented Edges－（强化边缘）<br>－（2） Angled Stroke－（成角的线条）<br>－（3） Crosshatch－（阴影线）<br>－（4） Dark Strokes－（深色线条）<br>－（5） Ink Outlines－（油墨概况）<br>－（6） Spatter－（喷笔）<br>－（7） Sprayed Strokes－（喷色线条）<br>－（8） Sumi<br>5.Distort－（扭曲）<br>－（1） Diffuse Glow－（扩散亮光）<br>－（2） Displace－（置换）<br>－（3） Glass－（玻璃）<br>－（4） Ocean Ripple－（海洋波纹）<br>－（5） Pinch－（挤压）<br>－（6） Polar Coordinates－（极坐标）<br>－（7） Ripple－（波纹）<br>－（8） Shear－（切变）<br>－（9） Spherize－（球面化）<br>－（10） Twirl－（旋转扭曲）<br>－（11） Wave－（波浪）<br>－（12） Zigzag－（水波）<br>6.Noise－（杂色）<br>－（1） Add Noise－（加入杂色）<br>－（2） Despeckle－（去斑）<br>－（3） Dust</p><h2 id="七、View－（视图）"><a href="#七、View－（视图）" class="headerlink" title="七、View－（视图）"></a>七、View－（视图）</h2><p>1.NewView－（新视图）<br>2.Proof Setup－（校样设置）<br>－（1）Custom－（自定）<br>－（2）Working CMYK－（处理CMYK）<br>－（3）Working Cyan Plate－（处理青版）<br>－（4）Working Magenta Plate－（处理洋红版）<br>－（5）Working Yellow Plate－（处理黄版）<br>－（6）Working Black Plate－（处理黑版）<br>－（7）Working CMY Plate－（处理CMY版）<br>－（8）Macintosh RGB<br>－（9）Windows RGB<br>－（10）Monitor RGB－（显示器RGB）<br>－（11）Simulate Paper White－（模拟纸白）<br>－（12）Simulate Ink Black－（模拟墨黑）<br>3.Proof Color－（校样颜色）<br>4.Gamut Wiring－（色域警告）<br>5.Zoom In－（放大）<br>6.Zoom Out－（缩小）<br>7.Fit on Screen－（满画布显示）<br>8.Actual Pixels－（实际象素）<br>9.Print Size－（打印尺寸）<br>10.Show Extras－（显示额外的）<br>11.Show－（显示）<br>－（1） Selection Edges－（选区边缘）<br>－（2） Target Path－（目标路径）<br>－（3） Grid－（网格）<br>－（4） Guides－（参考线）<br>－（5） Slices－（切片）<br>－（6） Notes－（注释）<br>－（7） All－（全部）<br>－（8） None－（无）<br>－（9）Show Extras Options－（显示额外选项）<br>12.Show Rulers－（显示标尺）<br>13.Snap－（对齐）<br>14.Snap To－（对齐到）<br>－（1） Guides－（参考线）<br>－（2） Grid－（网格）<br>－（3） Slices－（切片）<br>－（4） Document Bounds－（文档边界）<br>－（5） All－（全部）<br>－（6） None－（无）<br>15.Show Guides－（锁定参考线）<br>16.Clear Guides－（清除参考线）<br>17.New Guides－（新参考线）<br>18.Lock Slices－（锁定切片）<br>19.Clear Slices－（清除切片）</p><h2 id="八、Windows－（窗口）"><a href="#八、Windows－（窗口）" class="headerlink" title="八、Windows－（窗口）"></a>八、Windows－（窗口）</h2><p>1.Cascade－（层叠）<br>2.Tile－（拼贴）<br>3.Arrange Icons－（排列图标）<br>4.Close All－（关闭全部）<br>5.Show/Hide Tools－（显示/隐藏工具）<br>6.Show/Hide Options－（显示/隐藏选项）<br>7.Show/Hide Navigator－（显示/隐藏导航）<br>8.Show/Hide Info－（显示/隐藏信息）<br>9.Show/Hide Color－（显示/隐藏颜色）<br>10.Show/Hide Swatches－（显示/隐藏色板）<br>11.Show/Hide Styles－（显示/隐藏样式）<br>12.Show/Hide History－（显示/隐藏历史记录）<br>13.Show/Hide Actions－（显示/隐藏动作）<br>14.Show/Hide Layers－（显示/隐藏图层）<br>15.Show/Hide Channels－（显示/隐藏通道）<br>16.Show/Hide Paths－（显示/隐藏路径）<br>17.Show/Hide Character－（显示/隐藏字符）<br>18.Show/Hide Paragraph－（显示/隐藏段落）<br>19.Show/Hide Status Bar－（显示/隐藏状态栏）<br>20.Reset Palette Locations－（复位调板位置）<br>CTRL+T（自由变换） CTRL+J（复制图层） CTRL+G（建组）<br>CTRL+ALT+T（复制并变换） SHIFT+CTRL+ALT+T（三键组合T出N个线条）<br>CTRL+E（合并图层） CTRL+H（调出参考线或隐藏参考线）<br>CTRL+D（取消选择） SHIFT+CTRL+J（新建通过剪切的图层）<br>CTRL+图层缩略图（将图层载入选区）<br>CRTL+创建新图层（在点蓝的图层下面创建一个新的图层）</p>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计类 </tag>
            
            <tag> ps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名绑定</title>
      <link href="/2019/03/15/da-jian/yu-ming-bang-ding/"/>
      <url>/2019/03/15/da-jian/yu-ming-bang-ding/</url>
      
        <content type="html"><![CDATA[<p>##1.第一种2情况<br>Your site is ready to be published at 域名</p><p>检查你的域名解析</p><pre><code>ping 地址</code></pre><p>2.更改hosts文件，地址：C:\Windows\System32\Drivers\etc<br>    不能直接修改，将其拷贝到桌面，进行修改后，再复制到文件目录下（直接替换）<br>    在hosts文件中添加：</p><pre><code>```#githubip地址 github.comip地址 github.global.ssl.fastly.net```</code></pre><p>3.如果上述步骤还不可以，可以刷新一下缓存：</p><pre><code>打开cmd输入ipconfig /flushdns刷新缓存</code></pre>]]></content>
      
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面介绍 &lt;Span Style=&#39;color:yellow;font-Weight:bold;&#39;&gt;[加密]&lt;/span&gt;</title>
      <link href="/2019/03/14/da-jian/zui-quan-shi-li/"/>
      <url>/2019/03/14/da-jian/zui-quan-shi-li/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown语法规则"><a href="#Markdown语法规则" class="headerlink" title="Markdown语法规则"></a>Markdown语法规则</h1><h2 id="一、斜体、粗体"><a href="#一、斜体、粗体" class="headerlink" title="一、斜体、粗体"></a>一、斜体、粗体</h2><p><strong>粗体</strong><br><strong>和上面一样是粗体</strong><br><em>斜体</em><br><em>和上面一样是斜体</em><br><strong>可  以  加  空  格</strong></p><h2 id="二、分割线"><a href="#二、分割线" class="headerlink" title="二、分割线"></a>二、分割线</h2><p>三个或者以上的-_*，必须单独一行，可含有空格。<br>呵呵呵呵</p><hr><p>哈哈哈哈</p><hr><p>啦啦啦啦</p><hr><h2 id="三、区块引用"><a href="#三、区块引用" class="headerlink" title="三、区块引用"></a>三、区块引用</h2><p>使用’&gt;’角括号进行区块引用</p><blockquote><p>区块引用</p><blockquote><p>两层引用</p><blockquote><p>三层引用</p></blockquote></blockquote></blockquote><h2 id="四、标题样式"><a href="#四、标题样式" class="headerlink" title="四、标题样式"></a>四、标题样式</h2><p>markdown支持两种标题语法，Setext和atx，Setext 形式是用底线的形式，利用三个或更多 = （最高阶标题）和 - （第二阶标题），Atx 形式在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶。</p><h1 id="最高阶标题"><a href="#最高阶标题" class="headerlink" title="最高阶标题"></a>最高阶标题</h1><h2 id="第二阶标题"><a href="#第二阶标题" class="headerlink" title="第二阶标题"></a>第二阶标题</h2><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h4 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h4><h5 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h5><h6 id="七级标题"><a href="#七级标题" class="headerlink" title="七级标题"></a>七级标题</h6><h2 id="五、无序列表"><a href="#五、无序列表" class="headerlink" title="五、无序列表"></a>五、无序列表</h2><p>使用-+*号，效果一样，注意符号后面的空格，但是不能混合使用，混合的话就成了嵌套列表</p><ul><li>减号无序列表</li></ul><ul><li>加号无序列表</li></ul><ul><li>星号无序列表</li></ul><ul><li><ul><li>混合使用</li></ul></li></ul><ul><li><ul><li>混合使用</li></ul></li></ul><ul><li><ul><li>混合使用</li></ul></li></ul><ul><li><ul><li>混合使用</li></ul></li></ul><ul><li><ul><li>混合使用</li></ul></li></ul><ul><li><ul><li>混合使用</li></ul></li></ul><ul><li><ul><li>混合使用</li></ul></li></ul><ul><li><ul><li>混合使用</li></ul></li></ul><h2 id="六、有序列表"><a href="#六、有序列表" class="headerlink" title="六、有序列表"></a>六、有序列表</h2><p>使用数字和英文句点，数字可以无序，注意点后面的空格</p><ol><li>有序列表1</li><li>有序列表2</li><li>有序列表5</li><li>有序列表8</li><li>有序列表6</li></ol><h2 id="七、嵌套列表"><a href="#七、嵌套列表" class="headerlink" title="七、嵌套列表"></a>七、嵌套列表</h2><p>注意第二级的前后都有空格</p><ul><li>嵌套列表1<ul><li>嵌套列表2<ul><li>嵌套列表3<ul><li>嵌套列表4<ul><li>嵌套列表5</li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="八、链接"><a href="#八、链接" class="headerlink" title="八、链接"></a>八、链接</h2><p>链接有两种，行内(inline) 和 参考(reference)两种形式</p><h4 id="1、行内-inline-形式"><a href="#1、行内-inline-形式" class="headerlink" title="1、行内(inline)形式"></a>1、行内(inline)形式</h4><p>行内形式是直接在后面用括号直接接上链接<br><a href="www.baidu.com">百度</a></p><h4 id="2、加上title属性"><a href="#2、加上title属性" class="headerlink" title="2、加上title属性"></a>2、加上title属性</h4><p>也可以加上title属性，注意中间有个空格，使用双引号，把鼠标放在链接上，就可以看出区别了<br><a href="www.baidu.com" title="欢迎来到百度！">百度</a></p><h4 id="3、参考-reference-方式："><a href="#3、参考-reference-方式：" class="headerlink" title="3、参考(reference)方式："></a>3、参考(reference)方式：</h4><p>这是[Google][1] ,这是[Yahoo][2],这是[MSN][3].<br>[1]:<a href="http://google.com/" target="_blank" rel="noopener">http://google.com/</a> “Google”<br>[2]:<a href="http://search.yahoo.com/" target="_blank" rel="noopener">http://search.yahoo.com/</a> “Yahoo Search”<br>[3]:<a href="http://search.msn.com/" target="_blank" rel="noopener">http://search.msn.com/</a> “MSN Search”</p><h4 id="4、自动链接：自动链接直接用一对尖括号包围即可"><a href="#4、自动链接：自动链接直接用一对尖括号包围即可" class="headerlink" title="4、自动链接：自动链接直接用一对尖括号包围即可"></a>4、自动链接：自动链接直接用一对尖括号包围即可</h4><p><a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a></p><h2 id="九、插入图片："><a href="#九、插入图片：" class="headerlink" title="九、插入图片："></a>九、插入图片：</h2><p>图片的语法和文字链接的形式很像，只不过前面加个!，后面跟图片的地址</p><h4 id="1、行内-inline-形式-注意title属性是可选的"><a href="#1、行内-inline-形式-注意title属性是可选的" class="headerlink" title="1、行内(inline)形式(注意title属性是可选的)"></a>1、行内(inline)形式(注意title属性是可选的)</h4><p><img src="http://pic11.photophoto.cn/20090626/0036036341009653_b.jpg" alt="kobe" title="Kobe Bryant"></p><h4 id="2、参考-reference-形式"><a href="#2、参考-reference-形式" class="headerlink" title="2、参考(reference)形式"></a>2、参考(reference)形式</h4><p>![kobe][id]<br>[id]:<a href="http://pic11.photophoto.cn/20090626/0036036341009653_b.jpg" target="_blank" rel="noopener">http://pic11.photophoto.cn/20090626/0036036341009653_b.jpg</a> “Kobe Bryant”</p><h2 id="十、代码"><a href="#十、代码" class="headerlink" title="十、代码"></a>十、代码</h2><h4 id="1、代码段"><a href="#1、代码段" class="headerlink" title="1、代码段"></a>1、代码段</h4><p>代码段在一般的段落文字中，你可以使用反引号 ` 来标记代码区段，区段内的 &amp;、&lt; 和 &gt; 都会被自动的转换成 HTML 实体，这项特性让你可以很容易的在代码区段内插入 HTML 码：</p><p><code>--------</code></p><h4 id="2、段落代码块"><a href="#2、段落代码块" class="headerlink" title="2、段落代码块"></a>2、段落代码块</h4><pre><code>如果要建立一个已经格式化好的代码区块，只要每行都`缩进 4 个空格或是一个 tab`就可以了，而 &amp;、&lt; 和 &gt; 也一样会自动转成 HTML 实体。</code></pre><h4 id="3、行内代码：高亮"><a href="#3、行内代码：高亮" class="headerlink" title="3、行内代码：高亮"></a>3、行内代码：高亮</h4><p>在第一行的后面指定编程语言，也可以不指定。（Markdown目前好像不支持更改代码块背景颜色。。。。）<br>    var odiv =document.getElementsByTagName(‘text’);</p><h2 id="十一、注释和html的一样"><a href="#十一、注释和html的一样" class="headerlink" title="十一、注释和html的一样"></a>十一、注释和html的一样</h2><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- 注释 --<span class="token operator">></span></code></pre><h2 id="十二、转义字符"><a href="#十二、转义字符" class="headerlink" title="十二、转义字符"></a>十二、转义字符</h2><p>\ 反斜杠<br>` 反引号<br>* 星号<br>_ 下划线<br>{} 大括号<br>[] 中括号<br>() 小括号<br># 井号<br>+ 加号<br>- 减号<br>. 英文句号<br>! 感叹号</p><h2 id="十三、表格"><a href="#十三、表格" class="headerlink" title="十三、表格"></a>十三、表格</h2><p>第一种</p><table><thead><tr><th>name</th><th>age</th><th>sex</th></tr></thead><tbody><tr><td>kobe</td><td>8</td><td>man</td></tr><tr><td>bryant</td><td>24</td><td>man</td></tr></tbody></table><p>第二种【推荐使用】</p><table><thead><tr><th>name</th><th>age</th></tr></thead><tbody><tr><td>kobe</td><td>8</td></tr><tr><td>bryant</td><td>24</td></tr></tbody></table><h2 id="十四、进阶教程："><a href="#十四、进阶教程：" class="headerlink" title="十四、进阶教程："></a>十四、进阶教程：</h2><h4 id="1、更改字体、字号、颜色"><a href="#1、更改字体、字号、颜色" class="headerlink" title="1、更改字体、字号、颜色"></a>1、更改字体、字号、颜色</h4><p>Markdown 通过简单标记语法，使普通文本内容具有一定格式。但它本身不支持修改字体、字号与颜色等功能的。CSDN-markdown 编辑器是其衍生版本，支持基于 PageDown ( Stack Overflow）所使用的编辑器的扩展功能（如表格、脚注、内嵌HTML、内嵌 LaTeX 等等）。<br>Size：规定文本的尺寸大小，取值从 1 到 7 ，浏览器默认值是 3.</p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="red">我是红色</font><br><font color="#008000">我是绿色</font><br><font color="Blue">我是蓝色</font><br><font size="5">我是尺寸</font><br><font face="黑体" color="green" size="5">我是黑体，绿色，尺寸为5</font><h4 id="2、为文字添加背景色"><a href="#2、为文字添加背景色" class="headerlink" title="2、为文字添加背景色"></a>2、为文字添加背景色</h4><p>由于 style 标签和标签的 style 属性不被支持，所以这里只能是借助 table, tr, td 等表格标签的 bgcolor 属性来实现背景色。故这里对于文字背景色的设置，只是将那一整行看作一个表格，更改了那个格子的背景色（bgcolor）</p><p style="background-color:yellow">背景色yellow</p><h4 id="3、设置图片大小"><a href="#3、设置图片大小" class="headerlink" title="3、设置图片大小"></a>3、设置图片大小</h4><h5 id="1-更改图片百分比"><a href="#1-更改图片百分比" class="headerlink" title="1. 更改图片百分比"></a>1. 更改图片百分比</h5><p><img src="http://pic11.photophoto.cn/20090626/0036036341009653_b.jpg" width="50%" height="50%"></p><h5 id="2-更改图片像素值"><a href="#2-更改图片像素值" class="headerlink" title="2.更改图片像素值"></a>2.更改图片像素值</h5><p><img src="http://pic11.photophoto.cn/20090626/0036036341009653_b.jpg" width="251" height="350"></p><h5 id="3-图片居左"><a href="#3-图片居左" class="headerlink" title="3.图片居左"></a>3.图片居左</h5><div align="left"><img src="http://pic11.photophoto.cn/20090626/0036036341009653_b.jpg" width="50%" height="50%"></div><p>ps：right、left 、center</p><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><pre class=" language-shell"><code class="language-shell">layout  布局title 标题date  建立日期  文件建立日期updated 更新日期  文件更新日期comments  开启文章的评论功能 truetags  标签（不适用于分页）categories  分类（不适用于分页）permalink 覆盖文章网址author:         作者img:            图片展示top: true       推荐文章cover: true     首页推荐文章coverImg:       首页轮播封面需要显示的图片路径password:       密码toc: false      文章目录mathjax: false 是否开启数学公式支持summary:        文章的特殊内容的配置,没有的话按默认设置来！categories: 分类tags:  标签</code></pre><h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><p><a href="#"><img src="https://img.shields.io/badge/version-1.0.0-green.svg?style=flat-square" alt="Version"></a><br><a href="https://minhow.com" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/author-MinHow-blue.svg?style=flat-square" alt="Author"></a></p><p><a href="https://hexo.io" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/hexo-3.0+-green.svg?style=flat-square" alt="Hexo"></a><br><a href="https://nodejs.org/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/node.js-6.0+-green.svg?style=flat-square" alt="node.js"></a></p><h2 id="主题特点"><a href="#主题特点" class="headerlink" title="主题特点"></a>主题特点</h2><ul><li style="list-style: none"><input type="checkbox" checked> 原生JavaScript实现，去jQuery化</li><li style="list-style: none"><input type="checkbox" checked> 样式支持CSS预处理器Less，方便主题自定义</li><li style="list-style: none"><input type="checkbox" checked> 文章过期提醒功能</li><li style="list-style: none"><input type="checkbox" checked> 文章阅读进度条</li><li style="list-style: none"><input type="checkbox" checked> 网站公告功能</li><li style="list-style: none"><input type="checkbox" checked> 首页图片懒加载</li><li style="list-style: none"><input type="checkbox" checked> 首页文章缩略图自动检索文章内图片，支持自动随机图片</li><li style="list-style: none"><input type="checkbox" checked> 主题支持响应式</li><li style="list-style: none"><input type="checkbox" checked> 支持3D云标签</li><li style="list-style: none"><input type="checkbox" checked> 支持文章推送和文章打赏</li><li style="list-style: none"><input type="checkbox" checked> 站内本地搜索和谷歌搜索</li><li style="list-style: none"><input type="checkbox" checked> 支持多个第三方评论系统</li><li style="list-style: none"><input type="checkbox" checked> 支持网站统计和不蒜子访客统计</li><li style="list-style: none"><input type="checkbox" checked> 移动端的简洁设计</li><li style="list-style: none"><input type="checkbox" checked> 支持代码高亮并支持自定义高亮样式</li><li style="list-style: none"><input type="checkbox" checked> 支持Shell脚本通过Travis CI自动化部署Hexo博客</li><li style="list-style: none"><input type="checkbox" checked> 支持Hexo自动化部署结果发送邮件和实时推送到钉钉</li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span></code></pre><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><a href="https://xaoxuu.com/blog/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/我的个人博客-https://xaoxuu.com/blog/-green.svg?colorA=888&amp;colorB=52A1F8&amp;longCache=true&amp;style=popout-square" alt></a></p><p><a href="https://mxclub.github.io/example/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/一个开源的示例博客-https://mxclub.github.io/example/-green.svg?colorA=888&amp;colorB=52A1F8&amp;longCache=true&amp;style=popout-square" alt></a></p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/文档-https://xaoxuu.com/wiki/material--x/-green.svg?colorA=888&amp;colorB=52A1F8&amp;longCache=true&amp;style=popout-square" alt></a></p><p><a href="#"><img src="https://img.shields.io/badge/version-1.0.0-green.svg?style=flat-square" alt="Version"></a><a href="https://minhow.com" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/author-MinHow-blue.svg?style=flat-square" alt="Author"></a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写作页面的创建！</title>
      <link href="/2019/03/14/da-jian/xie-zuo-zuo/"/>
      <url>/2019/03/14/da-jian/xie-zuo-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="这是测试页面"><a href="#这是测试页面" class="headerlink" title="这是测试页面"></a>这是测试页面</h2><p><code>git config --global credential.helper wincred</code></p><p><code>git clone 页面地址</code></p><ul><li>hexo new   “写 作” //写作</li><li>hexo draft “草 稿” //草稿</li></ul><p>$ npm i -S hexo-prism-pluginnpm i -S hexo-prism-plugin</p><p>首先，你应该编辑你的_config.yml通过添加以下配置。</p><pre class=" language-shell"><code class="language-shell">prism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'default'  line_number: false    # default false  custom_css: 'path/to/your/custom.css'     # optional</code></pre><p>在那之后，检查highlight选择_config.yml。确保默认代码高亮插件被禁用。</p><pre class=" language-shell"><code class="language-shell">highlight:  enable: false</code></pre><p>最后，通过运行以下命令来清理和重新生成项目：</p><pre><code>&gt; hexo clean&gt; hexo generate</code></pre>]]></content>
      
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由系统自动生成的一篇文章</title>
      <link href="/2019/03/13/hello-world/"/>
      <url>/2019/03/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎光临<a href="https://13469940053.github.io/" target="_blank" rel="noopener">我的博客</a>! 这是我的的第一篇文章。</p><h2 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h2><h1 id="由系统自动生成"><a href="#由系统自动生成" class="headerlink" title="由系统自动生成"></a>由系统自动生成</h1><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>详细信息: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>详细信息: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>详细信息: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab CI/CD 介绍和使用</title>
      <link href="/2018/11/22/ruan-jian-gong-ju/devops/gitlab-ci-jie-shao-he-shi-yong/"/>
      <url>/2018/11/22/ruan-jian-gong-ju/devops/gitlab-ci-jie-shao-he-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="一、持续集成介绍"><a href="#一、持续集成介绍" class="headerlink" title="一、持续集成介绍"></a>一、持续集成介绍</h2><blockquote><p>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试)来验证，从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚的软件。—— Martin Fowler</p></blockquote><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h3><ul><li><strong>持续集成</strong>(<code>Continuous Integration</code>)：<strong>频繁地(一天多次)将代码集成到主干。</strong>让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。“持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”</li><li><strong>持续交付</strong>(<code>Continuous Delivery</code>)：<strong>频繁地将软件的新版本，交付给质量团队或者用户，以供评审。</strong>如果评审通过，代码就进入生产阶段。持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。</li><li><strong>持续部署</strong>(<code>continuous Deployment</code>)：<strong>代码通过评审以后，自动部署到生产环境。</strong>是持续部署是持续交付的下一步，持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</li></ul><h3 id="2-持续集成的好处"><a href="#2-持续集成的好处" class="headerlink" title="2 持续集成的好处"></a>2 持续集成的好处</h3><ul><li><strong>自动化构建且状态对每个人可见</strong>。可以使用<code>Maven</code>、<code>Gradle</code>等来实现自动化构建，可以在构建过程中实现自动化测试（前提是有写单元测试用例）。集成服务器在持续集成过程中发现问题可以及时发送警告给相关的干系人。</li><li><strong>解放了重复性劳动。</strong>自动化部署工作可以解放集成、测试、部署等重复性劳动，而机器集成的频率明显比手工高很多。</li><li><strong>更快地发现和修复问题。</strong>持续集成更早的获取变更，更早的进入测试，更早的发现问题，解决问题的成本显著下降。</li><li><strong>更快的交付成果。</strong>更早发现错误减少解决错误所需的工作量。集成服务器在构建环节发现错误可以及时通知开发人员修复。集成服务器在部署环节发现错误可以回退到上一版本，服务器始终有一个可用的版本。</li><li><strong>减少手工的错误。</strong>在重复性动作上，人容易犯错，而机器犯错的几率几乎为零。</li><li><strong>减少了等待时间。</strong>缩短了从开发、集成、测试、部署各个环节的时间，从而也就缩短了中间可以出现的等待时机。持续集成，意味着开发、集成、测试、部署也得以持续。</li><li><strong>更高的产品质量。</strong>集成服务器往往提供代码质量检测等功能，对不规范或有错误的地方会进行标致，也可以设置邮件和短信等进行警告。</li></ul><h3 id="3-常用持续集成工具"><a href="#3-常用持续集成工具" class="headerlink" title="3 常用持续集成工具"></a>3 常用持续集成工具</h3><ul><li><a href="https://jenkins.io/" target="_blank" rel="noopener">Jenkins</a></li><li><a href="https://docs.gitlab.com/ee/ci/README.html" target="_blank" rel="noopener">GitLab CI</a></li><li><a href="https://www.jetbrains.com/teamcity/" target="_blank" rel="noopener">TeamCity</a></li><li><a href="https://www.travis-ci.org/" target="_blank" rel="noopener">Travis CI</a></li><li><a href="https://www.atlassian.com/software/bamboo" target="_blank" rel="noopener">Bamboo</a></li><li><a href="https://circleci.com/" target="_blank" rel="noopener">CircleCI</a></li><li>…</li></ul><h2 id="二、Gitlab-持续集成"><a href="#二、Gitlab-持续集成" class="headerlink" title="二、Gitlab 持续集成"></a>二、Gitlab 持续集成</h2><p><img src="https://docs.gitlab.com/ee/ci/img/cicd_pipeline_infograph.png" alt="GitLab CI/CD"></p><h3 id="1-概念介绍"><a href="#1-概念介绍" class="headerlink" title="1 概念介绍"></a>1 概念介绍</h3><h4 id="1-GitLab"><a href="#1-GitLab" class="headerlink" title="(1) GitLab"></a>(1) GitLab</h4><p><a href="https://about.gitlab.com/" target="_blank" rel="noopener">GitLab</a> 是一个利用<code>Ruby on Rails</code>开发的开源应用程序，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。它拥有与<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。</p><h4 id="2-GitLab-CI-CD"><a href="#2-GitLab-CI-CD" class="headerlink" title="(2) GitLab CI/CD"></a>(2) GitLab CI/CD</h4><p><a href="https://docs.gitlab.com/ee/ci/README.html" target="_blank" rel="noopener">GitLab CI/CD</a> 是<code>GitLab Continuous Integration</code>（Gitlab持续集成）的简称。GitLab 自<code>GitLab 8.0</code>开始提供了持续集成的功能，且对所有项目默认开启。只要在项目仓库的根目录添加<code>.gitlab-ci.yml</code>文件，并且配置了Runner（运行器），那么每一次<code>push</code>或者合并请求（<code>Merge Request</code>）都会触发<a href="https://docs.gitlab.com/ce/ci/pipelines.html" target="_blank" rel="noopener">CI Pipeline</a>。</p><h4 id="3-GitLab-Runner"><a href="#3-GitLab-Runner" class="headerlink" title="(3) GitLab Runner"></a>(3) GitLab Runner</h4><p><a href="https://docs.gitlab.com/runner/" target="_blank" rel="noopener">GitLab Runner</a> <code>GitLab Runner</code>是一个开源项目，可以运行在 GNU / Linux，macOS 和 Windows 操作系统上。每次<code>push</code>的时候 GitLab CI 会根据<code>.gitlab-ci.yml</code>配置文件运行你流水线（<code>Pipeline</code>）中各个阶段的任务（<code>Job</code>），并将结果发送回 GitLab。GitLab Runner 是基于 Gitlab CI 的 API 进行构建的相互隔离的机器（或虚拟机）。GitLab Runner 不需要和 Gitlab 安装在同一台机器上，且考虑到 GitLab Runner 的资源消耗问题和安全问题，也不建议这两者安装在同一台机器上。</p><p>Gitlab Runner 分为三种：</p><ul><li>共享Runner(<code>Shared runners</code>)</li><li>专享Runner(<code>Specific runners</code>)</li><li>分组Runner(<code>Group Runners</code>)</li></ul><h4 id="4-Pipelines"><a href="#4-Pipelines" class="headerlink" title="(4) Pipelines"></a>(4) Pipelines</h4><p><a href="https://docs.gitlab.com/ce/ci/pipelines.html" target="_blank" rel="noopener">Pipelines</a> 中文称为流水线，是分阶段执行的构建任务。如：安装依赖、运行测试、打包、部署开发服务器、部署生产服务器等流程。每一次<code>push</code>或者<code>Merge Request</code>都会触发生成一条新的Pipeline。</p><p>下面是流水线示例图：</p><p><img src="https://docs.gitlab.com/ce/ci/img/pipelines_index.png" alt="Pipeline Status"></p><h4 id="5-Stages"><a href="#5-Stages" class="headerlink" title="(5) Stages"></a>(5) Stages</h4><p><a href="https://docs.gitlab.com/ce/ci/yaml/README.html#stages" target="_blank" rel="noopener">Stages</a> 表示构建阶段，可以理解为上面所说“安装依赖”、“运行测试”等环节的流程。我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点：</p><ul><li>所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始（当然可以在<code>.gitlab-ci.yml</code>文件中配置上一阶段失败时下一阶段也执行）</li><li>只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功</li><li>如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败</li></ul><p>下面是一个流水线内的阶段任务示例图：</p><p><img src="https://docs.gitlab.com/ce/ci/img/pipelines.png" alt="Job Status"></p><h4 id="6-Jobs"><a href="#6-Jobs" class="headerlink" title="(6) Jobs"></a>(6) Jobs</h4><p><a href="https://docs.gitlab.com/ce/ci/pipelines.html#jobs" target="_blank" rel="noopener">Jobs</a> 表示构建的作业（或称之为任务），表示某个 Stage 里面执行的具体任务。我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点：</p><ul><li>相同 Stage 中的 Jobs 无执行顺序要求，会并行执行</li><li>相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功</li><li>如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 也失败（可以在<code>.gitlab-ci.yml</code>文件中配置允许某 Job 可以失败，也算该 Stage 成功）</li></ul><h4 id="7-gitlab-ci-yml"><a href="#7-gitlab-ci-yml" class="headerlink" title="(7) .gitlab-ci.yml"></a>(7) .gitlab-ci.yml</h4><p>GitLab 中默认开启了 Gitlab CI/CD 的支持，且使用<a href="http://yaml.org/" target="_blank" rel="noopener">YAML</a>文件<a href="https://docs.gitlab.com/ee/ci/yaml/README.html#examples" target="_blank" rel="noopener">.gitlab-ci.yml</a>来管理项目构建配置。该文件需要存放于项目仓库的根目录（默认路径，可在 GitLab 中修改），它定义该项目的 CI/CD 如何配置。所以，我们只需要在<code>.gitlab-ci.yml</code>配置文件中定义流水线的各个阶段，以及各个阶段中的若干作业（任务）即可。</p><p>下面是<code>.gitlab-ci.yml</code>文件的一个简单的<code>Hello World</code>示例：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 定义 test 和 package 两个 Stages</span><span class="token key atrule">stages</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> test  <span class="token punctuation">-</span> package<span class="token comment" spellcheck="true"># 定义 package 阶段的一个 job</span><span class="token key atrule">package-job</span><span class="token punctuation">:</span>  <span class="token key atrule">stage</span><span class="token punctuation">:</span> package  <span class="token key atrule">script</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> echo "Hello<span class="token punctuation">,</span> package<span class="token punctuation">-</span>job"    <span class="token punctuation">-</span> echo "I am in package stage"<span class="token comment" spellcheck="true"># 定义 test 阶段的一个 job</span><span class="token key atrule">test-job</span><span class="token punctuation">:</span>  <span class="token key atrule">stage</span><span class="token punctuation">:</span> test  <span class="token key atrule">script</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> echo "Hello<span class="token punctuation">,</span> test<span class="token punctuation">-</span>job"    <span class="token punctuation">-</span> echo "I am in test stage"</code></pre><p>以上配置中，用 stages 关键字来定义 Pipeline 中的各个构建阶段，然后用一些非关键字来定义 jobs。每个 job 中可以可以再用 stage 关键字来指定该 job 对应哪个 stage。job 里面的<code>script</code>关键字是每个 job 中必须要包含的，它表示每个 job 要执行的命令。</p><blockquote><p><strong>注</strong>：猜猜上面例子的运行结果？</p></blockquote><h4 id="8-Badges"><a href="#8-Badges" class="headerlink" title="(8) Badges"></a>(8) Badges</h4><p><a href="https://docs.gitlab.com/ce/ci/pipelines.html#badges" target="_blank" rel="noopener">Badges</a> 即：<strong>徽章</strong>，当 Pipelines 执行过程中或者执行完成时会生成徽章，你可以将这些徽章加入到你的<code>README.md</code>文件中，便于从仓库主页看到最新的构建状态。</p><p>徽章的链接形如下：</p><pre class=" language-bash"><code class="language-bash">http://example.gitlab.com/namespace/project/badges/branch/build.svg </code></pre><p>我们用 GitLab 项目的徽章作为例子，效果如下：</p><p><img src="https://gitlab.com/gitlab-org/gitlab-ce/badges/master/build.svg" alt="Gitlab build badges"> <img src="https://gitlab.com/gitlab-org/gitlab-ce/badges/master/coverage.svg?job=coverage" alt="Gitlab coverage badges"></p><h3 id="2-安装-GitLab-Runner"><a href="#2-安装-GitLab-Runner" class="headerlink" title="2 安装 GitLab Runner"></a>2 安装 GitLab Runner</h3><p><a href="https://docs.gitlab.com/runner/install/index.html" target="_blank" rel="noopener">这里</a>有 GitLab Runner安装相关的资源和文档可供大家参考。以下仅以咱们公司常用的<code>Centos</code>为例来做安装说明。</p><h4 id="1-在线安装"><a href="#1-在线安装" class="headerlink" title="(1) 在线安装"></a>(1) 在线安装</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 添加官方的repo.</span>curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span><span class="token comment" spellcheck="true"># yum 安装Gtilab Runner.</span><span class="token function">sudo</span> yum <span class="token function">install</span> gitlab-runner</code></pre><h4 id="2-离线安装"><a href="#2-离线安装" class="headerlink" title="(2) 离线安装"></a>(2) 离线安装</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装Git</span><span class="token function">sudo</span> yum –y <span class="token function">install</span> <span class="token function">git</span><span class="token comment" spellcheck="true"># rpm离线安装事先下载好的 Gitlab Runner rpm包.</span>rpm -ivh gitlab-runner-10.5.0-1.x86_64.rpm</code></pre><blockquote><p><strong>注</strong>：Gitlab Runner 依赖了<code>Git</code>，所以，离线安装 Gitlab Runner 之前得首先安装Git，离线安装包可以从<a href="https://packages.gitlab.com/runner/gitlab-runner" target="_blank" rel="noopener">这里</a>下载。</p></blockquote><h3 id="3-注册-Gitlab-Runner"><a href="#3-注册-Gitlab-Runner" class="headerlink" title="3 注册 Gitlab Runner"></a>3 注册 Gitlab Runner</h3><p>安装了 GitLab Runner 之后,就可以为 GitLab 中的仓库<a href="https://docs.gitlab.com/runner/register/index.html" target="_blank" rel="noopener">注册一个 Runner</a>，注册的交互式命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> gitlab-runner register</code></pre><p>命令的交互式的过程如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 输入注册命令</span><span class="token function">sudo</span> gitlab-runner register<span class="token comment" spellcheck="true"># 输入公司的 GitLab 网站地址</span>Please enter the gitlab-ci coordinator URL <span class="token punctuation">(</span>e.g. https://gitlab.com <span class="token punctuation">)</span>http://gitlab.xxxx.com/<span class="token comment" spellcheck="true"># 你项目仓库的token，token可以在 Settings -> CI/CD -> Runners settings 中找到.</span>Please enter the gitlab-ci token <span class="token keyword">for</span> this runnerxxx<span class="token comment" spellcheck="true"># 输入描述这个 runner 的名称</span>Please enter the gitlab-ci description <span class="token keyword">for</span> this runner<span class="token punctuation">[</span>hostame<span class="token punctuation">]</span> my-runner<span class="token comment" spellcheck="true"># 输入 runner 的标签</span>Please enter the gitlab-ci tags <span class="token keyword">for</span> this runner <span class="token punctuation">(</span>comma separated<span class="token punctuation">)</span>:my-tag,another-tag<span class="token comment" spellcheck="true"># 输入 runner 的执行器.</span>Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:shell</code></pre><p>以上流程注册成功之后，就可以在你的项目仓库中 <code>Settings</code> -&gt; <code>CI/CD</code> -&gt; <code>Runners settings</code> 看到这个 Runner 了。</p><h3 id="4-Gitlab-Runner-常用命令汇总"><a href="#4-Gitlab-Runner-常用命令汇总" class="headerlink" title="4 Gitlab Runner 常用命令汇总"></a>4 Gitlab Runner 常用命令汇总</h3><p>下面的表格中列出了一些常用的<a href="https://docs.gitlab.com/runner/commands/README.html#gitlab-runner-list" target="_blank" rel="noopener">Gitlab Runner命令</a>，以供参考：</p><table><thead><tr><th>命令</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>gitlab-runner run</td><td style="text-align:left">运行一个runner服务</td></tr><tr><td>gitlab-runner register</td><td style="text-align:left">注册一个新的runner</td></tr><tr><td>gitlab-runner start</td><td style="text-align:left">启动服务</td></tr><tr><td>gitlab-runner stop</td><td style="text-align:left">关闭服务</td></tr><tr><td>gitlab-runner restart</td><td style="text-align:left">重启服务</td></tr><tr><td>gitlab-runner status</td><td style="text-align:left">查看各个runner的状态</td></tr><tr><td>gitlab-runner unregister</td><td style="text-align:left">注销掉某个runner</td></tr><tr><td>gitlab-runner list</td><td style="text-align:left">显示所有运行着的runner</td></tr><tr><td>gitlab-runner verify</td><td style="text-align:left">检查已注册的运行程序是否可以连接到GitLab，但它不验证GitLab Runner服务是否正在使用运行程序。</td></tr></tbody></table><h2 id="三、一个Web项目-CI-CD-简单示例"><a href="#三、一个Web项目-CI-CD-简单示例" class="headerlink" title="三、一个Web项目 CI/CD 简单示例"></a>三、一个Web项目 CI/CD 简单示例</h2><p>接下来，用一个实际项目来演示 GitLab CI/CD 的配置和使用，其中主要包括：编译测试、项目打包、部署服务、Sonar手动检查、Sonar定时检查五个阶段。</p><p>下面用一个传统的 Java web 项目(这里称之为<code>cidemo</code>)和<code>Tomcat</code>来作为示例，并用来展示常用配置的使用。当我每次<code>push</code>代码或者<code>Merge Request</code>时，都会生成一条流水线，且会自动执行我们上面所说的一些阶段，而Sonar手动检查我们设置为手动操作，且再额外配置Sonar定时检查的任务。</p><blockquote><p><strong>注</strong>：我 Gitlab Runner 是安装在<code>Centos</code>环境中，并使用的<code>shell</code>执行器。</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 定义stages</span><span class="token key atrule">stages</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> test  <span class="token punctuation">-</span> install  <span class="token punctuation">-</span> run  <span class="token punctuation">-</span> sonar<span class="token comment" spellcheck="true"># 定义安装包的存放位置和Tomcat服务器的地址的变量，便于后续部署使用.</span><span class="token key atrule">variables</span><span class="token punctuation">:</span>  <span class="token key atrule">CIDEMO_PACKAGE_DIR</span><span class="token punctuation">:</span> <span class="token string">'/home/gitlab-runner/packages/cidemo/'</span>  <span class="token key atrule">SERVER_HOME_DIR</span><span class="token punctuation">:</span> <span class="token string">'/home/gitlab-runner/tomcat/cidemo-tomcat/'</span><span class="token comment" spellcheck="true">###################### 构建编译和单元测试的job. #######################</span><span class="token key atrule">编译测试任务</span><span class="token punctuation">:</span>  <span class="token key atrule">stage</span><span class="token punctuation">:</span> test  <span class="token key atrule">only</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> branches  <span class="token key atrule">script</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> mvn clean test<span class="token comment" spellcheck="true">###################### Maven安装得到war包的job. #######################</span><span class="token key atrule">打包任务</span><span class="token punctuation">:</span>  <span class="token key atrule">stage</span><span class="token punctuation">:</span> install  <span class="token key atrule">only</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> develop  <span class="token key atrule">script</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> mvn install    <span class="token punctuation">-</span> echo '准备将最新的war包复制、保存到某个目录里面供后续使用.'    <span class="token punctuation">-</span> rm <span class="token punctuation">-</span>rf $CIDEMO_PACKAGE_DIR/*.war    <span class="token punctuation">-</span> cp target/*.war $CIDEMO_PACKAGE_DIR/cidemo.war<span class="token comment" spellcheck="true">####################### 部署运行war包的job. #######################</span><span class="token key atrule">部署运行任务</span><span class="token punctuation">:</span>  <span class="token key atrule">stage</span><span class="token punctuation">:</span> run  <span class="token key atrule">only</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> develop  <span class="token key atrule">script</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> echo '准备部署和运行war包！(为了方便部署到了Tomcat中运行)'    <span class="token punctuation">-</span> cd $SERVER_HOME_DIR    <span class="token punctuation">-</span> sh bin/shutdown.sh    <span class="token punctuation">-</span> rm <span class="token punctuation">-</span>rf webapps/cidemo.war    <span class="token punctuation">-</span> cp $CIDEMO_PACKAGE_DIR/cidemo.war $SERVER_HOME_DIR/webapps/cidemo.war    <span class="token punctuation">-</span> nohup sh ./bin/startup.sh <span class="token punctuation">></span> logs/cidemo_nohup.log 2<span class="token punctuation">></span><span class="token important">&amp;1</span> &amp;<span class="token comment" spellcheck="true">###################### Sonar手动构建的job. #######################</span><span class="token key atrule">Sonar手动检查</span><span class="token punctuation">:</span>  <span class="token key atrule">stage</span><span class="token punctuation">:</span> sonar  <span class="token key atrule">when</span><span class="token punctuation">:</span> manual  <span class="token key atrule">only</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> develop  <span class="token key atrule">script</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> echo '准备对项目代码做sonar的质量检查！'    <span class="token punctuation">-</span> mvn compile &amp;&amp; mvn sonar<span class="token punctuation">:</span>sonar <span class="token punctuation">-</span>Dsonar.host.url=http<span class="token punctuation">:</span>//172.16.34.102<span class="token punctuation">:</span>9000 <span class="token punctuation">-</span>Dsonar.login=497a0e0e2fc07f64c4b54edc17bb47dfa251ba34<span class="token comment" spellcheck="true">###################### Sonar每晚定时构建的job. #######################</span><span class="token key atrule">Sonar定时检查</span><span class="token punctuation">:</span>  <span class="token key atrule">stage</span><span class="token punctuation">:</span> sonar  <span class="token key atrule">only</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> schedules  <span class="token key atrule">script</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> echo '开始定时对项目代码做sonar的质量检查！'    <span class="token punctuation">-</span> mvn compile &amp;&amp; mvn sonar<span class="token punctuation">:</span>sonar <span class="token punctuation">-</span>Dsonar.host.url=http<span class="token punctuation">:</span>//172.16.34.102<span class="token punctuation">:</span>9000 <span class="token punctuation">-</span>Dsonar.login=497a0e0e2fc07f64c4b54edc17bb47dfa251ba34</code></pre><h2 id="四、Gitlab-CI-CD-yaml-常用配置介绍"><a href="#四、Gitlab-CI-CD-yaml-常用配置介绍" class="headerlink" title="四、Gitlab CI/CD yaml 常用配置介绍"></a>四、Gitlab CI/CD yaml 常用配置介绍</h2><p>开始构建之前<code>.gitlab-ci.yml</code>文件定义了一系列带有约束说明的任务。这些任务都是以任务名开始并且至少要包含script部分，<code>.gitlab-ci.yml</code>允许指定无限量 jobs。每个 jobs 必须有一个唯一的名字，且名字不能是下面列出的保留字段：</p><ul><li><code>image</code></li><li><code>services</code></li><li><code>stages</code></li><li><code>types</code></li><li><code>before_script</code></li><li><code>after_script</code></li><li><code>variables</code></li><li><code>cache</code></li></ul><p>job由一列参数来定义 jobs 的行为：</p><table><thead><tr><th>Keyword</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>script</td><td>yes</td><td>Runner执行的命令或脚本</td></tr><tr><td>extends</td><td>no</td><td>定义此作业将继承的配置条目</td></tr><tr><td>image</td><td>no</td><td>所使用的docker镜像，查阅<a href="https://docs.gitlab.com/ce/ci/docker/using_docker_images.html#define-image-and-services-from-gitlab-ciyml" target="_blank" rel="noopener">使用docker镜像</a></td></tr><tr><td>services</td><td>no</td><td>所使用的docker服务，查阅<a href="https://docs.gitlab.com/ce/ci/docker/using_docker_images.html#define-image-and-services-from-gitlab-ciyml" target="_blank" rel="noopener">使用docker镜像</a></td></tr><tr><td>stage</td><td>no</td><td>定义job stage（默认：<code>test</code>）</td></tr><tr><td>type</td><td>no</td><td><code>stage</code>的别名（已弃用）</td></tr><tr><td>variables</td><td>no</td><td>定义job级别的变量</td></tr><tr><td>only</td><td>no</td><td>定义一列git分支，并为其创建job</td></tr><tr><td>except</td><td>no</td><td>定义一列git分支，不创建job</td></tr><tr><td>tags</td><td>no</td><td>定义一列tags，用来指定选择哪个Runner（同时Runner也要设置tags）</td></tr><tr><td>allow_failure</td><td>no</td><td>允许job失败。失败的job不影响commit状态</td></tr><tr><td>when</td><td>no</td><td>定义何时开始job。可以是<code>on_success</code>，<code>on_failure</code>，<code>always</code>或者<code>manual</code></td></tr><tr><td>dependencies</td><td>no</td><td>定义job依赖关系，这样他们就可以互相传递artifacts</td></tr><tr><td>cache</td><td>no</td><td>定义应在后续运行之间缓存的文件列表</td></tr><tr><td>before_script</td><td>no</td><td>重写一组在作业前执行的命令</td></tr><tr><td>after_script</td><td>no</td><td>重写一组在作业后执行的命令</td></tr><tr><td>environment</td><td>no</td><td>定义此作业完成部署的环境名称</td></tr><tr><td>coverage</td><td>no</td><td>定义给定作业的代码覆盖率设置</td></tr><tr><td>etry</td><td>no</td><td>定义在发生故障时可以自动重试作业的时间和次数</td></tr><tr><td>parallel</td><td>no</td><td>定义应并行运行的作业实例数</td></tr></tbody></table><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><blockquote><p>是在 GitLab 11.3 中引入的。</p></blockquote><p><code>extends</code>定义了一个使用<code>extends</code>的作业将继承的条目名称。它是使用<a href="https://docs.gitlab.com/ee/ci/yaml/README.html#anchors" target="_blank" rel="noopener">YAML锚点</a>的替代方案，并且更加灵活和可读：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">.tests</span><span class="token punctuation">:</span>  <span class="token key atrule">script</span><span class="token punctuation">:</span> rake test  <span class="token key atrule">stage</span><span class="token punctuation">:</span> test  <span class="token key atrule">only</span><span class="token punctuation">:</span>    <span class="token key atrule">refs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> branches<span class="token key atrule">rspec</span><span class="token punctuation">:</span>  <span class="token key atrule">extends</span><span class="token punctuation">:</span> .tests  <span class="token key atrule">script</span><span class="token punctuation">:</span> rake rspec  <span class="token key atrule">only</span><span class="token punctuation">:</span>    <span class="token key atrule">variables</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> $RSPEC</code></pre><p>在上面的示例中，<code>rspec</code>作业继承自<code>.tests</code>模板作业。 GitLab 将根据键执行反向深度合并。 GitLab将：</p><ul><li>将<code>rspec</code>内容以递归方式合并到<code>.tests</code>中。</li><li>不合并键的值。</li></ul><p>这实际生成的是以下<code>rspec</code>作业：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">rspec</span><span class="token punctuation">:</span>  <span class="token key atrule">script</span><span class="token punctuation">:</span> rake rspec  <span class="token key atrule">stage</span><span class="token punctuation">:</span> test  <span class="token key atrule">only</span><span class="token punctuation">:</span>    <span class="token key atrule">refs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> branches    <span class="token key atrule">variables</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> $RSPEC</code></pre><blockquote><p><strong>注</strong>: <code>rake test</code>已被<code>rake rspec</code>脚本覆盖。</p></blockquote><h3 id="image-和-services"><a href="#image-和-services" class="headerlink" title="image 和 services"></a>image 和 services</h3><p>这两个关键字允许使用一个自定义的 Docker 镜像和一系列的服务，并且可以用于整个 job 周期。详细配置文档请查看<a href="https://docs.gitlab.com/ee/ci/docker/README.html" target="_blank" rel="noopener">a separate document</a>。</p><h3 id="before-script-和-after-script"><a href="#before-script-和-after-script" class="headerlink" title="before_script 和 after_script"></a>before_script 和 after_script</h3><p><code>before_script</code>用来定义所有 job 之前运行的命令，<code>after_script</code>用来定义所有 job 之后运行的命令。它们可以是一个数组或者是多行字符串。</p><h3 id="stages"><a href="#stages" class="headerlink" title="stages"></a>stages</h3><p>stages 用来定义可以被 job 调用的 stages。stages 的规范允许有灵活的多级 pipelines。</p><p>stages中的元素顺序决定了对应job的执行顺序：</p><ol><li>相同 stage 的 job 可以平行执行。</li><li>下一个 stage 的 job 会在前一个 stage 的 job 成功后开始执行。</li></ol><p>接下仔细看看这个例子，它包含了3个 stage：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">stages</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> build <span class="token punctuation">-</span> test <span class="token punctuation">-</span> deploy</code></pre><ol><li>首先，所有 build 的 jobs 都是并行执行的。</li><li>所有 build 的 jobs 执行成功后，test 的 jobs 才会开始并行执行。</li><li>所有 test 的 jobs 执行成功，deploy 的 jobs 才会开始并行执行。</li><li>所有的 deploy 的 jobs 执行成功，<code>commit</code>才会标记为<code>success</code>。</li><li>任何一个前置的 jobs 失败了，<code>commit</code>会标记为<code>failed</code>并且下一个 stages 的 jobs 都不会执行。</li></ol><p>这有两个特殊的例子值得一提：</p><ol><li>如果<code>.gitlab-ci.yml</code>中没有定义stages，那么 job’s stages 会默认定义为<code>build</code>，<code>test</code>和<code>deploy</code>。</li><li>如果一个 job 没有指定 stage，那么这个任务会分配到 test stage。</li></ol><h3 id="only-和-except"><a href="#only-和-except" class="headerlink" title="only 和 except"></a>only 和 except</h3><p><code>only</code>和<code>except</code>是两个参数用分支策略来限制 jobs 构建：</p><ul><li><code>only</code>定义哪些分支和标签的git项目将会被job执行。</li><li><code>except</code>定义哪些分支和标签的git项目将不会被job执行。</li></ul><p>下面是refs策略的使用规则：</p><ul><li>only 和 except 可同时使用。如果<code>only</code>和<code>except</code>在一个 job 配置中同时存在，则以 only 为准，跳过 except(从下面示例中得出)。</li><li>only 和 except 可以使用正则表达式。</li><li>only 和 except 允许使用特殊的关键字：<code>branches</code>，<code>tags</code>和<code>triggers</code>。</li><li>only 和 except 允许使用指定仓库地址但不是forks的仓库(查看示例3)。</li></ul><p>在下面这个例子中，job 将只会运行以<code>issue-</code>开始的refs(分支)，然而<code>except</code>中设置将被跳过。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">job</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># use regexp</span>  <span class="token key atrule">only</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /^issue<span class="token punctuation">-</span>.*$/  <span class="token comment" spellcheck="true"># use special keyword</span>  <span class="token key atrule">except</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> branches</code></pre><p>在下面这个例子中，job 将只会执行有<code>tags</code>的refs，或者通过<code>API</code>触发器明确地请求构建。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">job</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># use special keywords</span>  <span class="token key atrule">only</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> tags    <span class="token punctuation">-</span> triggers</code></pre><p>下面这个例子将会为所有的分支执行job，但 master 分支除外。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">job</span><span class="token punctuation">:</span>  <span class="token key atrule">only</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> branches@gitlab<span class="token punctuation">-</span>org/gitlab<span class="token punctuation">-</span>ce  <span class="token key atrule">except</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> master@gitlab<span class="token punctuation">-</span>org/gitlab<span class="token punctuation">-</span>ce</code></pre><h3 id="variables"><a href="#variables" class="headerlink" title="variables"></a>variables</h3><p>GItLab CI 允许在<code>.gitlab-ci.yml</code>文件中添加变量，并在 job 环境中起作用。因为这些配置是存储在 git 仓库中，所以<strong>最好是存储项目的非敏感配置</strong>，例如：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">variables</span><span class="token punctuation">:</span>  DATABASE_URL<span class="token punctuation">:</span><span class="token string">"postgres://postgres@postgres/my_database"</span></code></pre><p>这些变量可以被后续的命令和脚本使用。</p><p>除了用户自定义的变量外，Runner 也可以定义它自己的变量。<code>CI_COMMIT_REG_NAME</code>就是一个很好的例子，它的值表示用于构建项目的分支或tag名称。除了在<code>.gitlab-ci.yml</code>中设置变量外，还有可以通过 GitLab 的界面上设置私有变量。</p><p>这里有更多关于<a href="https://docs.gitlab.com/ce/ci/variables/README.html" target="_blank" rel="noopener">variables</a>的介绍。</p><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><h4 id="cache-paths"><a href="#cache-paths" class="headerlink" title="cache: paths"></a>cache: paths</h4><p>使用<code>paths</code>指令选择要缓存的文件或目录。也可以使用通配符。</p><p>如果 cache 定义在 jobs 的作用域之外，那么它就是全局缓存，所有 jobs 都可以使用该缓存。</p><p>缓存<code>binaries</code>和<code>.config</code>中的所有文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">rspec</span><span class="token punctuation">:</span>  <span class="token key atrule">script</span><span class="token punctuation">:</span> test  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">paths</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> binaries/    <span class="token punctuation">-</span> .config</code></pre><p>缓存<code>git</code>中没有被跟踪的文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">rspec</span><span class="token punctuation">:</span>  <span class="token key atrule">script</span><span class="token punctuation">:</span> test  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">untracked</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>缓存<code>binaries</code>下没有被<code>git</code>跟踪的文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">rspec</span><span class="token punctuation">:</span>  <span class="token key atrule">script</span><span class="token punctuation">:</span> test  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">untracked</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">paths</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> binaries/</code></pre><p>job 中优先级高于全局的。下面这个<code>rspec</code> job中将只会缓存<code>binaries/</code>下的文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">cache</span><span class="token punctuation">:</span>  <span class="token key atrule">paths</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> my/files<span class="token key atrule">rspec</span><span class="token punctuation">:</span>  <span class="token key atrule">script</span><span class="token punctuation">:</span> test  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">key</span><span class="token punctuation">:</span> rspec    <span class="token key atrule">paths</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> binaries/</code></pre><p>注意，缓存是在 jobs 之前进行共享的。如果你不同的 jobs 缓存不同的文件路径，必须设置不同的<code>cache:key</code>，否则缓存内容将被重写。缓存只是尽力而为之，所以别期望缓存会一直存在。</p><h4 id="cache-key"><a href="#cache-key" class="headerlink" title="cache: key"></a>cache: key</h4><p><code>key</code>指令允许我们定义缓存的作用域(亲和性)，可以是所有 jobs 的单个缓存，也可以是每个 job，也可以是每个分支或者是任何你认为合适的地方。它也可以让你很好的调整缓存，允许你设置不同 jobs 的缓存，甚至是不同分支的缓存。</p><p><code>cache:key</code>可以使用任何的<a href="https://docs.gitlab.com/ce/ci/variables/README.html" target="_blank" rel="noopener">预定义变量</a>。</p><p>默认key是默认设置的这个项目缓存，因此默认情况下，从GitLab 9.0开始，每个 pipelines 和 jobs 中可以共享一切。</p><p>配置示例</p><p>缓存每个job：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">cache</span><span class="token punctuation">:</span>  <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"$CI_JOB_NAME"</span>  <span class="token key atrule">untracked</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>缓存每个分支：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">cache</span><span class="token punctuation">:</span>  <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"$CI_COMMIT_REF_NAME"</span>  <span class="token key atrule">untracked</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>缓存每个 job 且每个分支：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">cache</span><span class="token punctuation">:</span>  <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"$CI_JOB_NAME/$CI_COMMIT_REF_NAME"</span>  <span class="token key atrule">untracked</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>缓存每个分支且每个stage：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">cache</span><span class="token punctuation">:</span>  <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"$CI_JOB_STAGE/$CI_COMMIT_REF_NAME"</span>  <span class="token key atrule">untracked</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>如果使用的Windows Batch(windows批处理)来跑脚本需要用%替代$：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">cache</span><span class="token punctuation">:</span>  <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"%CI_JOB_STAGE%/%CI_COMMIT_REF_NAME%"</span>  <span class="token key atrule">untracked</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h3 id="allow-failure"><a href="#allow-failure" class="headerlink" title="allow_failure"></a>allow_failure</h3><p><code>allow_failure</code>可以用于当你想设置一个 job 失败的之后并不影响后续的CI组件的时候。失败的 jobs 不会影响到<code>commit</code>状态。</p><p>当开启了允许 job 失败，所有的 intents 和 purposes 里的 pipeline 都是成功/绿色，但是也会有一个”<code>CI build passed with warnings</code>“信息显示在<code>Merge Request</code>或<code>commit</code>或<code>job page</code>。这被允许失败的作业使用，但是如果失败表示其他地方应采取其他（手动）步骤。</p><p>下面的这个例子中，job1和job2将会并列进行，如果job1失败了，它也不会影响进行中的下一个 stage，因为这里有设置了<code>allow_failure: true</code>。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">job1</span><span class="token punctuation">:</span>  <span class="token key atrule">stage</span><span class="token punctuation">:</span> test  <span class="token key atrule">script</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> execute_script_that_will_fail  <span class="token key atrule">allow_failure</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">job2</span><span class="token punctuation">:</span>  <span class="token key atrule">stage</span><span class="token punctuation">:</span> test  <span class="token key atrule">script</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> execute_script_that_will_succeed<span class="token key atrule">job3</span><span class="token punctuation">:</span>  <span class="token key atrule">stage</span><span class="token punctuation">:</span> deploy  <span class="token key atrule">script</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> deploy_to_staging</code></pre><h3 id="when"><a href="#when" class="headerlink" title="when"></a>when</h3><p><code>when</code>用于实现在发生故障或尽管失败时运行的作业。when可以设置以下值：</p><ul><li><code>on_success</code> - 只有前面 stages 的所有工作成功时才执行。这是默认值。</li><li><code>on_failure</code> - 当前面 stages 中任意一个jobs失败后执行。</li><li><code>always</code> - 无论前面 stages 中 jobs 状态如何都执行。</li><li><code>manual</code> - 手动执行(GitLab8.10增加)。更多请查看手动操作。</li></ul><h3 id="artifacts"><a href="#artifacts" class="headerlink" title="artifacts"></a>artifacts</h3><p><code>artifacts</code>用于指定成功后应附加到 job 的文件和目录的列表。只能使用项目工作间内的文件或目录路径。在job成功完成后artifacts将会发送到GitLab中，同时也会在 GitLab UI 中提供下载。如果想要在不通的 job 之间传递<code>artifacts</code>，请查阅<a href="https://docs.gitlab.com/ce/ci/yaml/README.html#dependencies" target="_blank" rel="noopener">依赖关系</a>。以下是一些例子：</p><p>发送<code>binaries</code>和<code>.config</code>中的所有文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">artifacts</span><span class="token punctuation">:</span>  <span class="token key atrule">paths</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> binaries/  <span class="token punctuation">-</span> .config</code></pre><p>发送所有没有被Git跟踪的文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">artifacts</span><span class="token punctuation">:</span>  <span class="token key atrule">untracked</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>发送没有被Git跟踪和<code>binaries</code>中的所有文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">artifacts</span><span class="token punctuation">:</span>  <span class="token key atrule">untracked</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">paths</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> binaries/</code></pre><h2 id="五、其他相关内容"><a href="#五、其他相关内容" class="headerlink" title="五、其他相关内容"></a>五、其他相关内容</h2><h3 id="1-API触发器-Triggers"><a href="#1-API触发器-Triggers" class="headerlink" title="1 API触发器 Triggers"></a>1 API触发器 Triggers</h3><p>Triggers 可用于强制使用API调用重建特定分支，<code>tag</code>或<code>commits</code>。API的使用示例可以在<code>Settings</code> -&gt; <code>CI/CD</code> -&gt; <code>Pipeline triggers</code>中找到。</p><p>在<code>triggers</code>文档中<a href="https://docs.gitlab.com/ce/ci/triggers/README.html" target="_blank" rel="noopener">查看更多</a>。</p><h3 id="2-配置定时任务"><a href="#2-配置定时任务" class="headerlink" title="2 配置定时任务"></a>2 配置定时任务</h3><p>GitLab CI 中可以在 GitLab <code>Settings</code> -&gt; <code>CI/CD</code> -&gt; <code>Schedules</code>中配置定时任务，点击<code>New Schedule</code>按钮，可以配置你流水线的定时执行任务，包括：描述信息、定时的Cron表达式、目标分支、变量等信息。</p><p>然后在需要定时执行的作业的<code>only</code>分支写上<code>schedules</code>即可。</p><h3 id="3-校验-gitlab-ci-yml"><a href="#3-校验-gitlab-ci-yml" class="headerlink" title="3 校验 .gitlab-ci.yml"></a>3 校验 .gitlab-ci.yml</h3><p>GitLab CI 的每个实例都有一个名为<code>Lint</code>的嵌入式调试工具。 你可以在 GitLab 实例的<code>-/ci/lint</code>下找到该链接。</p><h3 id="4-配置邮件发送"><a href="#4-配置邮件发送" class="headerlink" title="4 配置邮件发送"></a>4 配置邮件发送</h3><p>如果希望在每次构建完成后（或者在仅构建失败的情况下），想邮件发送给相关开发人员，则可以在 GitLab <code>Settings</code> -&gt; <code>Integrations</code> 中找到<code>Pipelines emails</code>，点击进去就可以配置邮件发送相关的内容了。</p><h3 id="5-GitLab-Pages"><a href="#5-GitLab-Pages" class="headerlink" title="5 GitLab Pages"></a>5 GitLab Pages</h3><p><a href="https://gitlab.com/pages/" target="_blank" rel="noopener">GitLab Pages</a>是用于托管静态文件的服务。而<code>pages</code>是一个特殊的job，用于将静态的内容上传到GitLab，可用于为您的网站提供服务。它有特殊的语法，因此必须满足以下两个要求：</p><ul><li>任何静态内容必须放在<code>public/</code>目录下</li><li>artifacts必须定义在<code>public/</code>目录下</li></ul><p>下面的这个例子是将所有文件从项目根目录移动到<code>public/</code>目录。<code>.public</code>工作流是<code>cp</code>，并且它不会循环复制<code>public/</code>本身。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pages</span><span class="token punctuation">:</span>  <span class="token key atrule">stage</span><span class="token punctuation">:</span> deploy  <span class="token key atrule">script</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> mkdir .public  <span class="token punctuation">-</span> cp <span class="token punctuation">-</span>r * .public  <span class="token punctuation">-</span> mv .public public  <span class="token key atrule">artifacts</span><span class="token punctuation">:</span>    <span class="token key atrule">paths</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> public  <span class="token key atrule">only</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> master</code></pre><p>更多内容请查看<a href="https://docs.gitlab.com/ce/user/project/pages/index.html" target="_blank" rel="noopener">GitLab Pages用户文档</a>。</p><h3 id="6-跳过-jobs"><a href="#6-跳过-jobs" class="headerlink" title="6 跳过 jobs"></a>6 跳过 jobs</h3><p>如果你的<code>commit</code>信息中包含<code>[ci skip]</code>或者<code>[skip ci]</code>，不论大小写，那么这个<code>commit</code>将会创建但是 jobs 也会跳过。</p><hr><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://docs.gitlab.com/ce/ci/yaml/README.html" target="_blank" rel="noopener">官方文档地址</a></li><li><a href="https://segmentfault.com/a/1190000010442764#articleHeader24" target="_blank" rel="noopener">segmentfault yaml配置中文翻译</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab CI </tag>
            
            <tag> DevOps </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 文档风格的 Typora 主题</title>
      <link href="/2018/11/19/da-jian/vue-wen-dang-feng-ge-de-typora-zhu-ti/"/>
      <url>/2018/11/19/da-jian/vue-wen-dang-feng-ge-de-typora-zhu-ti/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/blinkfox/typora-vue-theme" target="_blank" rel="noopener">typora-vue-theme</a> 是 Typora Markdown 文档编辑器中一款类似<a href="https://vuejs.org/" target="_blank" rel="noopener">Vue</a>文档风格的主题。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a>是一款支持实时预览的 Markdown 编辑器和阅读器，支持<code>Windows</code>、<code>macOS</code>、<code>Linux</code>三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。<strong><a href="https://github.com/blinkfox/typora-vue-theme" target="_blank" rel="noopener">typora-vue-theme</a>就是参考了<a href="https://vuejs.org/" target="_blank" rel="noopener">Vue</a>文档风格而开发的一个 Typora 自定义主题</strong>。</p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><ol><li>下载本主题中的<code>vue.css</code>、<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹；</li><li>打开 Typora，点击“<strong>偏好设置</strong>” =&gt; “<strong>打开主题文件夹</strong>”按钮，将弹出 Typora 的主题文件夹；</li><li>将下载好的<code>vue.css</code>和<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹放到 Typora 的主题文件夹中；</li><li>关闭并重新打开 Typora，从菜单栏中选择 “<strong>主题</strong>” =&gt; “<strong>Vue</strong>” 或者 “<strong>Vue Dark</strong>” 即可。</li></ol><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://static.blinkfox.com/typora_vue_theme_screen_01.png" alt="vue主题效果图1"></p><p><img src="http://static.blinkfox.com/typora_vue_theme_screen_02.png" alt="vue主题效果图2"></p><p><img src="http://static.blinkfox.com/typora_vue_theme_screen_03.png" alt="vue主题效果图3"></p><h3 id="Vue-Dark"><a href="#Vue-Dark" class="headerlink" title="Vue Dark"></a>Vue Dark</h3><p><img src="https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_01.png" alt="vue主题效果图4"></p><p><img src="https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_02.png" alt="vue主题效果图5"></p><blockquote><p><strong>感谢</strong>: 本主题中的<code>vue-dark.css</code>来自<a href="https://github.com/MamoruDS/typora-vue-dark-theme" target="_blank" rel="noopener">typora-vue-dark-theme</a>.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPU多级缓存</title>
      <link href="/2018/11/18/ruan-jian-gong-ju/cpu-duo-ji-huan-cun/"/>
      <url>/2018/11/18/ruan-jian-gong-ju/cpu-duo-ji-huan-cun/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是CPU缓存"><a href="#一、什么是CPU缓存" class="headerlink" title="一、什么是CPU缓存"></a>一、什么是CPU缓存</h2><h3 id="1-CPU缓存的来历"><a href="#1-CPU缓存的来历" class="headerlink" title="1. CPU缓存的来历"></a>1. CPU缓存的来历</h3><p>众所周知,CPU是计算机的大脑，它负责执行程序的指令，而内存负责存数据, 包括程序自身的数据。在很多年前，CPU的频率与内存总线的频率在同一层面上。内存的访问速度仅比寄存器慢一些。但是，这一局面在上世纪90年代被打破了。CPU的频率大大提升，但内存总线的频率与内存芯片的性能却没有得到成比例的提升。并不是因为造不出更快的内存，只是因为太贵了。内存如果要达到目前CPU那样的速度，那么它的造价恐怕要贵上好几个数量级。所以，CPU的运算速度要比内存读写速度快很多，这样会使CPU花费很长的时间等待数据的到来或把数据写入到内存中。所以，<strong>为了解决CPU运算速度与内存读写速度不匹配的矛盾</strong>，就出现了CPU缓存。</p><h3 id="2-CPU缓存的概念"><a href="#2-CPU缓存的概念" class="headerlink" title="2. CPU缓存的概念"></a>2. CPU缓存的概念</h3><p><strong>CPU缓存是位于CPU与内存之间的临时数据交换器，它的容量比内存小的多但是交换速度却比内存要快得多。CPU缓存一般直接跟CPU芯片集成或位于主板总线互连的独立芯片上</strong>。</p><p>为了简化与内存之间的通信，高速缓存控制器是针对数据块，而不是字节进行操作的。高速缓存其实就是一组称之为<strong>缓存行</strong>(Cache Line)的固定大小的数据块组成的，典型的一行是<code>64</code>字节。</p><h3 id="3-CPU缓存的意义"><a href="#3-CPU缓存的意义" class="headerlink" title="3. CPU缓存的意义"></a>3. CPU缓存的意义</h3><p>CPU往往需要重复处理相同的数据、重复执行相同的指令，如果这部分数据、指令CPU能在CPU缓存中找到，CPU就不需要从内存或硬盘中再读取数据、指令，从而减少了整机的响应时间。所以，缓存的意义满足以下两种<strong>局部性原理</strong>：</p><ul><li><strong>时间局部性（Temporal Locality）</strong>：如果一个信息项正在被访问，那么在近期它很可能还会被再次访问。</li><li><strong>空间局部性（Spatial Locality）</strong>：如果一个存储器的位置被引用，那么将来他附近的位置也会被引用。</li></ul><h2 id="二、CPU的三级缓存"><a href="#二、CPU的三级缓存" class="headerlink" title="二、CPU的三级缓存"></a>二、CPU的三级缓存</h2><h3 id="1-CPU的三级缓存"><a href="#1-CPU的三级缓存" class="headerlink" title="1. CPU的三级缓存"></a>1. CPU的三级缓存</h3><p>随着多核CPU的发展，CPU缓存通常分成了三个级别：<code>L1</code>，<code>L2</code>，<code>L3</code>。级别越小越接近CPU，所以速度也更快，同时也代表着容量越小。L1 是最接近CPU的, 它容量最小（例如：<code>32K</code>），速度最快，每个核上都有一个 L1 缓存，L1 缓存每个核上其实有两个 L1 缓存, 一个用于存数据的 L1d Cache（Data Cache），一个用于存指令的 L1i Cache（Instruction Cache）。L2 缓存 更大一些（例如：<code>256K</code>），速度要慢一些, 一般情况下每个核上都有一个独立的L2 缓存; L3 缓存是三级缓存中最大的一级（例如3MB），同时也是最慢的一级, 在同一个CPU插槽之间的核共享一个 L3 缓存。</p><p>下面是三级缓存的处理速度参考表：</p><table><thead><tr><th>从CPU到</th><th>大约需要的CPU周期</th><th>大约需要的时间(单位ns)</th></tr></thead><tbody><tr><td>寄存器</td><td>1 cycle</td><td></td></tr><tr><td>L1 Cache</td><td>~3-4 cycles</td><td>~0.5-1 ns</td></tr><tr><td>L2 Cache</td><td>~10-20 cycles</td><td>~3-7 ns</td></tr><tr><td>L3 Cache</td><td>~40-45 cycles</td><td>~15 ns</td></tr><tr><td>跨槽传输</td><td></td><td>~20 ns</td></tr><tr><td>内存</td><td>~120-240 cycles</td><td>~60-120ns</td></tr></tbody></table><p>下图是Intel Core i5-4285U的CPU三级缓存示意图：</p><p><img src="http://static.blinkfox.com/javabf_cpu_01.png" alt="CPU三级缓存"></p><p>就像数据库缓存一样，获取数据时首先会在最快的缓存中找数据，如果缓存没有命中(Cache miss) 则往下一级找, 直到三级缓存都找不到时，那只有向内存要数据了。一次次地未命中，代表取数据消耗的时间越长。</p><h3 id="2-带有高速缓存CPU执行计算的流程"><a href="#2-带有高速缓存CPU执行计算的流程" class="headerlink" title="2. 带有高速缓存CPU执行计算的流程"></a>2. 带有高速缓存CPU执行计算的流程</h3><ol><li>程序以及数据被加载到主内存</li><li>指令和数据被加载到CPU的高速缓存</li><li>CPU执行指令，把结果写到高速缓存</li><li>高速缓存中的数据写回主内存</li></ol><p>目前流行的多级缓存结构如下图：</p><p><img src="http://static.blinkfox.com/javabf_cpu_02.png" alt="多级缓存结构"></p><h2 id="三、CPU缓存一致性协议-MESI"><a href="#三、CPU缓存一致性协议-MESI" class="headerlink" title="三、CPU缓存一致性协议(MESI)"></a>三、CPU缓存一致性协议(MESI)</h2><p><strong>MESI</strong>（<code>Modified Exclusive Shared Or Invalid</code>）(也称为<strong>伊利诺斯协议</strong>，是因为该协议由伊利诺斯州立大学提出的）是一种广泛使用的支持写回策略的缓存一致性协议。为了保证多个CPU缓存中共享数据的一致性，定义了缓存行(Cache Line)的四种状态，而CPU对缓存行的四种操作可能会产生不一致的状态，因此缓存控制器监听到本地操作和远程操作的时候，需要对地址一致的缓存行的状态进行一致性修改，从而保证数据在多个缓存之间保持一致性。</p><h3 id="1-MESI协议中的状态"><a href="#1-MESI协议中的状态" class="headerlink" title="1. MESI协议中的状态"></a>1. MESI协议中的状态</h3><p>CPU中每个缓存行（Caceh line)使用<code>4</code>种状态进行标记，使用<code>2bit</code>来表示:</p><table><thead><tr><th>状态</th><th>描述</th><th>监听任务</th><th>状态转换</th></tr></thead><tbody><tr><td>M 修改 (Modified)</td><td>该Cache line有效，数据被修改了，和内存中的数据不一致，数据只存在于本Cache中。</td><td>缓存行必须时刻监听所有试图读该缓存行相对就主存的操作，这种操作必须在缓存将该缓存行写回主存并将状态变成S（共享）状态之前被延迟执行。</td><td>当被写回主存之后，该缓存行的状态会变成独享（exclusive)状态。</td></tr><tr><td>E 独享、互斥 (Exclusive)</td><td>该Cache line有效，数据和内存中的数据一致，数据只存在于本Cache中。</td><td>缓存行也必须监听其它缓存读主存中该缓存行的操作，一旦有这种操作，该缓存行需要变成S（共享）状态。</td><td>当CPU修改该缓存行中内容时，该状态可以变成Modified状态</td></tr><tr><td>S 共享 (Shared)</td><td>该Cache line有效，数据和内存中的数据一致，数据存在于很多Cache中。</td><td>缓存行也必须监听其它缓存使该缓存行无效或者独享该缓存行的请求，并将该缓存行变成无效（Invalid）。</td><td>当有一个CPU修改该缓存行时，其它CPU中该缓存行可以被作废（变成无效状态 Invalid）。</td></tr><tr><td>I 无效 (Invalid)</td><td>该Cache line无效。</td><td>无</td><td>无</td></tr></tbody></table><blockquote><p><strong>注意</strong>：<br><strong>对于M和E状态而言总是精确的，他们在和该缓存行的真正状态是一致的，而S状态可能是非一致的</strong>。如果一个缓存将处于S状态的缓存行作废了，而另一个缓存实际上可能已经独享了该缓存行，但是该缓存却不会将该缓存行升迁为E状态，这是因为其它缓存不会广播他们作废掉该缓存行的通知，同样由于缓存并没有保存该缓存行的copy的数量，因此（即使有这种通知）也没有办法确定自己是否已经独享了该缓存行。</p></blockquote><p>从上面的意义看来E状态是一种投机性的优化：如果一个CPU想修改一个处于S状态的缓存行，总线事务需要将所有该缓存行的copy变成invalid状态，而修改E状态的缓存不需要使用总线事务。</p><p>MESI状态转换图：</p><p><img src="http://static.blinkfox.com/javabf_cpu_03.png" alt="MESI状态转换图"></p><p>下图表示了当一个缓存行(Cache line)的调整的状态的时候，另外一个缓存行(Cache line)需要调整的状态。</p><table><thead><tr><th>状态</th><th>M</th><th>E</th><th>S</th><th><strong>I</strong></th></tr></thead><tbody><tr><td><strong>M</strong></td><td>×</td><td>×</td><td>×</td><td>√</td></tr><tr><td><strong>E</strong></td><td>×</td><td>×</td><td>×</td><td>√</td></tr><tr><td><strong>S</strong></td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr><td><strong>I</strong></td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p>举个示例：</p><blockquote><p>假设cache 1 中有一个变量<code>x = 0</code>的 Cache line 处于S状态(共享)。<br>那么其他拥有x变量的 cache 2、cache 3 等<code>x</code>的 Cache line调整为<code>S</code>状态（共享）或者调整为<code>I</code>状态（无效）。</p></blockquote><h3 id="2-多核缓存协同操作"><a href="#2-多核缓存协同操作" class="headerlink" title="2. 多核缓存协同操作"></a>2. 多核缓存协同操作</h3><h4 id="1-内存变量"><a href="#1-内存变量" class="headerlink" title="(1) 内存变量"></a>(1) 内存变量</h4><p>假设有三个CPU A、B、C，对应三个缓存分别是cache a、b、c。在主内存中定义了<code>x</code>的引用值为0。</p><p><img src="http://static.blinkfox.com/javabf_cpu_04.png" alt="内存变量"></p><h4 id="2-单核读取"><a href="#2-单核读取" class="headerlink" title="(2) 单核读取"></a>(2) 单核读取</h4><p>执行流程是：</p><ul><li>CPU A发出了一条指令，从主内存中读取<code>x</code>。</li><li>从主内存通过 bus 读取到 CPU A 的缓存中（远端读取 Remote read）,这时该 Cache line 修改为 E 状态（独享）。</li></ul><p><img src="http://static.blinkfox.com/javabf_cpu_05.png" alt="单核读取"></p><h4 id="3-双核读取"><a href="#3-双核读取" class="headerlink" title="(3) 双核读取"></a>(3) 双核读取</h4><p>执行流程是：</p><ul><li>CPU A发出了一条指令，从主内存中读取<code>x</code>。</li><li>CPU A从主内存通过bus读取到 cache a 中并将该 Cache line 设置为E状态。</li><li>CPU B发出了一条指令，从主内存中读取<code>x</code>。</li><li>CPU B试图从主内存中读取<code>x</code>时，CPU A检测到了地址冲突。这时CPU A对相关数据做出响应。此时<code>x</code>存储于 cache a 和 cache b 中，<code>x</code>在 chche a 和 cache b 中都被设置为S状态(共享)。</li></ul><p><img src="http://static.blinkfox.com/javabf_cpu_06.png" alt="双核读取"></p><h4 id="4-修改数据"><a href="#4-修改数据" class="headerlink" title="(4) 修改数据"></a>(4) 修改数据</h4><p>执行流程是：</p><ul><li>CPU A 计算完成后发指令需要修改<code>x</code>.</li><li>CPU A 将<code>x</code>设置为M状态（修改）并通知缓存了<code>x</code>的 CPU B, CPU B 将本地 cache b 中的<code>x</code>设置为<code>I</code>状态(无效)</li><li>CPU A 对<code>x</code>进行赋值。</li></ul><p><img src="http://static.blinkfox.com/javabf_cpu_07.png" alt="修改数据"></p><h4 id="5-同步数据"><a href="#5-同步数据" class="headerlink" title="(5) 同步数据"></a>(5) 同步数据</h4><p>那么执行流程是：</p><ul><li>CPU B 发出了要读取x的指令。</li><li>CPU B 通知CPU A,CPU A将修改后的数据同步到主内存时cache a 修改为E（独享）</li><li>CPU A同步CPU B的x,将cache a和同步后cache b中的x设置为S状态（共享）。</li></ul><p><img src="http://static.blinkfox.com/javabf_cpu_08.png" alt="同步数据"></p><h3 id="3-CPU-存储模型简介"><a href="#3-CPU-存储模型简介" class="headerlink" title="3. CPU 存储模型简介"></a>3. CPU 存储模型简介</h3><p>MESI协议为了保证多个 CPU cache 中共享数据的一致性，定义了 Cache line 的四种状态，而 CPU 对 cache 的<code>4</code>种操作可能会产生不一致状态，因此 cache 控制器监听到本地操作和远程操作的时候，需要对地址一致的 Cache line 状态做出一定的修改，从而保证数据在多个cache之间流转的一致性。</p><p>但是，缓存的一致性消息传递是要时间的，这就使得状态切换会有更多的延迟。某些状态的切换需要特殊的处理，可能会阻塞处理器。这些都将会导致各种各样的稳定性和性能问题。比如你需要修改本地缓存中的一条信息，那么你必须将<code>I</code>（无效）状态通知到其他拥有该缓存数据的CPU缓存中，并且等待确认。等待确认的过程会阻塞处理器，这会降低处理器的性能。因为这个等待远远比一个指令的执行时间长的多。所以，为了为了避免这种阻塞导致时间的浪费，引入了存储缓存(<code>Store Buffer</code>)和无效队列(<code>Invalidate Queue</code>)。</p><h4 id="1-存储缓存"><a href="#1-存储缓存" class="headerlink" title="(1) 存储缓存"></a>(1) 存储缓存</h4><p>在没有存储缓存时，CPU 要写入一个量，有以下情况：</p><ul><li>量不在该 CPU 缓存中，则需要发送 Read Invalidate 信号，再等待此信号返回，之后再写入量到缓存中。</li><li>量在该 CPU 缓存中，如果该量的状态是 Exclusive 则直接更改。而如果是 Shared 则需要发送 Invalidate 消息让其它 CPU 感知到这一更改后再更改。</li></ul><p>这些情况中，很有可能会触发该 CPU 与其它 CPU 进行通讯，接着需要等待它们回复。这会浪费大量的时钟周期！为了提高效率，可以使用<strong>异步</strong>的方式去处理：先将值写入到一个 Buffer 中，再发送通讯的信号，等到信号被响应，再应用到 cache 中。并且此 Buffer 能够接受该 CPU 读值。这个 Buffer 就是 Store Buffer。而不须要等待对某个量的赋值指令的完成才继续执行下一条指令，直接去 Store Buffer 中读该量的值，这种优化叫<strong>Store Forwarding</strong>。</p><h4 id="2-无效队列"><a href="#2-无效队列" class="headerlink" title="(2) 无效队列"></a>(2) 无效队列</h4><p>同理，解决了主动发送信号端的效率问题，那么，接受端 CPU 接受到 Invalidate 信号后如果立即采取相应行动(去其它 CPU 同步值)，再返回响应信号，则时钟周期也太长了，此处也可优化。接受端 CPU 接受到信号后不是立即采取行动，而是将 Invalidate 信号插入到一个队列 Queue 中，立即作出响应。等到合适的时机，再去处理这个 Queue 中的 Invalidate 信号，并作相应处理。这个 Queue 就是<strong>Invalidate Queue</strong>。</p><h2 id="四、乱序执行"><a href="#四、乱序执行" class="headerlink" title="四、乱序执行"></a>四、乱序执行</h2><p><strong>乱序执行（<code>out-of-orderexecution</code>）</strong>：是指CPU允许将多条指令不按程序规定的顺序分开发送给各相应电路单元处理的技术。这样将根据各电路单元的状态和各指令能否提前执行的具体情况分析后，将能提前执行的指令立即发送给相应电路。</p><p>这好比请A、B、C三个名人为晚会题写横幅“春节联欢晚会”六个大字，每人各写两个字。如果这时在一张大纸上按顺序由A写好”春节”后再交给B写”联欢”，然后再由C写”晚会”，那么这样在A写的时候，B和C必须等待，而在B写的时候C仍然要等待而A已经没事了。</p><p>但如果采用三个人分别用三张纸同时写的做法， 那么B和C都不必须等待就可以同时各写各的了，甚至C和B还可以比A先写好也没关系（就象乱序执行），但当他们都写完后就必须重新在横幅上（自然可以由别人做，就象CPU中乱序执行后的重新排列单元）按”春节联欢晚会”的顺序排好才能挂出去。</p><p>所以，CPU 为什么会有乱序执行优化？本质原因是<strong>CPU为了效率</strong>，将长费时的操作“异步”执行，排在后面的指令不等前面的指令执行完毕就开始执行后面的指令。而且允许排在前面的长费时指令后于排在后面的指令执行完。</p><p>CPU 执行乱序主要有以下几种：</p><ul><li><strong>写写乱序(store store)</strong>：<code>a=1;b=2; -&gt; b=2;a=1;</code></li><li><strong>写读乱序(store load)</strong>：<code>a=1;load(b); -&gt; load(b);a=1;</code></li><li><strong>读读乱序(load load)</strong>：<code>load(a);load(b); -&gt; load(b);load(a);</code></li><li><strong>读写乱序(load store)</strong>：<code>load(a);b=2; -&gt; b=2;load(a);</code></li></ul><p>总而言之，<strong>CPU的乱序执行优化指的是处理器为提高运算速度而做出违背代码原有顺序的优化</strong>。</p><hr><p>参考文章：</p><ul><li><a href="http://ifeve.com/from-javaeye-cpu-cache/" target="_blank" rel="noopener">从Java视角理解系统结构（二）CPU缓存</a></li><li><a href="http://www.cnblogs.com/yanlong300/p/8986041.html" target="_blank" rel="noopener">CPU缓存一致性协议MESI</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPU缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Bash命令整理之其他常用命令</title>
      <link href="/2018/10/13/ruan-jian-gong-ju/linux/chang-yong-bash-ming-ling-zheng-li-zhi-qi-ta-chang-yong-ming-ling/"/>
      <url>/2018/10/13/ruan-jian-gong-ju/linux/chang-yong-bash-ming-ling-zheng-li-zhi-qi-ta-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="1-hostname-查看主机名"><a href="#1-hostname-查看主机名" class="headerlink" title="1. hostname - 查看主机名"></a>1. hostname - 查看主机名</h2><p><code>hostname</code>命令用于查看系统的主机名，或是修改系统的主机名。</p><p><code>hostname</code>的常用命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示系统的当前主机名</span><span class="token function">hostname</span><span class="token comment" spellcheck="true"># 修改你系统的主机名</span><span class="token function">hostname</span> blinkfox-system<span class="token comment" spellcheck="true"># 使用 -F 选项，从指定的文件中读取主机名</span><span class="token function">hostname</span> -F /root/hostname.txt</code></pre><h2 id="2-uptime-查看系统运行时间"><a href="#2-uptime-查看系统运行时间" class="headerlink" title="2. uptime - 查看系统运行时间"></a>2. uptime - 查看系统运行时间</h2><p><code>uptime</code>命令用于打印系统的运行时间等信息。使用如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">uptime</span></code></pre><h2 id="3-w、who-列出登录的用户"><a href="#3-w、who-列出登录的用户" class="headerlink" title="3. w、who - 列出登录的用户"></a>3. w、who - 列出登录的用户</h2><p><code>w</code>命令用于显示登录用户及他们当前运行的进程。输入的内容格式如下：</p><pre class=" language-bash"><code class="language-bash">w<span class="token comment" spellcheck="true"># 打印如下</span>22:42  up 18 days, 1 hr, 2 users, load averages: 1.23 1.79 1.75USER     TTY      FROM              LOGIN@  IDLE WHATblinkfox console  -                日19   6days -blinkfox s000     -                五23       - w</code></pre><p><code>who</code>命令有与<code>w</code>命令类似的用途，但它的功能比<code>w</code>命令更强大一些。语法格式如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">who</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>FILE <span class="token operator">|</span> ARG1 ARG2<span class="token punctuation">]</span></code></pre><p><code>who</code>常用命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示当前登录的所有用户信息</span><span class="token function">who</span><span class="token comment" spellcheck="true"># 显示系统的启动时间</span><span class="token function">who</span> -b<span class="token comment" spellcheck="true"># 显示系统登录进程</span><span class="token function">who</span> -l<span class="token comment" spellcheck="true"># 显示与当前标准输入关联的用户信息</span><span class="token function">who</span> -m<span class="token comment" spellcheck="true"># 显示系统的运行级别</span><span class="token function">who</span> -r<span class="token comment" spellcheck="true"># 显示所有登录用户的用户名和登录用户数</span><span class="token function">who</span> -q</code></pre><h2 id="4-uname-查看系统信息"><a href="#4-uname-查看系统信息" class="headerlink" title="4. uname - 查看系统信息"></a>4. uname - 查看系统信息</h2><p><code>uname</code>命令用于打印内核名称和版本、主机名等系统信息。命令的语法如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">uname</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>.</code></pre><p>常用使用方式如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 只打印内核的名称</span><span class="token function">uname</span><span class="token comment" spellcheck="true"># 使用 -n 选项，只打印系统的主机名</span><span class="token function">uname</span> -n<span class="token comment" spellcheck="true"># 使用 -r 选项，打印内核版本信息</span><span class="token function">uname</span> -r<span class="token comment" spellcheck="true"># 使用 -m 选项，打印系统的硬件名称</span><span class="token function">uname</span> -m<span class="token comment" spellcheck="true"># 使用 -p 选项，打印系统的处理器类型信息</span><span class="token function">uname</span> -p<span class="token comment" spellcheck="true"># 使用 -i 选项，打印系统的硬件平台信息</span><span class="token function">uname</span> -i<span class="token comment" spellcheck="true"># 使用 -a 选项，打印上述所有示例中的信息</span><span class="token function">uname</span> -a</code></pre><h2 id="5-date-显示和设置系统日期和时间"><a href="#5-date-显示和设置系统日期和时间" class="headerlink" title="5. date - 显示和设置系统日期和时间"></a>5. date - 显示和设置系统日期和时间</h2><p><code>date</code>命令用于以多种格式显示日期和时间，或设置系统的日期和时间。<code>date</code>命令的语法如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">date</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>+FORMAT<span class="token punctuation">]</span><span class="token function">date</span> <span class="token punctuation">[</span>-u<span class="token operator">|</span>--utc<span class="token operator">|</span>--universal<span class="token punctuation">]</span> <span class="token punctuation">[</span>MMDDhhmm<span class="token punctuation">[</span><span class="token punctuation">[</span>CC<span class="token punctuation">]</span>YY<span class="token punctuation">]</span><span class="token punctuation">[</span>.ss<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>常用使用命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 以默认格式显示系统的当前日期时间</span><span class="token function">date</span><span class="token comment" spellcheck="true"># 格式化当前日期</span><span class="token function">date</span> +<span class="token string">"%Y-%m-%d"</span><span class="token comment" spellcheck="true"># 格式化输出昨天的日期</span><span class="token function">date</span> -d <span class="token string">"1 day ago"</span> +<span class="token string">"%Y-%m-%d"</span><span class="token comment" spellcheck="true"># 2秒后格式化输出</span><span class="token function">date</span> -d <span class="token string">"2 second"</span> +<span class="token string">"%Y-%m-%d %H:%M.%S"</span><span class="token comment" spellcheck="true"># 普通格式化转出</span><span class="token function">date</span> -d <span class="token string">"2009-12-12"</span> +<span class="token string">"%Y/%m/%d %H:%M.%S"</span><span class="token comment" spellcheck="true"># apache格式转换</span><span class="token function">date</span> -d <span class="token string">"Dec 5, 2009 12:00:37 AM"</span> +<span class="token string">"%Y-%m-%d %H:%M.%S"</span><span class="token comment" spellcheck="true"># 日期加减操作</span><span class="token function">date</span> +%Y%m%d <span class="token comment" spellcheck="true">#显示前天年月日</span><span class="token function">date</span> -d <span class="token string">"+1 day"</span> +%Y%m%d <span class="token comment" spellcheck="true">#显示前一天的日期</span><span class="token function">date</span> -d <span class="token string">"-1 day"</span> +%Y%m%d <span class="token comment" spellcheck="true">#显示后一天的日期</span><span class="token function">date</span> -d <span class="token string">"-1 month"</span> +%Y%m%d <span class="token comment" spellcheck="true">#显示上一月的日期</span><span class="token function">date</span> -d <span class="token string">"+1 month"</span> +%Y%m%d <span class="token comment" spellcheck="true">#显示下一月的日期</span><span class="token function">date</span> -d <span class="token string">"-1 year"</span> +%Y%m%d <span class="token comment" spellcheck="true">#显示前一年的日期</span><span class="token function">date</span> -d <span class="token string">"+1 year"</span> +%Y%m%d <span class="token comment" spellcheck="true">#显示下一年的日期</span><span class="token comment" spellcheck="true"># 设定时间</span><span class="token function">date</span> -s <span class="token comment" spellcheck="true"># 设置当前时间，只有root权限才能设置，其他只能查看</span><span class="token function">date</span> -s 20160816 <span class="token comment" spellcheck="true"># 设置成20160816，这样会把具体时间设置成空00:00:00</span><span class="token function">date</span> -s 01:01:01 <span class="token comment" spellcheck="true"># 设置具体时间，不会对日期做更改</span><span class="token function">date</span> -s <span class="token string">"01:01:01 2012-05-23"</span> <span class="token comment" spellcheck="true"># 这样可以设置全部时间 </span><span class="token function">date</span> -s <span class="token string">"01:01:01 20120523"</span> <span class="token comment" spellcheck="true"># 这样可以设置全部时间</span><span class="token function">date</span> -s <span class="token string">"2012-05-23 01:01:01"</span> <span class="token comment" spellcheck="true"># 这样可以设置全部时间 </span><span class="token function">date</span> -s <span class="token string">"20120523 01:01:01"</span> <span class="token comment" spellcheck="true"># 这样可以设置全部时间</span></code></pre><h2 id="6-id-显示用户属性"><a href="#6-id-显示用户属性" class="headerlink" title="6. id - 显示用户属性"></a>6. id - 显示用户属性</h2><p><code>id</code>命令用于打印输出用户<code>uid</code>、<code>gid</code>、用户名和组名等用户身份信息。<code>id</code>命令的语法如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">id</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>USERNAME<span class="token punctuation">]</span></code></pre><p>常见使用命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 输出当前用户的uid、用户名、gid、组名及用户属于的群组信息</span><span class="token function">id</span><span class="token comment" spellcheck="true"># 使用 -u 选项，输出用户的 uid</span><span class="token function">id</span> -u<span class="token comment" spellcheck="true">#-u 选项和 -n 选项结合使用，输出账户的用户名</span><span class="token function">id</span> -un<span class="token comment" spellcheck="true"># 使用 -g 选项，输出帐号当前起作用的gid</span><span class="token function">id</span> -g<span class="token comment" spellcheck="true"># -g 与 -n 选项结合使用，输出帐号当前起作用的用户组名</span><span class="token function">id</span> -gn<span class="token comment" spellcheck="true"># 使用 -G 选项，输出帐号所属的所有群组id</span><span class="token function">id</span> -G root<span class="token comment" spellcheck="true"># -G 与 -n 选项结合使用，输出账号所属的所有群组的名称</span><span class="token function">id</span> -Gn root</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Bash命令整理之文本处理</title>
      <link href="/2018/10/11/ruan-jian-gong-ju/linux/chang-yong-bash-ming-ling-zheng-li-zhi-wen-ben-chu-li/"/>
      <url>/2018/10/11/ruan-jian-gong-ju/linux/chang-yong-bash-ming-ling-zheng-li-zhi-wen-ben-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="1-sort-文本排序"><a href="#1-sort-文本排序" class="headerlink" title="1. sort - 文本排序"></a>1. sort - 文本排序</h2><p><code>sort</code>命令用于将文本文件的行排序。默认情况下，<code>sort</code>命令是按照字符串的字母顺序排序。</p><p>sort 的常用命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将文本内容按字母顺序排序</span><span class="token function">sort</span> example.txt<span class="token comment" spellcheck="true"># 使用 -u 选项，移除所有重复行后排序</span><span class="token function">sort</span> -u example.txt<span class="token comment" spellcheck="true"># 使用 -n 选项，将令数字按数值的大小排序</span><span class="token function">sort</span> -n example.txt<span class="token comment" spellcheck="true"># 使用 -r 选项，以倒序方式排序</span><span class="token function">sort</span> -n -r example.txt<span class="token comment" spellcheck="true"># 同时将 file1、file2 的内容排序</span><span class="token function">sort</span> file1 file2</code></pre><h2 id="2-uniq-文本去重"><a href="#2-uniq-文本去重" class="headerlink" title="2.uniq - 文本去重"></a>2.uniq - 文本去重</h2><p><code>uniq</code>命令用于移除或发现文件中重复的条目。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 它将移除文件中重复的行并显示单一行</span><span class="token function">uniq</span> example.txt<span class="token comment" spellcheck="true"># 可以统计重复行出现的次数</span><span class="token function">uniq</span> -c example.txt<span class="token comment" spellcheck="true"># 使用 -d 选项，只显示文件中有重复的行并只显示一次</span><span class="token function">uniq</span> -d example.txt<span class="token comment" spellcheck="true"># 使用 -D 选项，显示文件中所有重复的行</span><span class="token function">uniq</span> -D example.txt<span class="token comment" spellcheck="true"># 使用 -u 选项，只显示文件中不重复的行</span><span class="token function">uniq</span> -u example.txt<span class="token comment" spellcheck="true"># 使用 -w 选项，限制 uniq 命令只比较每行的前 3 个字符是否重复</span><span class="token function">uniq</span> -w 3 example.txt<span class="token comment" spellcheck="true"># 使用 -s 选项，避免 uniq 命令比较每行的前 3 个字符，只比较后面的字符是否重复</span><span class="token function">uniq</span> -s 3 example.txt<span class="token comment" spellcheck="true"># 使用 -f 选项，避免 uniq 命令比较第一列的内容，只比较后面的字符是否重复</span><span class="token function">uniq</span> -f 1 example.txt</code></pre><h2 id="3-tr-替换或删除字符"><a href="#3-tr-替换或删除字符" class="headerlink" title="3.tr - 替换或删除字符"></a>3.tr - 替换或删除字符</h2><p><code>tr</code>命令主要用于删除文件中控制字符或进行字符转换。使用<code>tr</code>时要转换两个字符串：字符串 1 用于查询，字符串 2 用于处理各种转换。<code>tr</code>刚执行时，字符串 1 中的字符被映射到字符串 2 中的字符，然后转换操作开始。</p><p><code>tr</code>命令的语法如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tr</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. SET1 <span class="token punctuation">[</span>SET2<span class="token punctuation">]</span></code></pre><p>常用命令示例：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 若要将大括号转换为小括号</span><span class="token function">tr</span> <span class="token string">'{}'</span> <span class="token string">'()'</span> <span class="token operator">&lt;</span> textfile <span class="token operator">></span> newfile<span class="token comment" spellcheck="true"># 若要将大括号转换成方括号</span><span class="token function">tr</span> <span class="token string">'{}'</span> <span class="token string">'\[]'</span> <span class="token operator">&lt;</span> textfile <span class="token operator">></span> newfile<span class="token comment" spellcheck="true"># 若要将小写字符转换成大写，请输入：</span><span class="token function">tr</span> <span class="token string">'a-z'</span> <span class="token string">'A-Z'</span> <span class="token operator">&lt;</span> textfile <span class="token operator">></span> newfile<span class="token comment" spellcheck="true"># 若要创建一个文件中的单词列表</span><span class="token function">tr</span> -cs <span class="token string">'[:lower:][:upper:]'</span> <span class="token string">'[\n*]'</span> <span class="token operator">&lt;</span> textfile <span class="token operator">></span> newfile<span class="token comment" spellcheck="true"># 若要从某个文件中删除所有空字符</span><span class="token function">tr</span> -d <span class="token string">'\0'</span> <span class="token operator">&lt;</span> textfile <span class="token operator">></span> newfile<span class="token comment" spellcheck="true"># 若要用单独的换行替换每一序列的一个或多个换行，请输入：</span><span class="token function">tr</span> -s <span class="token string">'\n'</span> <span class="token operator">&lt;</span> textfile <span class="token operator">></span> newfile<span class="token comment" spellcheck="true"># 要以单个“#”字符替换 &lt;space> 字符类中的每个字符序列</span><span class="token function">tr</span> -s <span class="token string">'[:space:]'</span> <span class="token string">'[#*]'</span></code></pre><h2 id="4-grep-查找字符串"><a href="#4-grep-查找字符串" class="headerlink" title="4.grep - 查找字符串"></a>4.grep - 查找字符串</h2><p><code>grep</code>命令用于搜索文本或指定的文件中与指定的字符串或模式相匹配的行。默认情况下，<code>grep</code>命令只显示匹配的行。</p><p><code>grep</code>命令的语法如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">grep</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. PATTERN <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token function">grep</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>-e PATTERN <span class="token operator">|</span> -f FILE<span class="token punctuation">]</span> <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span><span class="token punctuation">..</span>.</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># `grep`命令查找文件/etc/passwd 中帐号 blinkfox 的信息</span><span class="token function">grep</span> blinkfox /etc/passwd<span class="token comment" spellcheck="true"># 使用 -i 选项，强制 grep 命令忽略搜索关键字的大小写</span><span class="token function">grep</span> -i blinkfox /etc/passwd<span class="token comment" spellcheck="true"># 使用 -r 选项，可以递归搜索指定目录下的所有文件</span><span class="token function">grep</span> -r blinkfox /etc/<span class="token comment" spellcheck="true"># 使用 -w 选项，只匹配包含指定单词的行</span><span class="token function">grep</span> -w blinkfox /etc/<span class="token comment" spellcheck="true"># 使用 -c 选项，报告文件或文本中模式被匹配的次数</span><span class="token function">grep</span> -c blinkfox /etc/passwd<span class="token comment" spellcheck="true"># 使用 -n 选项，显示每一个匹配的行的行号</span><span class="token function">grep</span> -n blinkfox /etc/passwd<span class="token comment" spellcheck="true"># 使用 -v 选项，可以输出除匹配指定模式的行以外的其他所有行</span><span class="token function">grep</span> -v blinkfox /etc/passwd<span class="token comment" spellcheck="true"># 使用 --color 选项，在输出中将匹配的字符串以彩色的形式标出</span><span class="token function">grep</span> --color blinkfox /etc/passwd</code></pre><h2 id="5-diff-比较两个文件"><a href="#5-diff-比较两个文件" class="headerlink" title="5.diff - 比较两个文件"></a>5.diff - 比较两个文件</h2><p><code>diff</code>命令用于比较两个文件，并找出它们之间的不同。<code>diff</code>命令的语法如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">diff</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. from-file to-file</code></pre><p>常用使用方式如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 比较两个文件</span><span class="token function">diff</span> nsswitch.conf nsswitch.conf.org<span class="token comment" spellcheck="true"># 使用 -w 选项，比较时忽略空格</span><span class="token function">diff</span> -w nsswitch.conf nsswitch.conf.org<span class="token comment" spellcheck="true"># 使用 -y 选项，以并排的格式输出两个文件的比较结果</span><span class="token function">diff</span> -y nsswitch.conf nsswitch.conf.org使用 -c 选项，以上下对比的格式输出两个文件的比较结果<span class="token function">diff</span> -c nsswitch.conf nsswitch.conf.org</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Bash命令整理之操作文件和目录</title>
      <link href="/2018/10/10/ruan-jian-gong-ju/linux/chang-yong-bash-ming-ling-zheng-li-zhi-cao-zuo-wen-jian-he-mu-lu/"/>
      <url>/2018/10/10/ruan-jian-gong-ju/linux/chang-yong-bash-ming-ling-zheng-li-zhi-cao-zuo-wen-jian-he-mu-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-touch-创建文件"><a href="#1-touch-创建文件" class="headerlink" title="1. touch - 创建文件"></a>1. touch - 创建文件</h2><p><code>touch</code>命令就可用于创建、变更和修改文件的时间戳。它是 Linux 操作系统的标准程序。<code>touch</code>命令又如下选项：</p><pre class=" language-bash"><code class="language-bash">-a: 只改变访问时间 -c: 不创建任何文件-m: 只改变修改时间-r: 使用指定文件的时间替代当前时间-t: 使用 <span class="token punctuation">[</span><span class="token punctuation">[</span>CC<span class="token punctuation">]</span>YY<span class="token punctuation">]</span>MMDDhhmm<span class="token punctuation">[</span>.ss<span class="token punctuation">]</span> 替代当前时间</code></pre><p>touch 命令的常见用法如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建一个名为 effyl 的新空文件</span><span class="token function">touch</span> effyl<span class="token comment" spellcheck="true"># 同时创建名称分别为 effyl myeffyl lueffyl 的三个文件</span><span class="token function">touch</span> effyl myeffyl lueffyl<span class="token comment" spellcheck="true"># 使用 -a 选项，可以改变或更新文件的最新访问时间，如果文件 effyl 不存在，则新创建一个</span><span class="token function">touch</span> -a effyl<span class="token comment" spellcheck="true"># 使用 -c 选项，可以避免创建一个新文件，并用当前时间更新文件的时间戳</span><span class="token function">touch</span> -c effyl<span class="token comment" spellcheck="true"># 使用 -m 选项，可以只改变文件的修改时间，而访问时间不变</span><span class="token function">touch</span> -m effyl<span class="token comment" spellcheck="true"># 使用 -c 和 -t 选项，来明确设置文件的时间</span><span class="token function">touch</span> -c -t YYMMDDHHMM filename<span class="token comment" spellcheck="true"># 如果想使用文件 myeffyl 的时间戳更新文件 effyl 的时间戳，可以使用 -r 选项</span><span class="token function">touch</span> -r myeffyl effyl</code></pre><h2 id="2-mkdir-创建目录"><a href="#2-mkdir-创建目录" class="headerlink" title="2.mkdir - 创建目录"></a>2.mkdir - 创建目录</h2><p><code>mkdir</code>命令用于创建一个新目录。最基本的<code>mkdir</code>命令的使用方法如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在当前目录下创建一个给定的目录名</span><span class="token function">mkdir</span> <span class="token operator">&lt;</span>dirname<span class="token operator">></span><span class="token comment" spellcheck="true"># 在 backup 中的相对路径创建一个名为 old 的目录</span><span class="token function">mkdir</span> backup/old<span class="token comment" spellcheck="true"># 在 backup 中的绝对路径中创建一个名为 old 的目录</span><span class="token function">mkdir</span> /home/blinkfox/backup/old<span class="token comment" spellcheck="true"># 使用 -p 选项，会自动创建所有还不存在的父目录</span><span class="token function">mkdir</span> -p backup/old<span class="token comment" spellcheck="true"># 使用 -m 选项，可以设置将要创建目录的权限</span><span class="token comment" spellcheck="true"># 如：创建一个任何人都有读写访问权限的目录</span><span class="token function">mkdir</span> -p -m 777 backup/old</code></pre><h2 id="3-cp-复制文件或目录"><a href="#3-cp-复制文件或目录" class="headerlink" title="3.cp - 复制文件或目录"></a>3.cp - 复制文件或目录</h2><p><code>cp</code>命令用于将文件从一个地方复制到另一个地方。原来的文件保持不变，新文件可能保持原名或用一个不同的名字。</p><p>使用 cp 命令复制文件和目录的语法有以下几种：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 复制源文件到目标文件</span><span class="token function">cp</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span> SOURCE DEST<span class="token comment" spellcheck="true"># 复制一个或多个源文件到一个目录</span><span class="token function">cp</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span> SOURCE<span class="token punctuation">..</span>. DIRECTORY<span class="token comment" spellcheck="true"># 同上</span><span class="token function">cp</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span> -t DIRECTORY SOURCE<span class="token punctuation">..</span>. </code></pre><p>常用使用示例如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在当前目录下，创建一个文件 file.txt 的副本，取名为 newfile.txt</span><span class="token function">cp</span> file.txt newfile.txt<span class="token comment" spellcheck="true"># 复制当前目录下的 file.txt 文件到 /tmp 目录下</span><span class="token function">cp</span> file.txt /tmp<span class="token comment" spellcheck="true"># 复制当前目录下的所有文件到 /tmp 目录下</span><span class="token function">cp</span> * /tmp<span class="token comment" spellcheck="true"># 使用 -p 选项，可以使复制一个文件到新文件时，保留源文件的所有者、权限等信息</span><span class="token function">cp</span> -p filename /path/to/new/location/myfile<span class="token comment" spellcheck="true"># 使用 -R 或 -r 选项，恶意递归地复制一个目录</span><span class="token comment" spellcheck="true"># 即将一个目录及其下的所有文件和子目录都复制到另一个目录</span><span class="token function">cp</span> -R * /home/blinkfox/backup</code></pre><h2 id="4-ln-链接文件或目录"><a href="#4-ln-链接文件或目录" class="headerlink" title="4.ln - 链接文件或目录"></a>4.ln - 链接文件或目录</h2><p><code>ln</code>命令用于创建软链接或硬链接。使用 -s 选项，可以创建一个软链接：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在目录 lib 下创建一个软链接 library.so，链接到 /home/blinkfox/src/library.so</span><span class="token function">ln</span> -s /home/blinkfox/src/library.so /home/blinkfox/lib<span class="token comment" spellcheck="true"># 创建目录的软链接</span><span class="token function">ln</span> -s /home/blinkfox/src <span class="token function">source</span></code></pre><h2 id="5-mv-移动文件或目录"><a href="#5-mv-移动文件或目录" class="headerlink" title="5. mv - 移动文件或目录"></a>5. mv - 移动文件或目录</h2><p><code>mv</code>命令用于将文件和目录从一个位置移到另外一个位置。除了移动文件，<code>mv</code>命令还可用于修改文件或目录的名字。</p><p>mv 命令的基本语法如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mv</span> SOURCE<span class="token punctuation">..</span>. DIRECTORY</code></pre><p>常用命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将当前目录下的文件 source.txt 移到目录 /tmp 下</span><span class="token function">mv</span> source.txt /tmp<span class="token comment" spellcheck="true"># 将目录 dir1、dir2 移到目录 dir_dist 下</span><span class="token function">mv</span> dir1 dir2 dir_dist<span class="token comment" spellcheck="true"># 将当前目录下的 old.txt 文件更名为 new.txt</span><span class="token function">mv</span> old.txt new.txt<span class="token comment" spellcheck="true"># 使用 -i 选项，在重写覆盖目标文件或目录之前给出提示信息</span><span class="token function">mv</span> -i old.txt new.txt<span class="token comment" spellcheck="true"># 将当前目录下的所有文件移动到目录 /tmp 下</span><span class="token function">mv</span> * /tmp/<span class="token comment" spellcheck="true"># 使用 -i 选项，从 dir1 中移动那些在目标目录中不存在的文件到目标目录</span><span class="token function">mv</span> -u dir1/* dir2/</code></pre><h2 id="6-rm-删除文件或目录"><a href="#6-rm-删除文件或目录" class="headerlink" title="6.rm - 删除文件或目录"></a>6.rm - 删除文件或目录</h2><p><code>rm</code>命令用于删除指定的文件和目录。其语法如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">rm</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span><span class="token punctuation">..</span>. FILE<span class="token punctuation">..</span>.</code></pre><p><code>rm</code>的常用命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 删除当前目录下的文件 file1.txt、file2.txt、file3.txt</span><span class="token function">rm</span> file1.txt file2.txt file3.txt<span class="token comment" spellcheck="true"># 删除当前目录下的所有文件</span><span class="token function">rm</span> *<span class="token comment" spellcheck="true"># 删除你当前帐号主目录下的 temp 目录中的所有文件</span><span class="token function">rm</span> ~/temp/*<span class="token comment" spellcheck="true"># 使用 -i 选项，可以在删除每个文件或目录前提示用户确认</span><span class="token function">rm</span> -i *<span class="token comment" spellcheck="true"># 删除当前目录下所有以".doc"结尾的文件</span><span class="token function">rm</span> *.doc<span class="token comment" spellcheck="true"># 删除当前目录下所有文件名中包含"movie"字符串的文件</span><span class="token function">rm</span> *movie*<span class="token comment" spellcheck="true"># 删除当前目录下所有以"a"开头的文件</span><span class="token function">rm</span> a*<span class="token comment" spellcheck="true"># 删除当前目录下整个文件名（包括扩展名）只有 3 个字符的所有文件</span><span class="token function">rm</span> ???<span class="token comment" spellcheck="true"># 删除当前目录下文件扩展名有两个字符的所有文件</span><span class="token function">rm</span> *.??<span class="token comment" spellcheck="true"># 删除当前目录下文件名中含有字母 a 或 b 或 c 的所有文件</span><span class="token function">rm</span> *<span class="token punctuation">[</span>abc<span class="token punctuation">]</span>*<span class="token comment" spellcheck="true"># 删除当前目录下文件名中包含 0~9 的所有文件</span><span class="token function">rm</span> *<span class="token punctuation">[</span>0-9<span class="token punctuation">]</span>*<span class="token comment" spellcheck="true"># 删除当前目录下文件扩展名是字母 c 或 h 的所有文件</span><span class="token function">rm</span> *.<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除 /tmp 目录下的所有文件及其子目录</span><span class="token function">rm</span> -rf /tmp/*</code></pre><blockquote><p>-f 删除前不提示用户确认，并忽略不存在的文件</p></blockquote><blockquote><p>-r 递归地删除目录及其下的内容</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Bash命令整理之查看文件和目录</title>
      <link href="/2018/10/09/ruan-jian-gong-ju/linux/chang-yong-bash-ming-ling-zheng-li-zhi-cha-kan-wen-jian-he-mu-lu/"/>
      <url>/2018/10/09/ruan-jian-gong-ju/linux/chang-yong-bash-ming-ling-zheng-li-zhi-cha-kan-wen-jian-he-mu-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-ls-列出文件名和目录"><a href="#1-ls-列出文件名和目录" class="headerlink" title="1. ls - 列出文件名和目录"></a>1. ls - 列出文件名和目录</h2><p><code>ls</code>命令是<code>Linux</code>中最常用的命令之一，其作用就是列出文件名和目录。在命令行提示符下，直接输入<code>ls</code>命令，不带任何选项，将列出当前目录下所有文件和目录，但不会显示详细的信息，比如，文件类型、大小、修改日期和时间、权限等。</p><p>以下便是<code>ls</code>命令及其选项的作用说明：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 仅列出当前目录下所有文件和目录</span><span class="token function">ls</span><span class="token comment" spellcheck="true"># 每行显示一条记录，每条记录包括文件类型、大小、修改日期和时间、权限等</span><span class="token function">ls</span> -l<span class="token comment" spellcheck="true"># 将文件大小显示符合人类阅读习惯的格式</span><span class="token function">ls</span> -lh<span class="token comment" spellcheck="true"># 将使用不同的特殊字符归类不同的文件类型</span><span class="token function">ls</span> -F<span class="token comment" spellcheck="true"># 以长列表格式列出某个目录的信息</span><span class="token function">ls</span> -ld /var/log<span class="token comment" spellcheck="true"># 将递归地列出子目录的内容</span><span class="token function">ls</span> -R /etc/sysconfig/<span class="token comment" spellcheck="true"># 以长列表格式按文件或目录的修改时间倒序地列出文件和目录</span><span class="token function">ls</span> -ltr<span class="token comment" spellcheck="true"># 以长列表格式按文件大小顺序列出文件和目录</span><span class="token function">ls</span> -ls<span class="token comment" spellcheck="true"># 列出包括隐藏文件或目录在内的所有文件和目录，包括“.”（当前目录）和“..”（父目录）</span><span class="token function">ls</span> -a<span class="token comment" spellcheck="true"># 列出包括隐藏文件或目录在内的所有文件和目录，不包括“.”（当前目录）和“..”（父目录）</span><span class="token function">ls</span> -A输出的内容类似于-l选项，指示显示uid和gid，替代显示所有者和用户组<span class="token function">ls</span> -n</code></pre><h2 id="2-cat-连接显示文件内容"><a href="#2-cat-连接显示文件内容" class="headerlink" title="2. cat - 连接显示文件内容"></a>2. cat - 连接显示文件内容</h2><p><code>cat</code> 命令也是Linux系统中最常用的命令之一。<code>cat</code>命令让我们可以看看文件的内容、连接文件、创建一个或多个文件和重定向输出到终端或文件。</p><p><code>cat</code>命令的语法如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span> <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span><span class="token punctuation">..</span>.</code></pre><p><code>cat</code>常用命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用 cat 命令查看文件 /etc/group 的内容</span><span class="token function">cat</span> /etc/group<span class="token comment" spellcheck="true"># 显示多个文件的内容</span><span class="token function">cat</span> /etc/redhat-release /etc/issue<span class="token comment" spellcheck="true"># -n 选项，可以显示文件内容的行号</span><span class="token function">cat</span> -n /etc/fstab<span class="token comment" spellcheck="true"># -b 选项和 -n 选项类似，但只标识非空白行的行号</span><span class="token function">cat</span> -b /etc/fstab<span class="token comment" spellcheck="true"># -e 选项，将在每一行的结尾显示“$”字符</span><span class="token function">cat</span> -e /etc/fstab</code></pre><blockquote><p>当你只输入 cat 命令，而没有任何参数时，它只是接收标准输入的内容并在标准输出中显示。所以你在输入一行内容并回车后，会在接下来的一行显示相同的内容。你也可以重定向标准输出到一个新文件。</p></blockquote><h2 id="3-less、more-分屏显示文件"><a href="#3-less、more-分屏显示文件" class="headerlink" title="3.less、more - 分屏显示文件"></a>3.less、more - 分屏显示文件</h2><p><code>more</code>命令在你使用小的xterm窗口时，或是想不使用文本编辑器而只是简单地阅读一个文件时是很有用的。more命令是一个用于一次翻阅一整屏文件的过滤器。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看一个文件，自动清空屏幕并显示文件开头部分</span><span class="token function">more</span> /etc/inittab<span class="token comment" spellcheck="true"># 指定一次显示num行</span><span class="token function">more</span> -num /etc/inittab</code></pre><p>与<code>more</code>命令相比，我个人更喜欢<code>less</code>命令来查看文件。<code>less</code>命令与<code>more</code>命令类似，但<code>less</code>命令向前和向后翻页都支持，而且<code>less</code>命令不需要在查看前加载整个文件，即<code>less</code>命令查看文件更快速。</p><p><code>less</code>常用命令参数如下：</p><pre class=" language-bash"><code class="language-bash">-b  <span class="token operator">&lt;</span>缓冲区大小<span class="token operator">></span> 设置缓冲区的大小-e  当文件显示结束后，自动离开-f  强迫打开特殊文件，例如外围设备代号、目录和二进制文件-g  只标志最后搜索的关键词-i  忽略搜索时的大小写-m  显示类似more命令的百分比-N  显示每行的行号-o  <span class="token operator">&lt;</span>文件名<span class="token operator">></span> 将less 输出的内容在指定文件中保存起来-Q  不使用警告音-s  显示连续空行为一行-S  行过长时间将超出部分舍弃-x  <span class="token operator">&lt;</span>数字<span class="token operator">></span> 将“tab”键显示为规定的数字空格/字符串：向下搜索“字符串”的功能?字符串：向上搜索“字符串”的功能n： 重复前一个搜索（与 / 或 ? 有关）N： 反向重复前一个搜索（与 / 或 ? 有关）b  向后翻一页d  向后翻半页h  显示帮助界面Q  退出less 命令u  向前滚动半页y  向前滚动一行空格键 滚动一行回车键 滚动一页<span class="token punctuation">[</span>pagedown<span class="token punctuation">]</span>： 向下翻动一页<span class="token punctuation">[</span>pageup<span class="token punctuation">]</span>：   向上翻动一页</code></pre><h2 id="4-head-显示文件头部"><a href="#4-head-显示文件头部" class="headerlink" title="4.head - 显示文件头部"></a>4.head - 显示文件头部</h2><p><code>head</code>命令用于打印指定输入的开头部分内容。默认情况下，打印每个指定输入的前10行内容。</p><p>使用<code>-n</code>选项可以指定打印文件的前N行：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 指定打印文件的前5行</span><span class="token function">head</span> -n 5 /etc/inittab（或）head -5 /etc/inittab<span class="token comment" spellcheck="true"># 打印文件的前N个字节的数据</span><span class="token function">head</span> -c 10 /etc/inittab</code></pre><h2 id="5-tail-显示文件尾部"><a href="#5-tail-显示文件尾部" class="headerlink" title="5.tail - 显示文件尾部"></a>5.tail - 显示文件尾部</h2><p><code>tail</code>命令和<code>head</code>命令相反，它打印指定输入的结尾部分的内容。默认情况下，它打印指定输入的最后10行内容。</p><p>使用<code>-n</code>选项可以指定打印文件的最后N行：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 指定打印文件的后10行</span><span class="token function">tail</span> -n 10 /etc/inittab<span class="token function">tail</span> -10 /etc/inittab<span class="token comment" spellcheck="true"># 即时打印文件中新写入的行</span><span class="token function">tail</span> -f /var/log/messages<span class="token comment" spellcheck="true"># --retry选项表示持续尝试打开某个文件，当你想打开一个稍后才会创建或即使不可用的文件</span><span class="token function">tail</span> -f /tmp/debug.log --retry</code></pre><h2 id="6-file-查看文件类型"><a href="#6-file-查看文件类型" class="headerlink" title="6.file - 查看文件类型"></a>6.file - 查看文件类型</h2><p><code>file</code>命令用于接收一个文件作为参数并执行某些测试，已确定正确的文件类型。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看文件类型</span><span class="token function">file</span> /etc/inittab<span class="token comment" spellcheck="true"># 可以MIME类型的格式显示文件类型的信息</span><span class="token function">file</span> -i  /etc/inittab<span class="token comment" spellcheck="true"># 使用-N 选项，输出的队列可以以在文件名之后无空白填充的形式显示</span><span class="token function">file</span> -N *</code></pre><h2 id="7-wc-查看文件统计信息"><a href="#7-wc-查看文件统计信息" class="headerlink" title="7.wc - 查看文件统计信息"></a>7.wc - 查看文件统计信息</h2><p><code>wc</code>命令用于查看文件的行数、单词数和字符数等信息。语法类似如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wc</span> filenameX Y Z /etc/inittab</code></pre><p>其中X表示行数，Y表示单词数，Z表示字节数，filename表示文件名。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># -l选项，可以只统计文件的行数信息</span><span class="token function">wc</span> -l /etc/inittab<span class="token comment" spellcheck="true"># -w选项，可以只统计文件的单词数信息</span><span class="token function">wc</span> -w /etc/inittab<span class="token comment" spellcheck="true"># -c选项，可以只统计文件的字节数信息</span><span class="token function">wc</span> -c /etc/inittab<span class="token comment" spellcheck="true"># -L选项，可以只统计文件中最长的行的长度</span><span class="token function">wc</span> -L /etc/inittab</code></pre><h2 id="8-find-查找文件或目录"><a href="#8-find-查找文件或目录" class="headerlink" title="8.find - 查找文件或目录"></a>8.find - 查找文件或目录</h2><p><code>find</code>命令用于根据你指定的参数搜索和定位文件和目录的列表。<code>find</code>命令可以在多种情况下使用，比如你可以通过权限、用户、用户组、文件类型、日期、大小和其他可能的条件来查找文件。</p><p><code>find</code>命令常用使用和说明如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查找指定目录下的某个文件</span><span class="token function">find</span> /etc/ -name inittab<span class="token comment" spellcheck="true"># 在当前目录下查找名称为 inittab 的文件</span><span class="token function">find</span> <span class="token keyword">.</span> -name inittab<span class="token comment" spellcheck="true"># 在当前目录下，文件不区分大小写是example的所有文件</span><span class="token function">find</span> <span class="token keyword">.</span> -iname example<span class="token comment" spellcheck="true"># 找出当前目录下所有以 sh 结尾的文件</span><span class="token function">find</span> <span class="token keyword">.</span> -type f -name <span class="token string">"*.sh"</span><span class="token comment" spellcheck="true"># 找出当前目录下，文件权限是 777 的所有文件</span><span class="token function">find</span> <span class="token keyword">.</span> -type f -perm 777<span class="token comment" spellcheck="true"># 找出当前目录下，文件权限不是 777 的所有文件</span><span class="token function">find</span> <span class="token keyword">.</span> -type f <span class="token operator">!</span> -perm 777<span class="token comment" spellcheck="true"># 找出当前目录下所有只读文件</span><span class="token function">find</span> <span class="token keyword">.</span> -type f <span class="token operator">!</span> -perm /a+w<span class="token comment" spellcheck="true"># 找出你帐号主目录下的所有可执行文件</span><span class="token function">find</span> ~ -type f -perm /a+w<span class="token comment" spellcheck="true"># 找出 /tmp 目录下的.log文件并将其删除：</span><span class="token function">find</span> /tmp/ -type f -name <span class="token string">"*.log"</span> -exec <span class="token function">rm</span> -f <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 找出当前目录下的所有空文件</span><span class="token function">find</span> <span class="token keyword">.</span> -type f -empty<span class="token comment" spellcheck="true"># 找出当前目录下的所有空目录</span><span class="token function">find</span> <span class="token keyword">.</span> -type d -empty<span class="token comment" spellcheck="true"># 找出 /tmp 目录下的所有隐藏文件</span><span class="token function">find</span> /tmp/ -type f -name <span class="token string">".*"</span><span class="token comment" spellcheck="true"># 找出 /tmp 目录下，所有者是 root 的文件和目录</span><span class="token function">find</span> /tmp/ -user root<span class="token comment" spellcheck="true"># 找出 /tmp 目录下，用户组是 developer 的文件和目录</span><span class="token function">find</span> /tmp/ -group root<span class="token comment" spellcheck="true"># 找出你账号的主目录下，3 天前修改的文件</span><span class="token function">find</span> ~ -type f -mtime 3<span class="token comment" spellcheck="true"># 找出你账号的主目录下，30 天以前修改的所有文件</span><span class="token function">find</span> ~ -type f -mtime +30<span class="token comment" spellcheck="true"># 找出你账号的主目录下，3 天以内修改的所有文件</span><span class="token function">find</span> ~ -type f -mtime -3<span class="token comment" spellcheck="true"># 找出你账号的主目录下，30 天以前，60 天以内修改的所有文件</span><span class="token function">find</span> ~ -type f -mtime +30 -mtime -60<span class="token comment" spellcheck="true"># 找出 /etc 目录下，一小时以内变更过的文件</span><span class="token function">find</span> /etc -type f -cmin -60<span class="token comment" spellcheck="true"># 找出 /etc 目录下，一小时以内访问过的文件</span><span class="token function">find</span> /etc -type f -amin -60<span class="token comment" spellcheck="true"># 找出你账号主目录下，大小是50MB的所有文件</span><span class="token function">find</span> ~ -type f -size 50MB<span class="token comment" spellcheck="true"># 找出你账号主目录下，大于50MB小于100MB的所有文件</span><span class="token function">find</span> ~ -type f -size +50MB -size -100MB<span class="token comment" spellcheck="true"># 找出你账号主目录下，大于100MB的文件并将其删除</span><span class="token function">find</span> ~ -type f -size +100MB -exec <span class="token function">rm</span> -rf <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git知识点整理</title>
      <link href="/2018/09/24/ruan-jian-gong-ju/git/git-zhi-shi-dian-zheng-li/"/>
      <url>/2018/09/24/ruan-jian-gong-ju/git/git-zhi-shi-dian-zheng-li/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Git基本概念。"><a href="#1-Git基本概念。" class="headerlink" title="1. Git基本概念。"></a>1. Git基本概念。</h2><ul><li><code>repository</code></li><li><code>config</code></li><li><code>init</code></li><li><code>clone</code></li><li><code>fetch</code></li><li><code>pull</code></li><li><code>commit</code></li><li><code>push</code></li><li><code>branch</code></li><li><code>head</code></li><li><code>tag</code></li><li><code>merge</code></li><li><code>conflict</code></li><li><code>diff</code></li><li><code>log</code></li><li><code>show</code></li><li><code>status</code></li></ul><h2 id="2-Git工作空间和文件状态"><a href="#2-Git工作空间和文件状态" class="headerlink" title="2. Git工作空间和文件状态"></a>2. Git工作空间和文件状态</h2><h3 id="1-工作空间"><a href="#1-工作空间" class="headerlink" title="(1).工作空间"></a>(1).工作空间</h3><p><img src="http://blog.chinaunix.net/attachment/201402/19/10415985_139279770639pM.jpg" alt="Git工作空间"></p><p>左侧为工作区，右侧为版本库。</p><ul><li>工作区（<code>Working Directory</code>） 就是在电脑里能看到的目录，比如learngit文件夹就是一个工作区。</li><li>版本库（<code>Repository</code>）工作区有一个隐藏目录<code>.git</code>，是Git的版本库。</li></ul><p>在版本库中标记为<code>index</code>的区域为暂存区，标记为<code>master</code>的是Git为我们自动创建的第一个分支，代表的是目录树。此时<code>HEAD</code>实际是指向<code>master</code>分支的一个“游标”，所以图示的命令中出现HEAD的地方可以用<code>master</code>来替换。图中的objects标识的区域为git的对象库，实际位于<code>.git/objects</code>目录下。</p><ul><li>当对工作区修改（或新增）的文件执行<code>git add</code>命令时，暂存区的目录树会被更新，同时工作区修改（或新增）的文件内容会被写入到对象库中的一个新的对象中，而该对象的id被记录在暂存区的文件索引中。</li><li>当执行提交操作<code>git commit</code>时，暂存区的目录树会写到版本库（对象库）中，master分支会做相应的更新，即master最新指向的目录树就是提交时原暂存区的目录树。</li><li>当执行<code>git reset HEAD</code>命令时，暂存区的目录树会被重写，会被master分支指向的目录树所替换，但是工作区不受影响。</li><li>当执行<code>git rm --cached</code>命令时，会直接从暂存区删除文件，工作区则不做出改变。</li><li>当执行<code>git checkout .</code>或<code>git checkout --</code> 命令时，会用暂存区全部的文件或指定的文件替换工作区的文件。这个操作很危险，会清楚工作区中未添加到暂存区的改动。</li><li>当执行<code>git checkout HEAD .</code>或<code>git checkout HEAD</code>命令时，会用HEAD指向的master分支中的全部或部分文件替换暂存区和工作区中的文件。这个命令也是极度危险的。因为不但会清楚工作区中未提交的改动，也会清楚暂存区中未提交的改动。</li></ul><h3 id="1-文件状态"><a href="#1-文件状态" class="headerlink" title="(1).文件状态"></a>(1).文件状态</h3><p>Git 有三种状态，你的文件可能处于其中之一：<strong>已提交(<code>committed</code>)</strong>、<strong>已修改(<code>modified</code>)</strong>和<strong>已暂存(<code>staged</code>)</strong>。</p><h2 id="3-Git配置系统级、全局、当前仓库用户名、邮箱的命令"><a href="#3-Git配置系统级、全局、当前仓库用户名、邮箱的命令" class="headerlink" title="3. Git配置系统级、全局、当前仓库用户名、邮箱的命令"></a>3. Git配置系统级、全局、当前仓库用户名、邮箱的命令</h2><p>系统级、全局、当前仓库选项分别是:仓库-system、-global、-local(或默认不填)</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Jerry Mouse"</span><span class="token function">git</span> config --global user.email <span class="token string">"jerry@yiibai.com"</span></code></pre><p>列出Git设置</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --list<span class="token function">git</span> config -l</code></pre><h2 id="4-Git-fetch和pull的区别"><a href="#4-Git-fetch和pull的区别" class="headerlink" title="4. Git fetch和pull的区别"></a>4. Git fetch和pull的区别</h2><ul><li><code>git fetch</code>：相当于是从远程获取最新版本到本地，不会自动merge.</li><li><code>git pull</code>：相当于是从远程获取最新版本并merge到本地.</li></ul><h3 id="1-git-fetch示例："><a href="#1-git-fetch示例：" class="headerlink" title="(1). git fetch示例："></a>(1). git fetch示例：</h3><pre class=" language-bash"><code class="language-bash">Git fetch origin master<span class="token function">git</span> log -p master<span class="token punctuation">..</span>origin/master<span class="token function">git</span> merge origin/master</code></pre><p>以上命令的含义：</p><ul><li>首先从远程的<code>origin</code>的<code>master</code>主分支下载最新的版本到<code>origin/master</code>分支上</li><li>然后比较本地的<code>master</code>分支和<code>origin/master</code>分支的差别</li><li>最后进行合并</li><li>上述过程其实可以用以下更清晰的方式来进行：</li></ul><h3 id="1-git-pull示例："><a href="#1-git-pull示例：" class="headerlink" title="(1). git pull示例："></a>(1). git pull示例：</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> pull origin master</code></pre><p>上述命令其实相当于<code>git fetch</code>和<code>git merge</code>。在实际使用中，<code>git fetch</code>更安全一些，因为在merge前，我们可以查看更新情况，然后再决定是否合并。</p><h2 id="5-Git-reset和revert的却别"><a href="#5-Git-reset和revert的却别" class="headerlink" title="5. Git reset和revert的却别"></a>5. Git reset和revert的却别</h2><ul><li><code>git revert</code>是用一次新的commit来回滚之前的commit，<code>git reset</code>是直接删除指定的commit。 </li><li>在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为<code>git revert</code>是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是<code>git reset</code>是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。</li><li><code>git reset</code>是把HEAD向后移动了一下，而<code>git revert</code>是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</li><li>git revert与git reset最大的不同是，git revert 仅仅是撤销某次提交。</li></ul><p>另外，说一下<code>git revert</code>， <code>git reset –hard</code>和 <code>–soft</code>的区别</p><ul><li><code>git reset –mixed id</code>: 是将git的HEAD变了（也就是提交记录变了），但文件并没有改变，（也就是working tree并没有改变）。</li><li><code>git reset –soft id</code>: 实际上，是<code>git reset –mixed id</code>后，又做了一次<code>git add</code>。</li><li><code>git reset –herd id</code>: 是将git的HEAD变了，文件也变了。</li></ul><h2 id="6-Git-merge和reabse的相同点和不同点"><a href="#6-Git-merge和reabse的相同点和不同点" class="headerlink" title="6. Git merge和reabse的相同点和不同点"></a>6. Git merge和reabse的相同点和不同点</h2><p><code>merge</code>是合并的意思，<code>rebase</code>是复位基底的意思，相同点都是用来合并分支的。</p><p><img src="http://images2015.cnblogs.com/blog/759200/201608/759200-20160806092734215-279978821.png" alt="merge和rebase"></p><p>不同点:</p><ul><li><code>merge</code>操作会生成一个新的节点，之前的提交分开显示。而<code>rebase</code>操作不会生成新的节点，是将两个分支融合成一个线性的提交。</li><li>解决冲突时。merge操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit就可以了。而<code>rebase</code>操作的话，会中断rebase,同时会提示去解决冲突。解决冲突后,将修改add后执行<code>git rebase –continue</code>继续操作，或者<code>git rebase –skip</code>忽略冲突。</li><li><code>git pull</code>和<code>git pull --rebase</code>区别：<code>git pull</code>做了两个操作分别是”获取”和”合并”。所以加了rebase就是以rebase的方式进行合并分支，默认为merge。</li></ul><p><strong>总结</strong>：选择 merge 还是 rebase？</p><ul><li>merge 是一个合并操作，会将两个分支的修改合并在一起，默认操作的情况下会提交合并中修改的内容</li><li>merge 的提交历史忠实地记录了实际发生过什么，关注点在真实的提交历史上面</li><li>rebase 并没有进行合并操作，只是提取了当前分支的修改，将其复制在了目标分支的最新提交后面</li><li>rebase 的提交历史反映了项目过程中发生了什么，关注点在开发过程上面</li><li>merge 与 rebase 都是非常强大的分支整合命令，没有优劣之分，使用哪一个应由项目和团队的开发需求决定</li><li>merge 和 rebase 还有很多强大的选项，可以使用 git help <command> 查看</li></ul><h2 id="7-Git-stash是什么？它的相关使用方式命令"><a href="#7-Git-stash是什么？它的相关使用方式命令" class="headerlink" title="7. Git stash是什么？它的相关使用方式命令"></a>7. Git stash是什么？它的相关使用方式命令</h2><ul><li>git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。</li><li>git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。</li><li>git stash pop –index stash@{0}: 恢复编号为0的进度的工作区和暂存区。</li><li>git stash apply stash@{1} 以将你指定版本号为stash@{1}的工作取出来</li><li>git stash drop[<stash>] 删除某一个进度，默认删除最新进度</stash></li><li>git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。</li><li>git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 恢复工作进度</span><span class="token function">git</span> stash pop <span class="token punctuation">[</span>--index<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>stash<span class="token operator">></span><span class="token punctuation">]</span>--index 参数：不仅恢复工作区，还恢复暂存区<span class="token operator">&lt;</span>stash<span class="token operator">></span> 指定恢复某一个具体进度。如果没有这个参数，默认恢复最新进度<span class="token comment" spellcheck="true"># 这是git stash保存进度的完整命令形式</span><span class="token function">git</span> stash <span class="token punctuation">[</span>save message<span class="token punctuation">]</span> <span class="token punctuation">[</span>-k<span class="token operator">|</span>--no-keep-index<span class="token punctuation">]</span> <span class="token punctuation">[</span>--patch<span class="token punctuation">]</span>-k和--no-keep-index指定保存进度后，是否重置暂存区--patch 会显示工作区和HEAD的差异,通过编辑差异文件，排除不需要保存的内容。和git add -p命令类似使用save可以对进度添加备注<span class="token comment" spellcheck="true"># git stash save "这是保存的进度"</span></code></pre><h2 id="8-Git只从暂存区删除，从工作空间删除的命令分别是什么"><a href="#8-Git只从暂存区删除，从工作空间删除的命令分别是什么" class="headerlink" title="8. Git只从暂存区删除，从工作空间删除的命令分别是什么?"></a>8. Git只从暂存区删除，从工作空间删除的命令分别是什么?</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> --cached<span class="token function">git</span> <span class="token function">rm</span><span class="token function">git</span> commit</code></pre><h2 id="9-Git标签的使用"><a href="#9-Git标签的使用" class="headerlink" title="9. Git标签的使用"></a>9. Git标签的使用</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 列出现有的标签</span><span class="token function">git</span> tag<span class="token comment" spellcheck="true"># 打标签</span><span class="token function">git</span> tag -a v1.01 -m <span class="token string">"Relase version 1.01"</span><span class="token comment" spellcheck="true"># 查看相应标签的版本信息</span><span class="token function">git</span> show v1.4</code></pre><ul><li>-a 选项,创建一个含附注类型的标签</li><li>-m 选项,指定了对应的标签说明</li></ul><h2 id="9-Git分支的使用"><a href="#9-Git分支的使用" class="headerlink" title="9. Git分支的使用"></a>9. Git分支的使用</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看本地分支</span><span class="token function">git</span> branch<span class="token comment" spellcheck="true"># 查看远程分支</span><span class="token function">git</span> branch -r<span class="token comment" spellcheck="true"># 创建本地分支(注意新分支创建后不会自动切换为当前分支)</span><span class="token function">git</span> branch <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 切换分支</span><span class="token function">git</span> checkout <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 创建新分支并立即切换到新分支</span><span class="token function">git</span> checkout -b <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 强制删除一个分支</span><span class="token function">git</span> branch -D <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 合并分支(将名称为[name]的分支与当前分支合并)</span><span class="token function">git</span> merge <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 查看各个分支最后提交信息</span><span class="token function">git</span> br -v<span class="token comment" spellcheck="true"># 查看已经被合并到当前分支的分支</span><span class="token function">git</span> br --merged<span class="token comment" spellcheck="true"># 查看尚未被合并到当前分支的分支</span><span class="token function">git</span> br --no-merged</code></pre><h2 id="10-介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。"><a href="#10-介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。" class="headerlink" title="10. 介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。"></a>10. 介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。</h2><p>merge和rebase对于ours和theirs的定义是完全相反的。在merge时，ours指代的是当前分支，theirs代表需要被合并的分支。而在rebase过程中，ours指向了修改参考分支，theirs却是当前分支。因为rebase 隐含了一个<code>git checkout upstream</code>的过程，将<code>HEAD</code>从local分支变成了upstream分支。git会在rebase结束后撤销这个改变，但它已经不可避免地影响了冲突的状态，使rebase中ours和theirs的定义与merge 截然相反。因此，在使用ours与theirs时请格外小心。</p><h2 id="11-Git远程操作相关"><a href="#11-Git远程操作相关" class="headerlink" title="11. Git远程操作相关"></a>11. Git远程操作相关</h2><h3 id="1-clone"><a href="#1-clone" class="headerlink" title="(1). clone"></a>(1). clone</h3><blockquote><p>git clone &lt;版本库的网址&gt;<br>git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 克隆jQuery的版本库</span> <span class="token function">git</span> clone https://github.com/jquery/jquery.git <span class="token function">git</span> clone -o jQuery https://github.com/jquery/jquery.git</code></pre><h3 id="2-remote"><a href="#2-remote" class="headerlink" title="(2). remote"></a>(2). remote</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 列出所有远程主机</span><span class="token function">git</span> remote<span class="token comment" spellcheck="true"># 使用-v选项，可以参看远程主机的网址</span><span class="token function">git</span> remote -v<span class="token comment" spellcheck="true"># 可以查看该主机的详细信息</span><span class="token function">git</span> remote show <span class="token operator">&lt;</span>主机名<span class="token operator">></span><span class="token comment" spellcheck="true"># 添加远程主机</span><span class="token function">git</span> remote add <span class="token operator">&lt;</span>主机名<span class="token operator">></span> <span class="token operator">&lt;</span>网址<span class="token operator">></span><span class="token comment" spellcheck="true"># 删除远程主机</span><span class="token function">git</span> remote <span class="token function">rm</span> <span class="token operator">&lt;</span>主机名<span class="token operator">></span><span class="token comment" spellcheck="true"># 修改远程主机名称</span><span class="token function">git</span> remote <span class="token function">rename</span> <span class="token operator">&lt;</span>原主机名<span class="token operator">></span> <span class="token operator">&lt;</span>新主机名<span class="token operator">></span></code></pre><h3 id="3-fetch"><a href="#3-fetch" class="headerlink" title="(3). fetch"></a>(3). fetch</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 取回所有分支(branch)的更新到本地</span><span class="token function">git</span> fetch <span class="token operator">&lt;</span>远程主机名<span class="token operator">></span><span class="token comment" spellcheck="true"># 取回某的特定分支的更新</span><span class="token function">git</span> fetch <span class="token operator">&lt;</span>远程主机名<span class="token operator">></span> <span class="token operator">&lt;</span>分支名<span class="token operator">></span><span class="token comment" spellcheck="true"># 取回origin主机的master分支的更新</span><span class="token function">git</span> fetch origin master<span class="token comment" spellcheck="true"># 所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支</span><span class="token function">git</span> merge origin/master<span class="token function">git</span> rebase origin/master</code></pre><h3 id="4-pull"><a href="#4-pull" class="headerlink" title="(4). pull"></a>(4). pull</h3><blockquote><p>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 取回origin主机的next分支，与本地的master分支合并</span><span class="token function">git</span> pull origin next:master<span class="token comment" spellcheck="true"># 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</span><span class="token function">git</span> pull origin next<span class="token comment" spellcheck="true"># 上面的命令实质上等同于先做git fetch，再做git merge。</span><span class="token function">git</span> fetch origin<span class="token function">git</span> merge origin/next<span class="token comment" spellcheck="true"># 合并需要采用rebase模式</span><span class="token function">git</span> pull --rebase <span class="token operator">&lt;</span>远程主机名<span class="token operator">></span> <span class="token operator">&lt;</span>远程分支名<span class="token operator">></span>:<span class="token operator">&lt;</span>本地分支名<span class="token operator">></span></code></pre><h3 id="5-push"><a href="#5-push" class="headerlink" title="(5). push"></a>(5). push</h3><blockquote><p>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</p></blockquote><p><strong>注意</strong>:分支推送顺序的写法是”&lt;来源地&gt;:&lt;目的地&gt;”，所以git pull是”&lt;远程分支&gt;:&lt;本地分支&gt;”，而git push是”&lt;本地分支&gt;:&lt;远程分支&gt;”。</p><ul><li>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。</li><li>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建</span><span class="token function">git</span> push origin master<span class="token comment" spellcheck="true"># 省略了本地分支，以下等同，删除origin主机的master分支</span><span class="token function">git</span> push origin :master<span class="token function">git</span> push origin --delete master<span class="token comment" spellcheck="true"># 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略</span><span class="token function">git</span> push origin<span class="token comment" spellcheck="true"># 如果当前分支只有一个追踪分支，那么主机名都可以省略。</span><span class="token function">git</span> push<span class="token comment" spellcheck="true"># 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push</span><span class="token function">git</span> push -u origin master<span class="token comment" spellcheck="true"># 不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机</span><span class="token function">git</span> push --all origin<span class="token comment" spellcheck="true"># 强制推送</span><span class="token function">git</span> push --force origin<span class="token comment" spellcheck="true"># git push不会推送标签(tag)，除非使用–tags选项</span><span class="token function">git</span> push origin --tags</code></pre><h2 id="12-Git-Flow使用简介"><a href="#12-Git-Flow使用简介" class="headerlink" title="12. Git Flow使用简介"></a>12. Git Flow使用简介</h2><p>就像代码需要代码规范一样，代码管理同样需要一个清晰的流程和规范。三种广泛使用的工作流程：</p><ul><li>Git flow</li><li>Github flow</li><li>Gitlab flow</li></ul><p>三种工作流程，有一个共同点：都采用”功能驱动式开发”（Feature-driven development，简称FDD）。它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。最早诞生、并得到广泛采用的一种工作流程，就是<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">Git flow</a>。</p><p>它最主要的特点有两个。首先，项目存在两个长期分支，分别是：主分支master、开发分支develop。其次，项目存在三种短期分支，分别是：功能分支（feature branch）、补丁分支（hotfix branch）、预发分支（release branch），一旦完成开发，它们就会被合并进develop或master，然后被删除。</p><h3 id="1-Git-Flow流程图"><a href="#1-Git-Flow流程图" class="headerlink" title="(1). Git Flow流程图"></a>(1). Git Flow流程图</h3><p><img src="http://static.blinkfox.com/ghost/imagegit_flow.png" alt="Git Flow流程图"></p><h3 id="2-Git-Flow常用的分支"><a href="#2-Git-Flow常用的分支" class="headerlink" title="(2). Git Flow常用的分支"></a>(2). Git Flow常用的分支</h3><ul><li><code>Production</code>分支。也就是我们经常使用的Master分支，这个分支最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改。</li><li><code>Develop</code>分支。这个分支是我们是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支。</li><li><code>Feature</code>分支。这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回Develop分支进入下一个Release。</li><li><code>Release</code>分支。当你需要一个发布一个新Release的时候，我们基于Develop分支创建一个Release分支，完成Release后，我们合并到Master和Develop分支。</li><li><code>Hotfix</code>分支。当我们在Production发现新的Bug时候，我们需要创建一个Hotfix, 完成Hotfix后，我们合并回Master和Develop分支，所以Hotfix的改动会进入下一个Release。</li></ul><h3 id="3-Git-Flow代码示例"><a href="#3-Git-Flow代码示例" class="headerlink" title="(3). Git Flow代码示例"></a>(3). Git Flow代码示例</h3><h4 id="a-创建develop分支"><a href="#a-创建develop分支" class="headerlink" title="a. 创建develop分支"></a>a. 创建develop分支</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch develop<span class="token function">git</span> push -u origin develop</code></pre><h4 id="b-开始新Feature开发"><a href="#b-开始新Feature开发" class="headerlink" title="b. 开始新Feature开发"></a>b. 开始新Feature开发</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b some-feature develop<span class="token comment" spellcheck="true"># Optionally, push branch to origin:</span><span class="token function">git</span> push -u origin some-feature<span class="token comment" spellcheck="true"># 做一些改动</span><span class="token function">git</span> status<span class="token function">git</span> add some-file<span class="token function">git</span> commit</code></pre><h4 id="c-完成Feature"><a href="#c-完成Feature" class="headerlink" title="c. 完成Feature"></a>c. 完成Feature</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> pull origin develop<span class="token function">git</span> checkout develop<span class="token function">git</span> merge --no-ff some-feature<span class="token function">git</span> push origin develop<span class="token function">git</span> branch -d some-feature<span class="token comment" spellcheck="true"># If you pushed branch to origin:</span><span class="token function">git</span> push origin --delete some-feature</code></pre><h4 id="d-开始Relase"><a href="#d-开始Relase" class="headerlink" title="d. 开始Relase"></a>d. 开始Relase</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b release-0.1.0 develop<span class="token comment" spellcheck="true"># Optional: Bump version number, commit</span><span class="token comment" spellcheck="true"># Prepare release, commit</span></code></pre><h4 id="e-完成Release"><a href="#e-完成Release" class="headerlink" title="e. 完成Release"></a>e. 完成Release</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout master<span class="token function">git</span> merge --no-ff release-0.1.0<span class="token function">git</span> push<span class="token function">git</span> checkout develop<span class="token function">git</span> merge --no-ff release-0.1.0<span class="token function">git</span> push<span class="token function">git</span> branch -d release-0.1.0<span class="token comment" spellcheck="true"># If you pushed branch to origin:</span><span class="token function">git</span> push origin --delete release-0.1.0   <span class="token function">git</span> tag -a v0.1.0 master<span class="token function">git</span> push --tags</code></pre><h4 id="f-开始Hotfix"><a href="#f-开始Hotfix" class="headerlink" title="f. 开始Hotfix"></a>f. 开始Hotfix</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b hotfix-0.1.1 master</code></pre><h4 id="g-完成Hotfix"><a href="#g-完成Hotfix" class="headerlink" title="g. 完成Hotfix"></a>g. 完成Hotfix</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout master<span class="token function">git</span> merge --no-ff hotfix-0.1.1<span class="token function">git</span> push<span class="token function">git</span> checkout develop<span class="token function">git</span> merge --no-ff hotfix-0.1.1<span class="token function">git</span> push<span class="token function">git</span> branch -d hotfix-0.1.1<span class="token function">git</span> tag -a v0.1.1 master<span class="token function">git</span> push --tags</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
